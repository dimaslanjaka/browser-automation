{"version":3,"sources":["../src/fetchXlsxData4.js"],"names":[],"mappings":"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","file":"fetchXlsxData4.js","sourcesContent":["import ExcelJS from 'exceljs';\nimport moment from 'moment';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { logInline, logLine } from './utils.js';\nimport { getNumbersOnly } from './utils-browser.js';\nimport { fixData, getCacheKey, getCachedData, getDataRange, getFileHash, saveCachedData } from './xlsx-helper.js';\n\nconst __filename = fileURLToPath(import.meta.url);\n\n/**\n * Reads Excel (.xlsx) files from the .cache/sheets directory and extracts data from all header regions.\n *\n * Returns an array of row objects, each with an `originalRowNumber` and `headerRegion` property. The shape of each row depends on the detected region headers and may be a partial ExcelRowData.\n *\n * @param {Object} [options]\n * @param {boolean} [options.noCache=false] - If true, disables cache and always reads from file.\n * @returns {Promise<import('../globals').FetchXlsxData4Result>}\n *   A promise that resolves to an array of parsed Excel row objects, each with originalRowNumber and headerRegion.\n */\nexport async function fetchXlsxData4(options = {}) {\n  const { noCache = false } = options;\n  const xlsxFile = path.join(process.cwd(), '.cache', 'sheets', 'spreadsheet-' + process.env.SPREADSHEET_ID + '.xlsx');\n\n  if (!xlsxFile) {\n    throw new Error('No Excel files found in .cache/sheets directory');\n  }\n\n  // Generate file hash and cache key\n  const fileHash = getFileHash(xlsxFile);\n  const cacheKey = getCacheKey('fetchXlsxData4', fileHash);\n\n  // Check cache first\n  if (!noCache) {\n    const cachedData = getCachedData(cacheKey);\n    if (cachedData) {\n      return cachedData;\n    }\n  }\n\n  // Read and parse the xlsx file using streaming reader\n  const workbookReader = new ExcelJS.stream.xlsx.WorkbookReader(xlsxFile);\n  const jsonData = [];\n  let before7488Headers = null;\n  let after7488Headers = null;\n  const nikMap = new Map();\n\n  for await (const worksheetReader of workbookReader) {\n    let rowNumber = 0;\n\n    for await (const row of worksheetReader) {\n      rowNumber++;\n      const allValues = row.values.slice(1); // slice(1) to remove the first empty element\n\n      // Detect header rows\n      if (rowNumber === 1) {\n        // Assume first non-empty row is header for region 0\n        if (allValues.some((v) => v && v !== '')) {\n          before7488Headers = allValues;\n          continue;\n        }\n      }\n      if (rowNumber === 7488) {\n        // Row 7488 contains the actual headers for region 1\n        after7488Headers = allValues.slice(9, 17); // Take only the second set\n        // Do not parse this row as data, just set headers and continue\n        continue;\n      }\n\n      // For rows before 7488, use before7488Headers; after, use after7488Headers\n      let values, usedHeaders, currentRegion;\n      if (rowNumber < 7488) {\n        usedHeaders = before7488Headers;\n        values = allValues;\n        currentRegion = 0;\n      } else if (rowNumber > 7488) {\n        usedHeaders = after7488Headers;\n        values = allValues.slice(9, 17);\n        currentRegion = 1;\n      } else {\n        // Skip header rows\n        continue;\n      }\n\n      // Skip empty rows\n      if (!values || values.length === 0 || values.every((v) => v === undefined || v === null || v === '')) {\n        continue;\n      }\n\n      const rowData = {};\n      values.forEach((value, index) => {\n        const header = usedHeaders && usedHeaders[index];\n        if (header && value !== undefined && value !== null && value !== '') {\n          if ((header === 'TGL LAHIR' || header === 'TANGGAL') && typeof value === 'number') {\n            // Convert Excel serial date numbers to proper birth date strings for TGL LAHIR\n            const baseDate = moment('1900-01-01');\n            const daysSinceBase = value - 1;\n            const adjustedDays = daysSinceBase > 59 ? daysSinceBase - 1 : daysSinceBase;\n            const resultDate = baseDate.clone().add(adjustedDays, 'days');\n            rowData[header] = resultDate.format('DD/MM/YYYY');\n          } else {\n            rowData[header] = value;\n          }\n        }\n      });\n\n      // Only add row if it has meaningful data\n      if (Object.keys(rowData).length > 0) {\n        rowData.originalRowNumber = rowNumber;\n        rowData.headerRegion = currentRegion;\n        // Deduplicate by NIK: always keep the latest (region 1 if exists)\n        if (rowData.NIK) {\n          const nikKey = getNumbersOnly(rowData.NIK);\n          const existing = nikMap.get(nikKey);\n          if (!existing || rowData.headerRegion === 1) {\n            nikMap.set(nikKey, rowData);\n          }\n        } else {\n          jsonData.push(rowData); // fallback for rows without NIK\n        }\n      }\n    }\n    break;\n  }\n\n  // Combine deduped NIK rows and any rows without NIK\n  const deduped = [...nikMap.values(), ...jsonData];\n  const keyMap = {\n    TANGGAL: 'tanggal',\n    'TANGGAL ENTRY': 'tanggal',\n    NAMA: 'nama',\n    'NAMA PASIEN': 'nama',\n    NIK: 'nik',\n    'NIK PASIEN': 'nik',\n    PEKERJAAN: 'pekerjaan',\n    'BERAT BADAN': 'bb',\n    BB: 'bb',\n    'TINGGI BADAN': 'tb',\n    TB: 'tb',\n    BATUK: 'batuk',\n    DM: 'diabetes',\n    'TGL LAHIR': 'tgl_lahir',\n    'TANGGAL LAHIR': 'tgl_lahir',\n    'TANGGAL LAHIR PASIEN': 'tgl_lahir',\n    ALAMAT: 'alamat',\n    'ALAMAT PASIEN': 'alamat',\n    'JENIS KELAMIN': 'jenis_kelamin',\n    'PETUGAS YG MENG ENTRY': 'petugas',\n    'PETUGAS ENTRY': 'petugas'\n  };\n\n  // Map keys according to keyMap\n  const mapped = deduped.map((row) => {\n    const newRow = {};\n    for (const key in row) {\n      const mappedKey = keyMap[key] || key;\n      newRow[mappedKey] = row[key];\n    }\n    return newRow;\n  });\n\n  // Save to cache\n  saveCachedData(cacheKey, mapped);\n\n  return mapped;\n}\n\nif (process.argv[1] === __filename) {\n  (async () => {\n    try {\n      const outputFile = path.join(process.cwd(), 'tmp', 'range-data-output.json');\n\n      const rangeData = await getDataRange(await fetchXlsxData4(), {\n        fromNik: '3578106311200003',\n        fromNama: 'NI NYOMAN ANINDYA MAHESWARI',\n        toNik: '3578101502250001',\n        toNama: 'MUHAMMAD NATHAN ALFATIR',\n        outputFile\n      });\n\n      logLine(`\\nSuccessfully extracted ${rangeData.length} rows`);\n\n      const actualDatas = [\n        { index: 0, 'TGL LAHIR': '23/11/2020', NAMA: 'NI NYOMAN ANINDYA MAHESWARI', NIK: '3578106311200003' },\n        {\n          index: 10,\n          'TGL LAHIR': moment('2022-05-10', 'YYYY-MM-DD').format('DD/MM/YYYY'),\n          NAMA: 'SADDAM AQSABYAN',\n          NIK: '3578101005220004'\n        },\n        {\n          NIK: '3578100610230010',\n          NAMA: 'SEO EVELYN NABUD',\n          'TGL LAHIR': moment('2023-10-06', 'YYYY-MM-DD').format('DD/MM/YYYY')\n        }\n      ];\n\n      const totalRows = rangeData.length;\n      let currentRow = 0;\n\n      while (rangeData.length > 0) {\n        const data = rangeData.shift();\n        if (!data) continue;\n        logInline(`Processing row ${currentRow} of ${totalRows}`);\n\n        const actualData = actualDatas.find(\n          (item) =>\n            item.index === currentRow ||\n            (item.NAMA && data.NAMA && item.NAMA.trim().toLowerCase() === data.NAMA.trim().toLowerCase()) ||\n            (item.NIK && data.NIK && getNumbersOnly(item.NIK) === getNumbersOnly(data.NIK))\n        );\n\n        if (actualData) {\n          const get = await fixData(data);\n          logLine(\n            `\\nRow ${currentRow}:\\n\\tTGL LAHIR (fixed): ${get['TGL LAHIR']} | Expected: ${actualData['TGL LAHIR']} | Match: ${get['TGL LAHIR'] === actualData['TGL LAHIR']}\\n\\tNAMA: ${get['NAMA']} | Expected: ${actualData['NAMA']} | Match: ${get['NAMA'] === actualData['NAMA']}`\n          );\n        }\n\n        currentRow++;\n      }\n\n      logLine(`\\nProcessing completed. Processed ${currentRow} rows total.`);\n\n      // force exit after processing\n      process.exit(0);\n    } catch (error) {\n      logLine(error);\n    }\n  })().catch(logLine);\n}\n"]}