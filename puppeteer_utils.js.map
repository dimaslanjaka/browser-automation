{"version":3,"sources":["../src/puppeteer_utils.js"],"names":["iframeSelector","elementSelector","value","triggerEvents","handleDisabled","delay","clearFirst","checkVisibility","selector","expectedValue","quietTime","timeout","el"],"mappings":"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","file":"puppeteer_utils.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport puppeteer from 'puppeteer-extra';\nimport StealthPlugin from 'puppeteer-extra-plugin-stealth';\nimport { fileURLToPath } from 'url';\nimport { sleep } from './utils-browser.js';\nimport { chromium } from 'playwright-extra';\nimport { Browser, Page } from 'puppeteer';\n\n/**\n * Get the absolute path of the current script.\n * @constant {string} __filename - The file path of the current module.\n * @constant {string} __dirname - The directory path of the current module.\n */\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * The absolute path for the user data directory.\n * @constant {string} userDataDir - The path to store browser profile data.\n */\nconst userDataDir = path.resolve(process.cwd(), '.cache/profile1');\n\n/**\n * @type {import('puppeteer').Browser | null}\n */\nlet puppeteer_browser = null;\n/**\n * @type {import('playwright').Browser | null}\n */\nlet playwright_browser = null;\n\n/**\n * Launches or reuses a Puppeteer browser instance using `puppeteer-extra` with optional stealth plugin.\n *\n * @async\n * @function getPuppeteer\n * @param {import('puppeteer').LaunchOptions} [options] - Configuration options for launching Puppeteer.\n * @returns {Promise<{page: import('puppeteer').Page, browser: import('puppeteer').Browser, puppeteer: typeof import('puppeteer-extra')}>}\n * Resolves with an object containing:\n *   - `page`: A new Puppeteer `Page` instance.\n *   - `browser`: The launched or reused Puppeteer `Browser` instance.\n *   - `puppeteer`: The `puppeteer-extra` module reference.\n *\n * @example\n * const { page, browser } = await getPuppeteer({ headless: true });\n * await page.goto('https://example.com');\n * // ...\n * await browser.close();\n */\nexport async function getPuppeteer(options = {}) {\n  const defaultOptions = {\n    headless: false,\n    userDataDir: userDataDir,\n    executablePath: 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n    args: [\n      '--disable-features=HeavyAdIntervention',\n      '--disable-features=AdInterestGroupAPI',\n      '--disable-popup-blocking',\n      '--no-default-browser-check',\n      '--no-first-run',\n      '--ignore-certificate-errors',\n      '--hide-crash-restore-bubble',\n      '--autoplay-policy=no-user-gesture-required'\n    ],\n    reuse: true,\n    devtools: false\n  };\n  const merged = { ...defaultOptions, ...options };\n\n  // Always use stealth plugin\n  puppeteer.use(StealthPlugin());\n\n  if (!puppeteer_browser || !puppeteer_browser.connected || !merged.reuse) {\n    if (merged.executablePath && !fs.existsSync(merged.executablePath)) {\n      merged.executablePath = undefined; // Use Puppeteer's default Chromium\n    }\n    puppeteer_browser = await puppeteer.launch(merged);\n  }\n\n  const page = await puppeteer_browser.newPage();\n  return { page, browser: puppeteer_browser, puppeteer };\n}\n\n/**\n * Launches a new browser instance using Playwright or reuses an existing one.\n *\n * @async\n * @function getPlaywright\n * @param {import('playwright').LaunchOptions} [options] - Optional configuration for launching Playwright\n * @returns {Promise<{\n *   page: import('playwright').Page,\n *   browser: import('playwright').Browser,\n *   context: import('playwright').BrowserContext,\n *   playwright: typeof import('playwright').chromium\n * }>}\n * Resolves with an object containing:\n * - `page`: A new Playwright `Page` instance.\n * - `browser`: The launched or reused Playwright `Browser` instance.\n * - `context`: The Playwright `BrowserContext` instance.\n * - `playwright`: The Playwright `chromium` module reference.\n */\nexport async function getPlaywright(options = {}) {\n  const defaultOptions = {\n    headless: false,\n    userDataDir: userDataDir,\n    executablePath: 'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n    args: [\n      '--disable-features=HeavyAdIntervention',\n      '--disable-features=AdInterestGroupAPI',\n      '--disable-popup-blocking',\n      '--no-default-browser-check',\n      '--no-first-run',\n      '--ignore-certificate-errors',\n      '--hide-crash-restore-bubble',\n      '--autoplay-policy=no-user-gesture-required'\n    ],\n    reuse: true\n  };\n  const merged = { ...defaultOptions, ...options };\n\n  // Always use stealth plugin\n  chromium.use(StealthPlugin());\n\n  if (!playwright_browser || !playwright_browser.isConnected() || !merged.reuse) {\n    if (merged.executablePath && !fs.existsSync(merged.executablePath)) {\n      merged.executablePath = undefined; // Use Playwright's default Chromium\n    }\n    playwright_browser = await chromium.launch(merged);\n  }\n\n  const page = await playwright_browser.newPage();\n  const context = await page.context();\n  return { page, browser: playwright_browser, context, playwright: chromium };\n}\n\n/**\n * Closes the Puppeteer browser instance.\n * @async\n * @function closePuppeteer\n */\nexport async function closePuppeteer() {\n  if (puppeteer_browser) {\n    await puppeteer_browser.close();\n    puppeteer_browser = null;\n  }\n}\n\n/**\n * Clears an input field, types a value into it, and triggers input and change events.\n *\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} selector - The CSS selector for the input field.\n * @param {string} value - The value to type into the input field.\n * @returns {Promise<void>} - A promise that resolves after typing and triggering events.\n */\nexport async function typeAndTrigger(page, selector, value) {\n  await page.focus(selector);\n\n  // Clear the input field\n  await page.evaluate((sel) => {\n    const input = document.querySelector(sel);\n    if (input) {\n      input.value = '';\n      input.dispatchEvent(new Event('input', { bubbles: true }));\n    }\n  }, selector);\n\n  // Type the new value\n  await page.type(selector, value, { delay: 100 });\n\n  // Trigger input and change events\n  await page.evaluate((sel) => {\n    const input = document.querySelector(sel);\n    if (input) {\n      input.dispatchEvent(new Event('input', { bubbles: true }));\n      input.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n  }, selector);\n  await page.keyboard.press('Tab');\n  await sleep(300);\n}\n\n/**\n * Check if the element exists and optionally if it is visible\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} selector\n * @param {Object} [options] - Options object\n * @param {boolean} [options.visible=true] - Whether to check if the element is visible\n * @returns {Promise<boolean>} - Returns true if the element exists (and is visible if visible=true), otherwise false.\n */\nexport async function isElementExist(page, selector, options = {}) {\n  const { visible = true } = options;\n  const element = await page.$(selector);\n  if (!element) return false;\n  if (!visible) return true;\n  // Check visibility using the same logic as isElementVisible\n  return await page.evaluate((sel) => {\n    const elem = document.querySelector(sel);\n    if (!elem) return false;\n    const style = window.getComputedStyle(elem);\n    return (\n      style.display !== 'none' &&\n      style.visibility !== 'hidden' &&\n      elem.offsetWidth > 0 &&\n      elem.offsetHeight > 0 &&\n      style.opacity !== '0'\n    );\n  }, selector);\n}\n\n/**\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} selector\n * @returns {Promise<boolean>}\n */\nexport async function isElementVisible(page, selector) {\n  return await page.evaluate((sel) => {\n    const elem = document.querySelector(sel);\n    if (!elem) return false;\n\n    const style = window.getComputedStyle(elem);\n    return (\n      style.display !== 'none' &&\n      style.visibility !== 'hidden' &&\n      elem.offsetWidth > 0 &&\n      elem.offsetHeight > 0 &&\n      style.opacity !== '0'\n    );\n  }, selector);\n}\n\n/**\n * Helper function to set value in an iframe element\n * @param {import('puppeteer').Page} page - Puppeteer page object\n * @param {string} iframeSelector - CSS selector for the iframe\n * @param {string} elementSelector - CSS selector for the target element (use #id for IDs)\n * @param {string} value - Value to set\n * @param {Object} options - Options object\n * @param {boolean} options.triggerEvents - Whether to trigger change/input events\n * @param {boolean} options.handleDisabled - Whether to temporarily enable disabled elements\n */\nexport async function setIframeElementValue(page, iframeSelector, elementSelector, value, options = {}) {\n  const { triggerEvents = true, handleDisabled = true } = options;\n\n  await page.evaluate(\n    ({ iframeSelector, elementSelector, value, triggerEvents, handleDisabled }) => {\n      const iframe = document.querySelector(iframeSelector);\n      if (!iframe || !iframe.contentDocument) {\n        throw new Error(`Iframe not found or not accessible: ${iframeSelector}`);\n      }\n\n      const element = iframe.contentDocument.querySelector(elementSelector);\n\n      if (!element) {\n        throw new Error(`Element not found: ${elementSelector}`);\n      }\n\n      let wasDisabled = false;\n      if (handleDisabled && element.disabled) {\n        wasDisabled = true;\n        element.disabled = false;\n      }\n\n      // Set the value\n      element.value = value;\n\n      // Trigger events if requested\n      if (triggerEvents) {\n        const changeEvent = new iframe.contentWindow.Event('change', { bubbles: true });\n        element.dispatchEvent(changeEvent);\n\n        const inputEvent = new iframe.contentWindow.Event('input', { bubbles: true });\n        element.dispatchEvent(inputEvent);\n      }\n\n      // Restore disabled state if it was originally disabled\n      if (wasDisabled) {\n        element.disabled = true;\n      }\n\n      return true;\n    },\n    { iframeSelector, elementSelector, value, triggerEvents, handleDisabled }\n  );\n}\n\n/**\n * Clears an input field inside an iframe, types a value into it, and triggers input and change events.\n * This is the iframe-compatible version of typeAndTrigger.\n *\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} iframeSelector - CSS selector for the iframe.\n * @param {string} elementSelector - CSS selector for the input field inside the iframe (use #id for IDs, .class for classes, etc.).\n * @param {string} value - The value to type into the input field.\n * @param {Object} options - Options object\n * @param {number} options.delay - Typing delay in milliseconds\n * @param {boolean} options.clearFirst - Whether to clear the field before typing\n * @returns {Promise<void>} - A promise that resolves after typing and triggering events.\n */\nexport async function typeAndTriggerIframe(page, iframeSelector, elementSelector, value, options = {}) {\n  const { delay = 100, clearFirst = true } = options;\n\n  await page.evaluate(\n    ({ iframeSelector, elementSelector, value, delay, clearFirst }) => {\n      const iframe = document.querySelector(iframeSelector);\n      if (!iframe || !iframe.contentDocument) {\n        throw new Error(`Iframe not found or not accessible: ${iframeSelector}`);\n      }\n\n      const element = iframe.contentDocument.querySelector(elementSelector);\n\n      if (!element) {\n        throw new Error(`Element not found: ${elementSelector}`);\n      }\n\n      // Focus the element\n      element.focus();\n\n      // Clear the field if requested\n      if (clearFirst) {\n        element.value = '';\n        element.dispatchEvent(new iframe.contentWindow.Event('input', { bubbles: true }));\n      }\n\n      // Type the value character by character with delay\n      let currentValue = element.value;\n      const typeChar = (char, index) => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            currentValue += char;\n            element.value = currentValue;\n\n            // Trigger input event for each character\n            element.dispatchEvent(new iframe.contentWindow.Event('input', { bubbles: true }));\n            resolve();\n          }, index * delay);\n        });\n      };\n\n      // Type all characters\n      const typePromises = Array.from(value).map((char, index) => typeChar(char, index));\n\n      return Promise.all(typePromises).then(() => {\n        // More robust event triggering after typing is complete\n        const events = ['input', 'change', 'blur', 'keyup'];\n        events.forEach((eventType) => {\n          const event = new iframe.contentWindow.Event(eventType, {\n            bubbles: true,\n            cancelable: true\n          });\n          element.dispatchEvent(event);\n        });\n\n        // Also trigger jQuery events if jQuery is available in the iframe\n        if (typeof iframe.contentWindow.$ !== 'undefined' && iframe.contentWindow.$(element).length) {\n          iframe.contentWindow.$(element).trigger('change').trigger('blur');\n        }\n\n        // For datepicker or special inputs, also trigger specific events\n        if (\n          element.id.includes('tgl') ||\n          element.classList.contains('datepicker') ||\n          element.getAttribute('data-role') === 'datepicker'\n        ) {\n          const specificEvents = ['datechange', 'dp.change', 'changeDate'];\n          specificEvents.forEach((eventType) => {\n            try {\n              const event = new iframe.contentWindow.Event(eventType, {\n                bubbles: true,\n                cancelable: true\n              });\n              element.dispatchEvent(event);\n            } catch (_e) {\n              // Ignore if event type doesn't exist\n            }\n          });\n        }\n\n        // Simulate tab key press by blurring the element\n        element.blur();\n\n        return true;\n      });\n    },\n    { iframeSelector, elementSelector, value, delay, clearFirst }\n  );\n\n  // Add a small delay after typing completion\n  await sleep(1000);\n}\n\n/**\n * Types a value into an input field inside an iframe using Puppeteer's Frame API.\n *\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} iframeSelector - CSS selector for the iframe.\n * @param {string} elementSelector - CSS selector for the input field inside the iframe.\n * @param {string} value - The value to type into the input field.\n * @param {Object} [options] - Options object.\n * @param {number} [options.delay=100] - Typing delay in milliseconds.\n * @param {boolean} [options.clearFirst=false] - Whether to clear the field before typing.\n * @returns {Promise<void>} - A promise that resolves after typing is complete.\n */\nexport async function typeToIframe(page, iframeSelector, elementSelector, value, options = {}) {\n  const { delay = 100, clearFirst = false } = options;\n  const iframeElement = await page.$(iframeSelector);\n  const iframe = await iframeElement.contentFrame();\n  await iframe.focus(elementSelector);\n  if (clearFirst) {\n    // Clear the input field inside the iframe\n    await iframe.evaluate((selector) => {\n      const el = document.querySelector(selector);\n      if (el) {\n        el.value = '';\n        el.dispatchEvent(new Event('input', { bubbles: true }));\n      }\n    }, elementSelector);\n    await iframe.type(elementSelector, '', { delay });\n  }\n  await iframe.type(elementSelector, value, { delay });\n  await iframe.evaluate((selector) => {\n    const el = document.querySelector(selector);\n    if (el) {\n      el.dispatchEvent(new Event('input', { bubbles: true }));\n      el.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n  }, elementSelector);\n  await page.keyboard.press('Tab'); // Simulate tab key press to blur\n  await sleep(300); // Wait for any potential UI updates after typing\n}\n\n/**\n * Check if an element exists and is visible inside an iframe\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} iframeSelector - CSS selector for the iframe\n * @param {string} elementSelector - CSS selector for the target element inside the iframe (use #id for IDs)\n * @param {Object} options - Options object\n * @param {boolean} options.checkVisibility - Whether to check if element is visible (default: true)\n * @returns {Promise<boolean>} - Returns true if the element exists and is visible inside the iframe\n */\nexport async function isIframeElementVisible(page, iframeSelector, elementSelector, options = {}) {\n  const { checkVisibility = true } = options;\n\n  try {\n    return await page.evaluate(\n      ({ iframeSelector, elementSelector, checkVisibility }) => {\n        const iframe = document.querySelector(iframeSelector);\n        if (!iframe || !iframe.contentDocument) {\n          return false;\n        }\n\n        const element = iframe.contentDocument.querySelector(elementSelector);\n\n        if (!element) {\n          return false;\n        }\n\n        // If we don't need to check visibility, just return true since element exists\n        if (!checkVisibility) {\n          return true;\n        }\n\n        // Check if element is visible using the iframe's window for getComputedStyle\n        const style = iframe.contentWindow.getComputedStyle(element);\n        const isVisible =\n          style.display !== 'none' &&\n          style.visibility !== 'hidden' &&\n          element.offsetWidth > 0 &&\n          element.offsetHeight > 0 &&\n          style.opacity !== '0';\n\n        return isVisible;\n      },\n      { iframeSelector, elementSelector, checkVisibility }\n    );\n  } catch (_error) {\n    // If there's an error (e.g., iframe not accessible), return false\n    return false;\n  }\n}\n\n/**\n * Click an element inside an iframe\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} iframeSelector - CSS selector for the iframe\n * @param {string} elementSelector - CSS selector for the target element inside the iframe\n * @param {Object} options - Options object\n * @param {boolean} options.checkVisibility - Whether to check if element is visible before clicking (default: true)\n * @returns {Promise<boolean>} - Returns true if click was successful, false otherwise\n */\nexport async function clickIframeElement(page, iframeSelector, elementSelector, options = {}) {\n  const { checkVisibility = true } = options;\n\n  try {\n    return await page.evaluate(\n      ({ iframeSelector, elementSelector, checkVisibility }) => {\n        const iframe = document.querySelector(iframeSelector);\n        if (!iframe || !iframe.contentDocument) {\n          throw new Error(`Iframe not found or not accessible: ${iframeSelector}`);\n        }\n\n        const element = iframe.contentDocument.querySelector(elementSelector);\n\n        if (!element) {\n          throw new Error(`Element not found: ${elementSelector}`);\n        }\n\n        // Check visibility if requested\n        if (checkVisibility) {\n          const style = iframe.contentWindow.getComputedStyle(element);\n          const isVisible =\n            style.display !== 'none' &&\n            style.visibility !== 'hidden' &&\n            element.offsetWidth > 0 &&\n            element.offsetHeight > 0 &&\n            style.opacity !== '0';\n\n          if (!isVisible) {\n            throw new Error(`Element is not visible: ${elementSelector}`);\n          }\n        }\n\n        // Click the element\n        element.click();\n        return true;\n      },\n      { iframeSelector, elementSelector, checkVisibility }\n    );\n  } catch (error) {\n    console.error(`Failed to click iframe element: ${error.message}`);\n    return false;\n  }\n}\n\n/**\n * Extracts attribute values and common properties from input and textarea elements.\n *\n * @param {(HTMLInputElement | HTMLTextAreaElement)[]} elements - Array of input or textarea elements.\n * @returns {Array<Record<string, string>>} Array of flattened objects containing all attributes plus name, value, id, disabled, and isVisible.\n */\nfunction extractFormValues(elements) {\n  return elements.map((el) => {\n    const attrs = Array.from(el.attributes).reduce((acc, attr) => {\n      acc[attr.name] = String(attr.value);\n      return acc;\n    }, {});\n\n    const isVisible = !!(el.offsetParent || el.offsetWidth > 0 || el.offsetHeight > 0);\n    let textLabel = '';\n    let currentEl = el; // Start from the target element\n\n    for (let i = 0; i < 6 && currentEl; i++) {\n      const labelEl = currentEl.querySelector('.form-item-label');\n      if (labelEl) {\n        textLabel = labelEl.textContent.trim();\n        break;\n      }\n      currentEl = currentEl.parentElement; // Move one level up\n    }\n\n    return {\n      ...attrs,\n      name: el.name || '',\n      value: el.value,\n      id: el.id || '',\n      disabled: String(el.disabled),\n      isVisible: String(isVisible),\n      label: textLabel\n    };\n  });\n}\n\n/**\n * Get values of all input and textarea elements within a container.\n * Works with both Page and Frame contexts.\n *\n * @param {import('puppeteer').Page|import('puppeteer').Frame} context - The Puppeteer page or frame instance.\n * @param {string} containerSelector - The CSS selector for the container.\n * @returns {Promise<ReturnType<typeof extractFormValues>>} - Returns an array of objects containing name, value, id, disabled, and all attributes of each input/textarea.\n */\nexport async function getFormValues(context, containerSelector) {\n  return await context.$$eval(`${containerSelector} input, ${containerSelector} textarea`, extractFormValues);\n}\n\n/**\n * Get values of all input and textarea elements within a container inside an iframe.\n *\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n * @param {string} iframeSelector - The CSS selector for the iframe.\n * @param {string} containerSelector - The CSS selector for the container inside the iframe.\n * @returns {Promise<ReturnType<typeof getFormValues>>}\n */\nexport async function getFormValuesFromFrame(page, iframeSelector, containerSelector) {\n  const iframeElement = await page.$(iframeSelector);\n  if (!iframeElement) throw new Error(`Iframe not found: ${iframeSelector}`);\n\n  const frame = await iframeElement.contentFrame();\n  if (!frame) throw new Error(`Failed to get frame from iframe element`);\n\n  return await getFormValues(frame, containerSelector);\n}\n\n/**\n * Triggers 'input' and 'change' events on an input or textarea element,\n * optionally within an iframe. Does NOT change the element’s value.\n *\n * @param {import('puppeteer').Page} page - Puppeteer Page object\n * @param {string} selector - CSS selector for the input or textarea\n * @param {Object} [options]\n * @param {string} [options.frameSelector] - Optional iframe CSS selector\n * @param {string} [options.frameName] - Optional iframe name\n */\nexport async function triggerInputChange(page, selector, options = {}) {\n  const { frameSelector, frameName } = options;\n\n  let frame = page.mainFrame();\n\n  if (frameSelector) {\n    const iframeHandle = await page.$(frameSelector);\n    if (!iframeHandle) throw new Error(`Iframe not found with selector: ${frameSelector}`);\n    frame = await iframeHandle.contentFrame();\n  } else if (frameName) {\n    frame = page.frames().find((f) => f.name() === frameName);\n    if (!frame) throw new Error(`Iframe not found with name: ${frameName}`);\n  }\n\n  if (!frame) throw new Error('Target frame could not be resolved.');\n\n  await frame.evaluate((selector) => {\n    const el = document.querySelector(selector);\n    if (!el) throw new Error(`Element not found: ${selector}`);\n\n    el.dispatchEvent(new Event('input', { bubbles: true }));\n    el.dispatchEvent(new Event('change', { bubbles: true }));\n  }, selector);\n}\n\n/**\n * Validates that a value was properly set in an iframe element and optionally retries with enhanced event triggering\n * @param {Object} page - Puppeteer page object\n * @param {string} iframeSelector - CSS selector for the iframe\n * @param {string} elementSelector - CSS selector for the element within the iframe\n * @param {string} expectedValue - Expected value that should be in the element\n * @param {Object} options - Options for retry behavior\n * @returns {Promise<boolean>} - True if validation passed, false otherwise\n */\nexport async function validateAndRetryIframeInput(page, iframeSelector, elementSelector, expectedValue, options = {}) {\n  const { maxRetries = 3, retryDelay = 1000 } = options;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    // Check if the value was properly set\n    const currentValue = await page.evaluate(\n      ({ iframeSelector, elementSelector }) => {\n        const iframe = document.querySelector(iframeSelector);\n        if (!iframe || !iframe.contentDocument) {\n          return null;\n        }\n\n        const element = iframe.contentDocument.querySelector(elementSelector);\n        return element ? element.value : null;\n      },\n      { iframeSelector, elementSelector }\n    );\n\n    if (currentValue === expectedValue) {\n      return true;\n    }\n\n    if (attempt < maxRetries) {\n      console.log(\n        `Validation failed for ${elementSelector}, attempt ${attempt + 1}/${maxRetries + 1}. Expected: \"${expectedValue}\", Got: \"${currentValue}\". Retrying...`\n      );\n\n      // Enhanced retry with more aggressive event triggering\n      await page.evaluate(\n        ({ iframeSelector, elementSelector, expectedValue }) => {\n          const iframe = document.querySelector(iframeSelector);\n          if (!iframe || !iframe.contentDocument) {\n            return;\n          }\n\n          const element = iframe.contentDocument.querySelector(elementSelector);\n          if (!element) {\n            return;\n          }\n\n          // Force set the value\n          element.value = expectedValue;\n\n          // Trigger all possible events that might be needed\n          const allEvents = [\n            'input',\n            'change',\n            'blur',\n            'focus',\n            'keyup',\n            'keydown',\n            'keypress',\n            'paste',\n            'cut',\n            'beforeinput',\n            'afterinput'\n          ];\n\n          allEvents.forEach((eventType) => {\n            try {\n              const event = new iframe.contentWindow.Event(eventType, {\n                bubbles: true,\n                cancelable: true\n              });\n              element.dispatchEvent(event);\n            } catch (_e) {\n              // Ignore if event type doesn't exist\n            }\n          });\n\n          // Trigger jQuery events if available\n          if (typeof iframe.contentWindow.$ !== 'undefined' && iframe.contentWindow.$(element).length) {\n            iframe.contentWindow.$(element).trigger('change').trigger('blur').trigger('input');\n          }\n\n          // For Kendo UI components (common in enterprise apps)\n          if (typeof iframe.contentWindow.kendo !== 'undefined') {\n            const kendoWidget = iframe.contentWindow.kendo.widgetInstance(element);\n            if (kendoWidget && typeof kendoWidget.trigger === 'function') {\n              kendoWidget.trigger('change');\n            }\n          }\n        },\n        { iframeSelector, elementSelector, expectedValue }\n      );\n\n      await sleep(retryDelay);\n    }\n  }\n\n  console.warn(`Failed to validate input after ${maxRetries + 1} attempts for ${elementSelector}`);\n  return false;\n}\n\n/**\n * Wait until DOM becomes stable (no changes for `quietTime` ms).\n *\n * @param {import('puppeteer').Page} page\n * @param {number} quietTime - Time window where no mutations must occur (ms).\n * @param {number} timeout - Maximum total wait time (ms).\n */\nexport async function waitForDomStable(page, quietTime = 500, timeout = 5000) {\n  if (quietTime > timeout) {\n    timeout = quietTime + 5000; // extend timeout\n  }\n\n  await page.evaluate(\n    ({ quietTime, timeout }) =>\n      new Promise((resolve, reject) => {\n        let timer = null;\n        let finished = false;\n\n        const observer = new MutationObserver(() => {\n          if (timer) clearTimeout(timer);\n          timer = setTimeout(done, quietTime);\n        });\n\n        function done() {\n          if (finished) return;\n          finished = true;\n          observer.disconnect();\n          resolve();\n        }\n\n        observer.observe(document, {\n          childList: true,\n          subtree: true,\n          attributes: true,\n          characterData: true\n        });\n\n        // Start initial quiet timer\n        timer = setTimeout(done, quietTime);\n\n        // Fail-safe timeout\n        setTimeout(() => {\n          if (finished) return;\n          finished = true;\n          observer.disconnect();\n          reject(new Error('DOM did not stabilize within timeout'));\n        }, timeout);\n      }),\n    { quietTime, timeout }\n  );\n}\n\n/**\n * Wait until DOM becomes stable indefinitely (no timeout, no quietTime).\n * Resolves only when there are no more mutations for a full cycle.\n *\n * @param {import('puppeteer').Page} page\n */\nexport async function waitForDomStableIndefinite(page) {\n  await page.evaluate(\n    () =>\n      new Promise((resolve) => {\n        let pendingMutations = false;\n\n        const observer = new MutationObserver(() => {\n          pendingMutations = true;\n        });\n\n        observer.observe(document, {\n          childList: true,\n          subtree: true,\n          attributes: true,\n          characterData: true\n        });\n\n        function checkStability() {\n          if (!pendingMutations) {\n            observer.disconnect();\n            resolve();\n          } else {\n            pendingMutations = false;\n            requestAnimationFrame(checkStability); // check again in next frame\n          }\n        }\n\n        requestAnimationFrame(checkStability);\n      })\n  );\n}\n\n/**\n * Check if any element matching the selector contains the given text and is visible\n * @param {import('puppeteer').Page} page Puppeteer Page object\n * @param {string} selector CSS selector to match elements\n * @param {string} text Text content to match\n * @returns {Promise<boolean>} true if at least one element matches\n */\nexport async function anyElementWithTextExists(page, selector, text) {\n  const elementHandles = await page.$$(selector); // get all matching elements\n\n  for (const el of elementHandles) {\n    const matchesText = await page.evaluate(\n      (element, expectedText) => {\n        // Normalize: lowercase, trim, remove special chars, collapse spaces\n        const normalize = (str) => {\n          if (!str) return '';\n          return str\n            .toLowerCase()\n            .replace(/[^\\p{L}\\p{N} ]+/gu, ' ')\n            .replace(/\\s+/g, ' ')\n            .trim();\n        };\n        const style = window.getComputedStyle(element);\n        const isVisible = style && style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';\n        const elementText = normalize(element.textContent);\n        const normalizedExpected = normalize(expectedText);\n        return isVisible && elementText.includes(normalizedExpected);\n      },\n      el,\n      text\n    );\n\n    if (matchesText) return true; // found a match\n  }\n\n  return false; // no matches found\n}\n\n/**\n * Checks if an element matching the selector exists and is visible on the page.\n *\n * @param {import('puppeteer').Page} page - Puppeteer Page instance\n * @param {string} selector - CSS selector for the element to check\n * @returns {Promise<boolean>} Resolves to true if the element exists and is visible, false otherwise\n */\nexport async function elementExists(page, selector) {\n  const elementHandle = await page.$(selector);\n  if (!elementHandle) return false;\n\n  const isVisible = await page.evaluate((el) => {\n    const style = window.getComputedStyle(el);\n    return style && style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';\n  }, elementHandle);\n\n  return isVisible;\n}\n\n/**\n * Check if an element exists with specific text content and is visible\n * @param {import('puppeteer').Page} page Puppeteer Page object\n * @param {string} selector CSS selector to match elements\n * @param {string} text Text content to match\n * @returns {Promise<boolean>} true if element exists and contains the text\n */\nexport async function elementWithTextExists(page, selector, text) {\n  const elementHandle = await page.$(selector);\n  if (!elementHandle) return false;\n\n  const matchesText = await page.evaluate(\n    (el, expectedText) => {\n      const style = window.getComputedStyle(el);\n      const isVisible = style && style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';\n      return isVisible && el.textContent?.includes(expectedText);\n    },\n    elementHandle,\n    text\n  );\n\n  return matchesText;\n}\n\n/**\n * Check if any element matching selector contains given text\n * @param {import('puppeteer').Page} page - Puppeteer page instance\n * @param {string} selector - CSS selector (e.g., \"form\")\n * @param {string} text - Substring to check inside elements\n * @returns {Promise<boolean>}\n */\nexport async function elementsContainText(page, selector, text) {\n  return await page.evaluate(\n    (sel, str) => {\n      const els = document.querySelectorAll(sel);\n      for (const el of els) {\n        if (el.innerText.includes(str)) {\n          return true;\n        }\n      }\n      return false;\n    },\n    selector,\n    text\n  );\n}\n\n/**\n * Clears all cookies for the current page's domain using CDP.\n *\n * @param {import('puppeteer').Page} page - The Puppeteer page instance.\n */\nexport async function clearCurrentPageCookies(page) {\n  const client = await page.createCDPSession();\n  const url = new URL(page.url());\n\n  // Get cookies for current domain\n  const { cookies } = await client.send('Network.getCookies', {\n    urls: [url.origin]\n  });\n\n  for (const cookie of cookies) {\n    await client.send('Network.deleteCookies', {\n      name: cookie.name,\n      domain: cookie.domain,\n      path: cookie.path // important, otherwise deletion may fail\n    });\n  }\n\n  // Verify\n  const { cookies: remaining } = await client.send('Network.getCookies', {\n    urls: [url.origin]\n  });\n\n  if (remaining.length > 0) {\n    console.warn(`⚠️ Some cookies not cleared for ${url.hostname}:`, remaining);\n  } else {\n    console.log(`✅ All cookies cleared for ${url.hostname}`);\n  }\n\n  const xclient = await page.target().createCDPSession();\n  await xclient.send('Network.clearBrowserCookies');\n}\n\n/**\n * Clicks the first element matching the selector whose text content matches the given text (case-insensitive).\n *\n * This function searches for all elements matching the provided selector, normalizes their text content by removing\n * zero-width and special characters (keeping only letters, numbers, and spaces), collapses multiple spaces, trims,\n * and converts to lowercase. It then compares the normalized text to the provided `text` (also lowercased).\n *\n * If a match is found, the element is clicked and the function returns true. If no match is found, returns false.\n * Throws if no elements are found for the selector.\n *\n * @param {import('puppeteer').Page} page - Puppeteer Page instance\n * @param {string} selector - CSS selector to match elements\n * @param {string} text - Text to match (case-insensitive, normalized)\n * @returns {Promise<boolean>} true if an element was clicked, false otherwise\n * @throws {Error} If no elements are found for the given selector\n */\nexport async function clickElementByText(page, selector, text) {\n  const elements = await page.$$(selector);\n  if (elements.length === 0) {\n    throw new Error(`No elements found for selector: ${selector}`);\n  }\n\n  for (const el of elements) {\n    const elementText = await el.evaluate((el) => {\n      let t = el.innerText || '';\n\n      // Remove zero-width characters\n      t = t.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n      // Remove special characters but keep letters, numbers, spaces\n      t = t.replace(/[^\\p{L}\\p{N} ]/gu, '');\n      // Collapse multiple spaces and trim\n      t = t.replace(/\\s+/g, ' ').trim().toLowerCase();\n\n      return t;\n    });\n\n    if (elementText === text.toLowerCase()) {\n      await el.click();\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Closes the first tab (page) in the browser context if more than one tab is open.\n *\n * @param {import('puppeteer').Page|import('puppeteer').Browser} context - The Puppeteer Page or Browser instance.\n * If a Page is provided, its browser will be used to get all pages.\n * If a Browser is provided, its pages will be used directly.\n * The first tab will only be closed if there is more than one tab open.\n * @returns {Promise<void>}\n */\nexport async function closeFirstTab(context) {\n  if (context instanceof Page) {\n    const browser = context.browser();\n    const pages = await browser.pages();\n    if (pages.length > 1) {\n      await pages[0].close();\n    }\n  } else if (context instanceof Browser) {\n    const pages = await context.pages();\n    if (pages.length > 1) {\n      await pages[0].close();\n    }\n  }\n}\n"]}