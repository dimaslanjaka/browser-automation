{"version":3,"sources":["../../src/utils/googleClient.js"],"names":[],"mappings":"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","file":"googleClient.js","sourcesContent":["import { authenticate } from '@google-cloud/local-auth';\nimport fs from 'fs-extra';\nimport path from 'upath';\nimport { OAuth2Client } from 'google-auth-library';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst SCOPES = ['https://www.googleapis.com/auth/drive.readonly'];\nconst CREDENTIALS_PATH = path.join(process.cwd(), '.cache', 'credentials.json');\nconst TOKEN_PATH = path.join(process.cwd(), '.cache', 'token.json');\n\n/**\n * Saves the OAuth2 credentials (access token, refresh token, etc.) to a local file.\n *\n * @param {import('google-auth-library').OAuth2Client} auth - The authenticated OAuth2 client.\n * @param {import('google-auth-library').Credentials} customCredentials - Custom credentials to save.\n */\nfunction saveToken(auth, customCredentials = null) {\n  try {\n    const tokenDir = path.dirname(TOKEN_PATH);\n    fs.ensureDirSync(tokenDir);\n    fs.writeFileSync(\n      TOKEN_PATH,\n      JSON.stringify(customCredentials ? customCredentials : auth.credentials, null, 2),\n      'utf-8'\n    );\n  } catch (err) {\n    console.error('Failed to save token:', err);\n  }\n}\n\n/**\n * Loads an OAuth2Client using saved credentials and refresh tokens.\n *\n * @async\n * @returns {Promise<OAuth2Client|null>} An authenticated OAuth2Client instance with refreshed access token if needed, or null if no token exists.\n */\nasync function getClient() {\n  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, 'utf-8'));\n  const { client_id, client_secret, redirect_uris } = credentials.installed;\n  const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);\n  if (!fs.existsSync(TOKEN_PATH)) {\n    console.log('Token file does not exist, will need fresh authentication');\n    return null;\n  }\n  try {\n    const token = JSON.parse(fs.readFileSync(TOKEN_PATH, 'utf-8'));\n    oAuth2Client.setCredentials(token);\n    const newToken = await oAuth2Client.getAccessToken();\n    if (newToken?.token !== token.access_token) {\n      saveToken(oAuth2Client);\n      console.log('Updated access token saved to', TOKEN_PATH);\n    }\n    return oAuth2Client;\n  } catch (err) {\n    console.error('Error loading token:', err.message);\n    return null;\n  }\n}\n\n/**\n * Obtains an authenticated OAuth2 client, reusing or refreshing tokens if available.\n *\n * @returns {Promise<import('google-auth-library').OAuth2Client>}\n */\nexport async function authorize() {\n  console.log('Authorizing with Google Sheets API...');\n  let auth = await getClient();\n  if (auth) {\n    console.log('Using existing saved token.');\n  } else {\n    console.log('No valid saved token found. Performing fresh authentication...');\n    auth = await authenticate({\n      keyfilePath: CREDENTIALS_PATH,\n      scopes: SCOPES\n    });\n    saveToken(auth);\n    console.log('New token saved to', TOKEN_PATH);\n  }\n  auth.on('tokens', (tokens) => {\n    const combined = { ...auth.credentials, ...tokens };\n    try {\n      saveToken(auth, combined);\n      console.log('Token updated and saved to', TOKEN_PATH);\n    } catch (err) {\n      console.error('Failed to write updated token:', err);\n    }\n  });\n  const { expiry_date = false } = auth.credentials;\n  const isExpired = !expiry_date || expiry_date <= Date.now();\n  console.log(`Token expiry date: ${expiry_date ? new Date(expiry_date).toISOString() : 'N/A'}`);\n  console.log(`Token is ${isExpired ? 'expired' : 'valid'}.`);\n  if (isExpired) {\n    try {\n      console.log('Refreshing expired access token...');\n      const newToken = await auth.refreshAccessToken();\n      auth.setCredentials(newToken.credentials);\n      saveToken(auth);\n      console.log('Access token refreshed and saved.');\n    } catch (err) {\n      console.error('Failed to refresh access token:', err);\n      throw err;\n    }\n  } else {\n    console.log('Cached access token is still valid.');\n  }\n  return auth;\n}\n"]}