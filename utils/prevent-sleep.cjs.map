{"version":3,"sources":["../../src/utils/prevent-sleep.js"],"names":["spawn"],"mappings":";;;;;AAsBA,eAAe,SAAA,CAAU,OAAA,GAAU,EAAC,EAAG;AACrC,EAAA,IAAI,mBAAA,GAAsB,KAAA;AAG1B,EAAA,MAAM,sBAAA,GAAyB,QAAQ,gBAAA,KAAqB,KAAA;AAG5D,EAAA,MAAM,sBAAsB,YAAY;AACtC,IAAA,IAAI,CAAC,sBAAA,IAA0B,OAAA,CAAQ,QAAA,KAAa,OAAA,EAAS;AAC3D,MAAA,OAAO,KAAA;AAAA,IACT;AAEA,IAAA,IAAI;AAEF,MAAA,MAAM,gBAAgB,MACpB,IAAI,OAAA,CAAQ,CAAC,SAAS,MAAA,KAAW;AAC/B,QAAA,MAAM,QAAQA,mBAAA,CAAM,UAAA,EAAY,CAAC,SAAA,EAAW,qBAAA,EAAuB,GAAG,CAAC,CAAA;AACvE,QAAA,KAAA,CAAM,EAAA,CAAG,OAAA,EAAS,CAAC,IAAA,KAAS;AAC1B,UAAA,IAAI,SAAS,CAAA,EAAG;AACd,YAAA,OAAA,CAAQ,IAAI,wDAAwD,CAAA;AACpE,YAAA,mBAAA,GAAsB,IAAA;AACtB,YAAA,OAAA,CAAQ,IAAI,CAAA;AAAA,UACd,CAAA,MAAO;AACL,YAAA,MAAA,CAAO,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6B,IAAI,EAAE,CAAC,CAAA;AAAA,UACvD;AAAA,QACF,CAAC,CAAA;AAAA,MACH,CAAC,CAAA;AAEH,MAAA,MAAM,aAAA,EAAc;AACpB,MAAA,OAAO,IAAA;AAAA,IACT,SAAS,GAAA,EAAK;AACZ,MAAA,OAAA,CAAQ,IAAA,CAAK,kCAAA,EAAoC,GAAA,CAAI,OAAO,CAAA;AAC5D,MAAA,OAAO,KAAA;AAAA,IACT;AAAA,EACF,CAAA;AAGA,EAAA,MAAM,8BAA8B,YAAY;AAC9C,IAAA,IAAI,CAAC,mBAAA,IAAuB,OAAA,CAAQ,QAAA,KAAa,OAAA,EAAS;AACxD,MAAA;AAAA,IACF;AAEA,IAAA,IAAI;AAEF,MAAA,MAAM,eAAA,GAAkB,MACtB,IAAI,OAAA,CAAQ,CAAC,OAAA,KAAY;AACvB,QAAA,MAAM,QAAQA,mBAAA,CAAM,UAAA,EAAY,CAAC,SAAA,EAAW,qBAAA,EAAuB,IAAI,CAAC,CAAA;AACxE,QAAA,KAAA,CAAM,EAAA,CAAG,SAAS,MAAM;AACtB,UAAA,OAAA,CAAQ,IAAI,iCAAiC,CAAA;AAC7C,UAAA,mBAAA,GAAsB,KAAA;AACtB,UAAA,OAAA,EAAQ;AAAA,QACV,CAAC,CAAA;AAAA,MACH,CAAC,CAAA;AAEH,MAAA,MAAM,eAAA,EAAgB;AAAA,IACxB,SAAS,GAAA,EAAK;AACZ,MAAA,OAAA,CAAQ,IAAA,CAAK,2CAAA,EAA6C,GAAA,CAAI,OAAO,CAAA;AAAA,IACvE;AAAA,EACF,CAAA;AAGA,EAAA,MAAM,mBAAA,GAAsB,MAAM,mBAAA,EAAoB;AAEtD,EAAA,IAAI,CAAC,mBAAA,EAAqB;AACxB,IAAA,OAAA,CAAQ,KAAK,wFAAwF,CAAA;AAAA,EACvG;AAGA,EAAA,OAAO;AAAA,IACL,MAAM,OAAA,GAAU;AAEd,MAAA,MAAM,2BAAA,EAA4B;AAClC,MAAA,OAAA,CAAQ,IAAI,qBAAqB,CAAA;AAAA,IACnC,CAAA;AAAA,IAEA,IAAI,QAAA,GAAW;AACb,MAAA,OAAO,mBAAA;AAAA,IACT,CAAA;AAAA,IAEA,IAAI,MAAA,GAAS;AACX,MAAA,IAAI,qBAAqB,OAAO,iBAAA;AAChC,MAAA,OAAO,MAAA;AAAA,IACT;AAAA,GACF;AACF;AAcA,SAAS,iCAAA,GAAoC;AAC3C,EAAA,OAAO,QAAQ,QAAA,KAAa,OAAA;AAC9B","file":"prevent-sleep.cjs","sourcesContent":["import { spawn } from 'child_process';\n\n/**\n * Prevents system sleep using Windows-specific power configuration.\n * This prevents the system from going to sleep during long-running automation tasks.\n *\n * @param {Object} [options] - Additional options for keep-awake behavior\n * @param {boolean} [options.useSystemPrevent=true] - Use OS-specific prevention methods\n * @returns {Promise<Object>} Returns an object with release method to stop keeping awake\n *\n * @example\n * // Keep system awake with Windows prevention\n * const wakeController = await keepAwake();\n * // Later, release and restore settings\n * await wakeController.release();\n *\n * @example\n * // Keep awake with explicit options\n * const wakeController = await keepAwake({ useSystemPrevent: true });\n *\n * @since 1.0.0\n */\nasync function keepAwake(options = {}) {\n  let systemPreventActive = false;\n\n  // Default to using system prevent unless explicitly disabled\n  const shouldUseSystemPrevent = options.useSystemPrevent !== false;\n\n  // Windows-specific sleep prevention\n  const preventWindowsSleep = async () => {\n    if (!shouldUseSystemPrevent || process.platform !== 'win32') {\n      return false;\n    }\n\n    try {\n      // Set sleep timeout to 0 (never) for current session\n      const setNeverSleep = () =>\n        new Promise((resolve, reject) => {\n          const child = spawn('powercfg', ['-change', '-standby-timeout-ac', '0']);\n          child.on('close', (code) => {\n            if (code === 0) {\n              console.log('Windows sleep prevention activated for current session');\n              systemPreventActive = true;\n              resolve(true);\n            } else {\n              reject(new Error(`powercfg failed with code ${code}`));\n            }\n          });\n        });\n\n      await setNeverSleep();\n      return true;\n    } catch (err) {\n      console.warn('Windows sleep prevention failed:', err.message);\n      return false;\n    }\n  };\n\n  // Restore Windows power settings\n  const restoreWindowsPowerSettings = async () => {\n    if (!systemPreventActive || process.platform !== 'win32') {\n      return;\n    }\n\n    try {\n      // Reset to system default (usually 30 minutes for AC power)\n      const restoreDefaults = () =>\n        new Promise((resolve) => {\n          const child = spawn('powercfg', ['-change', '-standby-timeout-ac', '30']);\n          child.on('close', () => {\n            console.log('Windows power settings restored');\n            systemPreventActive = false;\n            resolve();\n          });\n        });\n\n      await restoreDefaults();\n    } catch (err) {\n      console.warn('Failed to restore Windows power settings:', err.message);\n    }\n  };\n\n  // Initialize Windows sleep prevention\n  const preventionActivated = await preventWindowsSleep();\n\n  if (!preventionActivated) {\n    console.warn('Sleep prevention not activated - either not on Windows or useSystemPrevent is disabled');\n  }\n\n  // Return controller object\n  return {\n    async release() {\n      // Restore Windows power settings if they were changed\n      await restoreWindowsPowerSettings();\n      console.log('Keep-awake released');\n    },\n\n    get isActive() {\n      return systemPreventActive;\n    },\n\n    get method() {\n      if (systemPreventActive) return 'windowsPowerCfg';\n      return 'none';\n    }\n  };\n}\n\n/**\n * Checks if Windows-specific sleep prevention is available.\n * @returns {boolean} True if running on Windows with powercfg available, false otherwise\n *\n * @example\n * if (isWindowsSleepPreventionSupported()) {\n *   console.log('Windows sleep prevention is available');\n * }\n *\n * @since 1.0.0\n */\n\nfunction isWindowsSleepPreventionSupported() {\n  return process.platform === 'win32';\n}\n\nexport { keepAwake, keepAwake as preventSleep, isWindowsSleepPreventionSupported };\n"]}