{"version":3,"sources":["../../src/utils/googleSheet.js"],"names":["path","fs","response","axios","xlsx","google"],"mappings":";;;;;;;;;;;;;;;;AAiBA,eAAe,cAAA,CAAe,aAAA,EAAe,aAAA,GAAgB,KAAA,EAAO;AAClE,EAAA,MAAM,YAAYA,qBAAA,CAAK,IAAA,CAAK,QAAQ,GAAA,EAAI,EAAG,UAAU,QAAQ,CAAA;AAC7D,EAAA,MAAM,eAAeA,qBAAA,CAAK,IAAA,CAAK,SAAA,EAAW,CAAA,gBAAA,EAAmB,aAAa,CAAA,KAAA,CAAO,CAAA;AACjF,EAAA,MAAM,mBAAmBA,qBAAA,CAAK,IAAA,CAAK,SAAA,EAAW,CAAA,gBAAA,EAAmB,aAAa,CAAA,KAAA,CAAO,CAAA;AACrF,EAAA,MAAM,SAAA,GAAY,CAAA,uCAAA,EAA0C,aAAa,CAAA,uBAAA,EAA0B,aAAa,CAAA,CAAA;AAChH,EAAAC,mBAAA,CAAG,cAAc,SAAS,CAAA;AAU1B,EAAA,IAAI,QAAA,GAAW;AAAA,IACb,UAAU;AAAC,GACb;AAEA,EAAA,IAAIA,mBAAA,CAAG,UAAA,CAAW,gBAAgB,CAAA,EAAG;AACnC,IAAA,IAAI;AACF,MAAA,QAAA,GAAW,KAAK,KAAA,CAAMA,mBAAA,CAAG,YAAA,CAAa,gBAAA,EAAkB,OAAO,CAAC,CAAA;AAChE,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,8BAAA,EAAiC,gBAAgB,CAAA,CAAE,CAAA;AAAA,IACjE,SAAS,GAAA,EAAK;AACZ,MAAA,OAAA,CAAQ,KAAA,CAAM,oCAAA,EAAsC,GAAA,CAAI,OAAA,IAAW,GAAG,CAAA;AAAA,IACxE;AAAA,EACF;AAEA,EAAA,IAAI,cAAA,GAAiB,IAAA;AAErB,EAAA,IAAI,CAAC,aAAA,EAAe;AAClB,IAAA,IAAI;AACF,MAAA,MAAMC,SAAAA,GAAW,MAAMC,sBAAA,CAAM,IAAA,CAAK,SAAS,CAAA;AAE3C,MAAA,MAAM,cAAA,GAAiB;AAAA,QACrB,IAAA,EAAMD,SAAAA,CAAS,OAAA,CAAQ,gBAAgB,CAAA,IAAK;AAAA,OAC9C;AACA,MAAA,OAAA,CAAQ,IAAI,CAAA,aAAA,EAAgB,cAAA,CAAe,IAAI,CAAA,cAAA,EAAiB,QAAA,CAAS,IAAI,CAAA,CAAE,CAAA;AAC/E,MAAA,IAAID,oBAAG,UAAA,CAAW,YAAY,KAAK,QAAA,CAAS,IAAA,IAAQ,eAAe,IAAA,EAAM;AACvE,QAAA,cAAA,GAAiB,KAAA;AAAA,MACnB,CAAA,MAAO;AACL,QAAA,QAAA,GAAW;AAAA,UACT,GAAG,QAAA;AAAA,UACH,GAAG;AAAA,SACL;AAAA,MACF;AAAA,IACF,SAAS,GAAA,EAAK;AACZ,MAAA,OAAA,CAAQ,KAAA,CAAM,iDAAA,EAAmD,GAAA,CAAI,OAAA,IAAW,GAAG,CAAA;AAAA,IACrF;AAAA,EACF;AAEA,EAAA,IAAI,CAAC,cAAA,EAAgB;AACnB,IAAA,OAAA,CAAQ,IAAI,8CAA8C,CAAA;AAC1D,IAAA,OAAO,EAAE,YAAA,EAAc,QAAA,EAAU,QAAA,CAAS,QAAA,EAAS;AAAA,EACrD;AAEA,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,mCAAA,EAAsC,SAAS,CAAA,CAAE,CAAA;AAC7D,EAAA,MAAM,QAAA,GAAW,MAAME,sBAAA,CAAM,GAAA,CAAI,WAAW,EAAE,YAAA,EAAc,UAAU,CAAA;AACtE,EAAA,MAAM,UAAA,GAAaF,mBAAA,CAAG,iBAAA,CAAkB,YAAY,CAAA;AAEpD,EAAA,IAAI,OAAO,QAAA,CAAS,IAAA,CAAK,IAAA,KAAS,UAAA,EAAY;AAC5C,IAAA,QAAA,CAAS,IAAA,CAAK,KAAK,UAAU,CAAA;AAC7B,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAA,KAAW;AACrC,MAAA,UAAA,CAAW,EAAA,CAAG,QAAA,EAAU,MAAM,OAAA,EAAS,CAAA;AACvC,MAAA,UAAA,CAAW,EAAA,CAAG,SAAS,MAAM,CAAA;AAAA,IAC/B,CAAC,CAAA;AAAA,EACH,CAAA,MAAA,IAAW,MAAA,CAAO,QAAA,CAAS,QAAA,CAAS,IAAI,CAAA,EAAG;AACzC,IAAAA,mBAAA,CAAG,aAAA,CAAc,YAAA,EAAc,QAAA,CAAS,IAAI,CAAA;AAAA,EAC9C,CAAA,MAAO;AAEL,IAAAA,mBAAA,CAAG,aAAA,CAAc,YAAA,EAAc,QAAA,CAAS,IAAA,EAAM,QAAQ,CAAA;AAAA,EACxD;AAEA,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,+CAAA,EAAkD,YAAY,CAAA,CAAE,CAAA;AAG5E,EAAA,MAAM,QAAA,GAAWG,qBAAA,CAAK,QAAA,CAAS,YAAY,CAAA;AAC3C,EAAA,MAAM,WAAW,EAAC;AAClB,EAAA,QAAA,CAAS,UAAA,CAAW,OAAA,CAAQ,CAAC,SAAA,KAAc;AACzC,IAAA,MAAM,MAAMA,qBAAA,CAAK,KAAA,CAAM,aAAa,QAAA,CAAS,MAAA,CAAO,SAAS,CAAC,CAAA;AAC9D,IAAA,MAAM,WAAA,GAAcJ,qBAAA,CAAK,IAAA,CAAK,SAAA,EAAW,CAAA,MAAA,EAAS,UAAU,OAAA,CAAQ,WAAA,EAAa,GAAG,CAAC,CAAA,IAAA,CAAM,CAAA;AAC3F,IAAA,QAAA,CAAS,QAAA,CAAS,KAAK,WAAW,CAAA;AAClC,IAAAC,mBAAA,CAAG,aAAA,CAAc,WAAA,EAAa,GAAA,EAAK,OAAO,CAAA;AAC1C,IAAA,QAAA,CAAS,KAAK,WAAW,CAAA;AACzB,IAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,wBAAA,EAA2B,SAAS,CAAA,YAAA,EAAe,WAAW,CAAA,CAAE,CAAA;AAAA,EAC9E,CAAC,CAAA;AAGD,EAAAA,mBAAA,CAAG,aAAA,CAAc,kBAAkB,IAAA,CAAK,SAAA,CAAU,UAAU,IAAA,EAAM,CAAC,GAAG,OAAO,CAAA;AAC7E,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,kCAAA,EAAqC,gBAAgB,CAAA,CAAE,CAAA;AAEnE,EAAA,OAAO,EAAE,YAAA,EAAc,QAAA,EAAU,gBAAA,EAAiB;AACpD;AAWA,SAAS,eAAe,SAAA,EAAW;AACjC,EAAA,MAAM,MAAA,GAAS;AAAA,IACb,GAAA,EAAK,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACb,KAAA,EAAO,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACf,IAAA,EAAM,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACd,MAAA,EAAQ,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IAChB,IAAA,EAAM,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACd,OAAA,EAAS,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACjB,KAAA,EAAO,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACf,KAAA,EAAO,CAAC,CAAA,EAAG,CAAA,EAAG,CAAC,CAAA;AAAA,IACf,IAAA,EAAM,CAAC,GAAA,EAAK,GAAA,EAAK,GAAG,CAAA;AAAA,IACpB,MAAA,EAAQ,CAAC,CAAA,EAAG,IAAA,EAAM,CAAC,CAAA;AAAA,IACnB,IAAA,EAAM,CAAC,CAAA,EAAG,IAAA,EAAM,GAAG,CAAA;AAAA,IACnB,MAAA,EAAQ,CAAC,GAAA,EAAK,CAAA,EAAG,GAAG,CAAA;AAAA,IACpB,UAAA,EAAY,CAAC,IAAA,EAAM,IAAA,EAAM,IAAI,CAAA;AAAA,IAC7B,SAAA,EAAW,CAAC,IAAA,EAAM,IAAA,EAAM,GAAG;AAAA,GAC7B;AAEA,EAAA,MAAM,GAAA,GAAM,MAAA,CAAO,SAAA,CAAU,WAAA,EAAa,CAAA;AAC1C,EAAA,IAAI,CAAC,GAAA,EAAK,MAAM,IAAI,KAAA,CAAM,CAAA,wBAAA,EAA2B,SAAS,CAAA,CAAE,CAAA;AAEhE,EAAA,OAAO,EAAE,GAAA,EAAK,GAAA,CAAI,CAAC,CAAA,EAAG,KAAA,EAAO,GAAA,CAAI,CAAC,CAAA,EAAG,IAAA,EAAM,GAAA,CAAI,CAAC,CAAA,EAAE;AACpD;AAWA,eAAe,cAAA,CAAe,IAAA,EAAM,aAAA,EAAe,OAAA,EAAS,UAAU,SAAA,EAAW;AAC/E,EAAA,MAAM,KAAA,GAAQ,eAAe,SAAS,CAAA;AACtC,EAAA,MAAM,SAASI,iBAAA,CAAO,MAAA,CAAO,EAAE,OAAA,EAAS,IAAA,EAAM,MAAM,CAAA;AACpD,EAAA,MAAM,MAAA,CAAO,aAAa,WAAA,CAAY;AAAA,IACpC,aAAA;AAAA,IACA,WAAA,EAAa;AAAA,MACX,QAAA,EAAU;AAAA,QACR;AAAA,UACE,UAAA,EAAY;AAAA,YACV,KAAA,EAAO;AAAA,cACL,OAAA;AAAA,cACA,aAAA,EAAe,QAAA;AAAA;AAAA,cACf,aAAa,QAAA,GAAW;AAAA;AAAA,aAC1B;AAAA,YACA,IAAA,EAAM;AAAA,cACJ,iBAAA,EAAmB;AAAA,gBACjB,eAAA,EAAiB;AAAA;AACnB,aACF;AAAA,YACA,MAAA,EAAQ;AAAA;AACV;AACF;AACF;AACF,GACD,CAAA;AAED,EAAA,OAAA,CAAQ,IAAI,CAAA,IAAA,EAAO,QAAA,GAAW,CAAC,CAAA,kBAAA,EAAqB,SAAS,CAAA,CAAA,CAAG,CAAA;AAClE","file":"googleSheet.cjs","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport axios from 'axios';\nimport xlsx from 'xlsx';\nimport { google } from 'googleapis';\n\n/**\n * Download a Google Spreadsheet as XLSX and cache it locally, along with metadata and CSV exports for each sheet.\n *\n * - Checks remote file size and metadata to avoid unnecessary downloads (caching), unless forceDownload is true.\n * - Saves metadata (including file size and CSV file paths) to a JSON file in the cache directory.\n * - Converts each sheet in the XLSX to CSV and saves them in the cache directory.\n *\n * @param {string} spreadsheetId The Google Spreadsheet ID to download.\n * @param {boolean} [forceDownload=false] If true, always download the spreadsheet, ignoring cache.\n * @returns {Promise<{ xlsxFilePath: string, csvFiles: string[], xlsxMetadataPath: string }>} An object containing the XLSX file path, array of CSV file paths, and metadata path.\n */\nasync function downloadSheets(spreadsheetId, forceDownload = false) {\n  const CACHE_DIR = path.join(process.cwd(), '.cache', 'sheets');\n  const xlsxFilePath = path.join(CACHE_DIR, `spreadsheet-pub-${spreadsheetId}.xlsx`);\n  const xlsxMetadataPath = path.join(CACHE_DIR, `spreadsheet-pub-${spreadsheetId}.json`);\n  const publicUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx&id=${spreadsheetId}`;\n  fs.ensureDirSync(CACHE_DIR);\n\n  /**\n   * @typedef {Object} Metadata\n   * @property {number} [size]\n   * @property {string[]} csvFiles\n   * @property {Object.<string, any>} [key: string]\n   */\n\n  /** @type {Metadata} */\n  let metadata = {\n    csvFiles: []\n  };\n\n  if (fs.existsSync(xlsxMetadataPath)) {\n    try {\n      metadata = JSON.parse(fs.readFileSync(xlsxMetadataPath, 'utf-8'));\n      console.log(`Loaded existing metadata from ${xlsxMetadataPath}`);\n    } catch (err) {\n      console.error('Failed to parse existing metadata:', err.message || err);\n    }\n  }\n\n  let shouldDownload = true;\n\n  if (!forceDownload) {\n    try {\n      const response = await axios.head(publicUrl);\n      /** @type {Partial<Metadata>} */\n      const remoteMetadata = {\n        size: response.headers['content-length'] || 0\n      };\n      console.log(`Remote size: ${remoteMetadata.size}, local size: ${metadata.size}`);\n      if (fs.existsSync(xlsxFilePath) && metadata.size == remoteMetadata.size) {\n        shouldDownload = false;\n      } else {\n        metadata = {\n          ...metadata,\n          ...remoteMetadata\n        };\n      }\n    } catch (err) {\n      console.error('Failed to fetch metadata for public export URL:', err.message || err);\n    }\n  }\n\n  if (!shouldDownload) {\n    console.log('Local file is up-to-date, skipping download.');\n    return { xlsxFilePath, csvFiles: metadata.csvFiles };\n  }\n\n  console.log(`Downloading via public export URL: ${publicUrl}`);\n  const response = await axios.get(publicUrl, { responseType: 'stream' });\n  const xlsxWriter = fs.createWriteStream(xlsxFilePath);\n\n  if (typeof response.data.pipe === 'function') {\n    response.data.pipe(xlsxWriter);\n    await new Promise((resolve, reject) => {\n      xlsxWriter.on('finish', () => resolve());\n      xlsxWriter.on('error', reject);\n    });\n  } else if (Buffer.isBuffer(response.data)) {\n    fs.writeFileSync(xlsxFilePath, response.data);\n  } else {\n    // Try to write as binary if not a stream or buffer\n    fs.writeFileSync(xlsxFilePath, response.data, 'binary');\n  }\n\n  console.log(`Saved spreadsheet via public export as XLSX to ${xlsxFilePath}`);\n\n  // Parse XLSX to CSV\n  const workbook = xlsx.readFile(xlsxFilePath);\n  const csvFiles = [];\n  workbook.SheetNames.forEach((sheetName) => {\n    const csv = xlsx.utils.sheet_to_csv(workbook.Sheets[sheetName]);\n    const csvFilePath = path.join(CACHE_DIR, `sheet-${sheetName.replace(/[^\\w\\d-]/g, '_')}.csv`);\n    metadata.csvFiles.push(csvFilePath);\n    fs.writeFileSync(csvFilePath, csv, 'utf-8');\n    csvFiles.push(csvFilePath);\n    console.log(`Parsed and saved sheet '${sheetName}' as CSV to ${csvFilePath}`);\n  });\n\n  // Save updated metadata\n  fs.writeFileSync(xlsxMetadataPath, JSON.stringify(metadata, null, 2), 'utf-8');\n  console.log(`New spreadsheet metadata saved to ${xlsxMetadataPath}`);\n\n  return { xlsxFilePath, csvFiles, xlsxMetadataPath };\n}\n\n/**\n * Converts a color name to its corresponding RGB object with values in the range [0, 1].\n *\n * Supported color names: \"red\", \"green\", \"blue\", \"yellow\", \"cyan\", \"magenta\", \"black\", \"white\", \"gray\", \"orange\", \"pink\", \"purple\", \"lightgreen\", \"lightblue\".\n *\n * @param {string} colorName - The name of the color to convert.\n * @returns {{ red: number, green: number, blue: number }} The RGB representation of the color.\n * @throws {Error} If the color name is not supported.\n */\nfunction colorNameToRgb(colorName) {\n  const colors = {\n    red: [1, 0, 0],\n    green: [0, 1, 0],\n    blue: [0, 0, 1],\n    yellow: [1, 1, 0],\n    cyan: [0, 1, 1],\n    magenta: [1, 0, 1],\n    black: [0, 0, 0],\n    white: [1, 1, 1],\n    gray: [0.5, 0.5, 0.5],\n    orange: [1, 0.65, 0],\n    pink: [1, 0.75, 0.8],\n    purple: [0.5, 0, 0.5],\n    lightgreen: [0.56, 0.93, 0.56],\n    lightblue: [0.68, 0.85, 0.9]\n  };\n\n  const rgb = colors[colorName.toLowerCase()];\n  if (!rgb) throw new Error(`Unsupported color name: ${colorName}`);\n\n  return { red: rgb[0], green: rgb[1], blue: rgb[2] };\n}\n\n/**\n * Changes the background color of a specific row in a Google Sheet.\n *\n * @param {import('google-auth-library').OAuth2Client} auth - The authenticated OAuth2 client.\n * @param {string} spreadsheetId - The ID of the Google Spreadsheet.\n * @param {string} sheetId - The ID of the sheet to modify.\n * @param {number} rowIndex - The index of the row to change (0-based).\n * @param {string} colorName - The color name (e.g., \"green\", \"red\", \"yellow\", \"orange\", \"magenta\").\n */\nasync function changeRowColor(auth, spreadsheetId, sheetId, rowIndex, colorName) {\n  const color = colorNameToRgb(colorName);\n  const sheets = google.sheets({ version: 'v4', auth });\n  await sheets.spreadsheets.batchUpdate({\n    spreadsheetId,\n    requestBody: {\n      requests: [\n        {\n          repeatCell: {\n            range: {\n              sheetId: sheetId,\n              startRowIndex: rowIndex, // inclusive\n              endRowIndex: rowIndex + 1 // exclusive\n            },\n            cell: {\n              userEnteredFormat: {\n                backgroundColor: color\n              }\n            },\n            fields: 'userEnteredFormat.backgroundColor'\n          }\n        }\n      ]\n    }\n  });\n\n  console.log(`Row ${rowIndex + 1} color changed to ${colorName}!`);\n}\n\nexport { downloadSheets, changeRowColor };\n"]}