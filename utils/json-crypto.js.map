{"version":3,"sources":["../../src/utils/json-crypto.js"],"names":[],"mappings":"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","file":"json-crypto.js","sourcesContent":["// json-crypto.js\n// Utility for encrypting and decrypting JSON data using AES\n// Works in both Node.js and browser environments\n\n// For browser: use crypto-js\n// For Node.js: use built-in crypto\n\n// Use CryptoJS for both Node.js and browser\nimport CryptoJS from 'crypto-js';\n\n// JSON stringify/parse with circular reference support\n// Circular reference-safe JSON stringify/parse (flatted-like)\nfunction jsonStringifyWithCircularRefsBrowser(obj) {\n  const objects = new Map();\n  const paths = new Map();\n  let nextId = 1;\n\n  function replacer(key, value) {\n    if (typeof value === 'object' && value !== null) {\n      if (objects.has(value)) {\n        return { $ref: paths.get(value) };\n      }\n      const path = paths.size === 0 ? '$' : paths.get(this) + (Array.isArray(this) ? `[${key}]` : `.${key}`);\n      objects.set(value, nextId++);\n      paths.set(value, path);\n    }\n    return value;\n  }\n  return JSON.stringify(obj, replacer);\n}\n\nfunction jsonParseWithCircularRefsBrowser(str) {\n  const refs = [];\n  const obj = JSON.parse(str, function (key, value) {\n    if (value && typeof value === 'object' && value.$ref) {\n      refs.push({ holder: this, key, ref: value.$ref });\n      return undefined;\n    }\n    return value;\n  });\n  refs.forEach(({ holder, key, ref }) => {\n    let path = ref.split('.').reduce((acc, part) => {\n      if (part === '$') return acc;\n      if (part.endsWith(']')) {\n        // Array index\n        const [arrKey, idx] = part.match(/(\\w+)\\[(\\d+)\\]/).slice(1);\n        return acc[arrKey][parseInt(idx, 10)];\n      }\n      return acc[part];\n    }, obj);\n    holder[key] = path;\n  });\n  return obj;\n}\n\nexport function encryptJson(data, secret) {\n  const jsonString = jsonStringifyWithCircularRefsBrowser(data);\n  // Use CryptoJS AES for both Node.js and browser\n  return CryptoJS.AES.encrypt(jsonString, secret).toString();\n}\n\n/**\n * Decrypt an encrypted JSON string\n * @param {string} encrypted - The encrypted string\n * @param {string} secret - The encryption key\n * @returns {Object} Decrypted JSON object\n */\n\nexport function decryptJson(encrypted, secret) {\n  // Use CryptoJS AES for both Node.js and browser\n  const bytes = CryptoJS.AES.decrypt(encrypted, secret);\n  const jsonString = bytes.toString(CryptoJS.enc.Utf8);\n  return jsonParseWithCircularRefsBrowser(jsonString);\n}\n\n// NodeJS example usage:\n// const secret = process.env.JSON_SECRET; // from .env\n// const encrypted = encryptJson({ foo: 'bar' }, secret);\n// const decrypted = decryptJson(encrypted, secret);\n\n// Vite example usage:\n// const secret = import.meta.env.VITE_JSON_SECRET;\n// const encrypted = encryptJson({ foo: 'bar' }, secret);\n// const decrypted = decryptJson(encrypted, secret);\n"]}