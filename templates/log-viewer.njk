<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <title>{{ pageTitle }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="View and analyze log data, including parsed NIK, form values, and status counts. Optimized for browser automation and data review." />
    <meta
      name="keywords"
      content="log viewer, browser automation, NIK parser, data analysis, form values, success count, fail count, logs" />
    <meta name="author" content="Dimas Lanjaka" />
    <meta property="og:title" content="{{ pageTitle }}" />
    <meta
      property="og:description"
      content="View and analyze log data, including parsed NIK, form values, and status counts. Optimized for browser automation and data review." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="./thumbnail.png" />
    <meta property="og:url" content="{{ canonicalUrl }}" />
    <link rel="canonical" href="{{ canonicalUrl }}" />
    <link rel="icon" type="image/png" href="./thumbnail.png" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link
      rel="stylesheet"
      href="https://rawcdn.githack.com/dimaslanjaka/Web-Manajemen/0f634f242ff259087c9fe176e8f28ccaebb5c015/css/all.min.css" />
    <style>
      body {
        margin: 2em;
      }
      .log-header {
        font-weight: bold;
        font-size: 1.1em;
      }
      .log-header {
        font-weight: bold;
        font-size: 1.1em;
      }
      .log-timestamp {
        font-size: 0.9em;
      }
      .section-title {
        font-weight: bold;
        margin-top: 1em;
      }
      .accordion-button {
        font-size: 0.85em;
        padding-top: 0.15em;
        padding-bottom: 0.15em;
        padding-left: 0.7em;
        padding-right: 0.7em;
        min-height: 2em;
      }
      .accordion-header {
        font-size: 0.9em;
      }
      .container {
        border-radius: 1em;
        box-shadow: 0 2px 16px rgba(0, 0, 0, 0.12);
        padding: 2em 2vw 1em 2vw;
        max-width: 100vw;
        margin: 0 auto;
      }
      h1 {
        font-family: 'Inter', Arial, sans-serif;
        font-weight: 700;
        letter-spacing: 0.02em;
        text-align: center;
        margin-bottom: 1.5em;
      }
      .badge {
        font-size: 1.1em;
        padding: 0.6em 1.2em;
        border-radius: 0.7em;
        box-shadow: 0 1px 6px rgba(0, 0, 0, 0.08);
      }
      .accordion-item {
        border-radius: 0.7em;
        margin-bottom: 0.25em;
        box-shadow: 0 1px 8px rgba(0, 0, 0, 0.1);
        border: none;
      }
      .accordion-body {
        border-radius: 0.7em;
      }
      .table {
        border-radius: 0.7em;
        overflow: hidden;
      }
      /* Generalized success color for any .text-success in dark theme */
      [data-bs-theme="dark"] .text-success {
        color: #4efc6e !important;
      }
    </style>
  </head>
  <body>
    <div data-bs-theme="dark">
      <div class="container">
        <div class="mb-2 d-flex align-items-center gap-2" id="theme-toggle">
          <span class="me-2"><i class="fa-solid fa-palette"></i></span>
          <div class="form-check form-switch d-flex align-items-center">
            <input class="form-check-input" type="checkbox" id="themeSwitch" aria-label="Toggle theme" />
            <label class="form-check-label ms-2" for="themeSwitch">
              <span id="themeSwitchIcon"><i class="fa-solid fa-moon"></i></span>
              <span id="themeSwitchText" class="ms-1">Dark</span>
            </label>
          </div>
        </div>
        <h1 class="my-4">{{ pageTitle }}</h1>
        <div class="mb-4">
          <span class="badge bg-success" style="font-size:0.95em; padding:0.35em 0.8em;">Success: {{ successCount }}</span>
          <span class="badge bg-danger ms-2" style="font-size:0.95em; padding:0.35em 0.8em;">Not Success: {{ failCount }}</span>
        </div>
        <div class="input-group mb-3" id="log-search-group">
          <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
          <input type="text" class="form-control" id="logSearchInput" placeholder="Search logs..." autocomplete="off" />
        </div>
        <div class="accordion" id="logAccordion" style="max-height: 70vh; overflow-y: auto"></div>
        <nav aria-label="Log pagination" class="my-3">
          <ul class="pagination justify-content-center" id="logPagination"></ul>
        </nav>
        <div id="log-loading" class="text-center my-3" style="display: none">
          <span class="spinner-border text-primary"></span> Loading more logs...
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script type="application/json" id="logs-json">
      {{ logsJson | safe }}
    </script>
    <script>
      window._logViewerData = window._logViewerData || {};
      window._logViewerData.logs = JSON.parse(document.getElementById('logs-json').textContent);
      const accordion = document.getElementById('logAccordion');
      const loading = document.getElementById('log-loading');
      let currentPage = 1;
      const batch = 20;
      // Helper function to capitalize log names
      function capitalizeName(name) {
        if (!name) return '';
        return name
          .split(' ')
          .map(
            (w) =>
              w.length > 0
                ? w.charAt(0).toUpperCase() + w.slice(1).toLowerCase()
                : ''
          )
          .join(' ');
      }

      function renderLogItem(log, idx) {
        const isSuccessMsg = typeof log.message === 'string' && log.message.toLowerCase().includes('success');
        let html = `<div class="accordion-item">
          <div class="accordion-header" id="heading${idx}">
            <button class="accordion-button collapsed ${log.data && log.data.status === 'success' ? 'bg-success text-white' : ''}" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${idx}" aria-expanded="false" aria-controls="collapse${idx}">
              ${log.data?.nik || ''} - ${capitalizeName(log.data?.nama || '')}
            </button>
          </div>
          <div id="collapse${idx}" class="accordion-collapse collapse" aria-labelledby="heading${idx}" data-bs-parent="#logAccordion">
            <div class="accordion-body">
              <div class="log-timestamp mb-2">Timestamp: ${log.timestamp || ''}</div>
              <div class="log-message mb-2${isSuccessMsg ? ' text-success' : ''}">${log.message || ''}</div>
              <span class="section-title">Basic Data</span>
              <table class="table table-bordered table-striped mb-3">
                <tr><th>Tanggal</th><td>${log.data?.tanggal || ''}</td></tr>
                <tr><th>Nama</th><td>${capitalizeName(log.data?.nama || '')}</td></tr>
                <tr><th>Tgl Lahir</th><td>${log.data?.tgl_lahir || ''}</td></tr>
                <tr><th>Alamat</th><td>${log.data?.alamat || ''}</td></tr>
                <tr><th>BB</th><td>${log.data?.bb || ''}</td></tr>
                <tr><th>TB</th><td>${log.data?.tb || ''}</td></tr>
                <tr><th>Petugas</th><td>${log.data?.petugas || ''}</td></tr>
                <tr><th>Status</th><td>${log.data?.status || ''}</td></tr>
                <tr><th>Gender</th><td>${log.data?.gender || ''}</td></tr>
                <tr><th>Age</th><td>${log.data?.age || ''}</td></tr>
                <tr><th>Pekerjaan</th><td>${log.data?.pekerjaan || ''}</td></tr>
              </table>
              <span class="section-title">Parsed NIK</span>
              ${
                log.data?.parsed_nik
                  ? `
              <table class="table table-bordered table-hover mb-3 parsed-nik-table">
                <tr><th>Status</th><td>${log.data.parsed_nik.status || ''}</td></tr>
                <tr><th>Message</th><td>${log.data.parsed_nik.message || ''}</td></tr>
                ${
                  log.data.parsed_nik.data
                    ? `
                  <tr><th>NIK</th><td>${log.data.parsed_nik.data.nik || ''}</td></tr>
                  <tr><th>Kelamin</th><td>${log.data.parsed_nik.data.kelamin || ''}</td></tr>
                  <tr><th>Lahir</th><td>${log.data.parsed_nik.data.lahir || ''}</td></tr>
                  <tr><th>Provinsi</th><td>${log.data.parsed_nik.data.provinsi || ''}</td></tr>
                  <tr><th>Kota/Kab</th><td>${log.data.parsed_nik.data.kotakab || ''}</td></tr>
                  <tr><th>Kecamatan</th><td>${log.data.parsed_nik.data.namaKec || ''}</td></tr>
                  <tr><th>Uniqcode</th><td>${log.data.parsed_nik.data.uniqcode || ''}</td></tr>
                  <tr><th>Original Lahir</th><td>${log.data.parsed_nik.data.originalLahir || ''}</td></tr>
                  <tr><th>Kelurahan</th>
                    <td>
                      ${log.data.parsed_nik.data.kelurahan ? `<ul class='list-group list-group-flush'>${log.data.parsed_nik.data.kelurahan.map((kel) => `<li class='list-group-item'>${kel.name} <span class='text-muted'>(ID: ${kel.id}, District: ${kel.district_id})</span></li>`).join('')}</ul>` : ''}
                    </td>
                  </tr>
                `
                    : ''
                }
              </table>
              `
                  : ''
              }
              <span class="section-title">Form Values</span>
              ${
                log.data?.formValues
                  ? `
              <table class="table table-bordered table-sm mb-3">
                <thead>
                  <tr>
                    <th>Label</th>
                    <th>Value</th>
                  </tr>
                </thead>
                <tbody>
                ${log.data.formValues.map((field) => `<tr><td>${field.label || ''}</td><td>${field.value || '<empty>'}</td></tr>`).join('')}
                </tbody>
              </table>
              `
                  : ''
              }
            </div>
          </div>
        </div>`;
        return html;
      }
      function getFilteredLogs() {
        const query = (document.getElementById('logSearchInput')?.value || '').trim().toLowerCase();
        if (!query) return window._logViewerData.logs;
        return window._logViewerData.logs.filter(log => {
          // Search in NIK, nama, message, and basic data fields
          const fields = [
            log.data?.nik,
            log.data?.nama,
            log.message,
            log.data?.tanggal,
            log.data?.alamat,
            log.data?.petugas,
            log.data?.status,
            log.data?.gender,
            log.data?.age,
            log.data?.pekerjaan
          ];
          return fields.some(f => typeof f === 'string' && f.toLowerCase().includes(query));
        });
      }
      function renderPage(page) {
        const logs = getFilteredLogs();
        const start = (page - 1) * batch;
        const end = Math.min(start + batch, logs.length);
        accordion.innerHTML = '';
        for (let i = start; i < end; i++) {
          accordion.insertAdjacentHTML('beforeend', renderLogItem(logs[i], i + 1));
        }
        renderPagination(page, Math.ceil(logs.length / batch));
      }
      function renderPagination(page, totalPages) {
        const pagination = document.getElementById('logPagination');
        let html = '';
        html += `<li class="page-item${page === 1 ? ' disabled' : ''}"><a class="page-link" href="#" data-page="prev">Previous</a></li>`;
        for (let i = 1; i <= totalPages; i++) {
          if (i === page || i === 1 || i === totalPages || (i >= page - 2 && i <= page + 2)) {
            html += `<li class="page-item${i === page ? ' active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
          } else if (i === page - 3 || i === page + 3) {
            html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
          }
        }
        html += `<li class="page-item${page === totalPages ? ' disabled' : ''}"><a class="page-link" href="#" data-page="next">Next</a></li>`;
        pagination.innerHTML = html;
      }
      document.getElementById('logPagination').addEventListener('click', function (e) {
        if (e.target.tagName === 'A') {
          e.preventDefault();
          const logs = getFilteredLogs();
          const totalPages = Math.ceil(logs.length / batch);
          let page = currentPage;
          if (e.target.dataset.page === 'prev') {
            if (page > 1) page--;
          } else if (e.target.dataset.page === 'next') {
            if (page < totalPages) page++;
          } else {
            page = parseInt(e.target.dataset.page, 10);
          }
          if (page !== currentPage) {
            currentPage = page;
            renderPage(currentPage);
          }
        }
      });
      // Search input event
      document.getElementById('logSearchInput').addEventListener('input', function () {
        currentPage = 1;
        renderPage(currentPage);
      });
      // Initial render
      renderPage(currentPage);
    </script>
    <!-- Theme Switcher Script -->
    <script>
      // Theme switch logic
      const themeSwitch = document.getElementById('themeSwitch');
      const themeSwitchIcon = document.getElementById('themeSwitchIcon');
      const themeSwitchText = document.getElementById('themeSwitchText');
      function updateThemeSwitchUI(isDark) {
        if (isDark) {
          themeSwitch.checked = true;
          themeSwitchIcon.innerHTML = '<i class="fa-solid fa-moon"></i>';
          themeSwitchText.textContent = 'Dark';
        } else {
          themeSwitch.checked = false;
          themeSwitchIcon.innerHTML = '<i class="fa-solid fa-sun"></i>';
          themeSwitchText.textContent = 'Light';
        }
      }
      // Read theme from localStorage and apply on load
      function applyThemeFromStorage() {
        const theme = localStorage.getItem('theme');
        const isDark = theme === 'dark' || (!theme && 'dark');
        updateThemeSwitchUI(isDark);
        document.querySelectorAll('[data-bs-theme]').forEach(function (el) {
          el.setAttribute('data-bs-theme', isDark ? 'dark' : 'light');
        });
      }
      applyThemeFromStorage();
      // Listen to switch
      themeSwitch.addEventListener('change', function () {
        const isDark = themeSwitch.checked;
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        updateThemeSwitchUI(isDark);
        document.querySelectorAll('[data-bs-theme]').forEach(function (el) {
          el.setAttribute('data-bs-theme', isDark ? 'dark' : 'light');
        });
      });
    </script>
    <script>
      // ...existing code...
    </script>
  </body>
</html>
