{"version":3,"sources":["../src/utils-browser-esm.js"],"names":[],"mappings":";;;;AAOO,SAAS,cAAc,QAAA,EAAU;AAEtC,EAAA,IAAI,IAAA,GAAO,GAAA;AAEX,EAAA,IAAI,OAAO,MAAA,KAAW,WAAA,IAAe,UAAgB,QAAA,EAAU;AAC7D,IAAA,IAAA,GAAO,SAAY,CAAI,QAAA;AAAA,EACzB;AAEA,EAAA,MAAM,MAAA,GAAS,QAAA,CACZ,MAAA,CAAO,OAAO,EACd,GAAA,CAAI,CAAC,CAAA,KAAM,CAAA,CAAE,QAAQ,YAAA,EAAc,EAAE,CAAC,CAAA,CACtC,KAAK,GAAG,CAAA;AAEX,EAAA,MAAM,SAAA,GAAY,IAAA,CAAK,OAAA,CAAQ,MAAA,EAAQ,EAAE,CAAA;AACzC,EAAA,OAAO,SAAA,IAAa,MAAA,GAAS,GAAA,GAAM,MAAA,GAAS,EAAA,CAAA;AAC9C","file":"utils-browser-esm.cjs","sourcesContent":["/**\n * Get the Vite base URL and join with provided path segments.\n * Usage: getBaseUrl('foo', 'bar') => '/base/foo/bar'\n * Handles leading/trailing slashes and empty segments.\n * @param {...string} segments - Path segments to join to the base URL.\n * @returns {string} The full URL with base and joined path.\n */\nexport function getViteUrl(...segments) {\n  // Vite's base URL, fallback to '/' if not defined\n  let base = '/';\n  // Only works in ESM/browser context, not in Node.js CJS\n  if (typeof window !== 'undefined' && import.meta.env.BASE_URL) {\n    base = import.meta.env.BASE_URL;\n  }\n  // Clean up and join segments\n  const joined = segments\n    .filter(Boolean)\n    .map((s) => s.replace(/^\\/+|\\/+$/g, ''))\n    .join('/');\n  // Ensure base ends with a single slash\n  const baseClean = base.replace(/\\/+$/, '');\n  return baseClean + (joined ? '/' + joined : '');\n}\n"]}