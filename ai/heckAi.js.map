{"version":3,"sources":["../../src/ai/heckAi.js"],"names":[],"mappings":"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","file":"heckAi.js","sourcesContent":["import fs from 'fs/promises';\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport { writefile } from 'sbg-utility';\nimport { extractAnswerCodeblock, extractRelatedQuestions } from './hexkAi-SSE.js';\n\n/**\n * @typedef {Object} HeckAiSession\n * @property {string} id - The unique session ID.\n * @property {string} user_id - The user ID associated with the session.\n * @property {string} title - The session title.\n * @property {string} created_at - ISO timestamp when the session was created.\n * @property {string|null} deleted_at - ISO timestamp if deleted, or null.\n */\n\nconst SESSION_FILE = path.resolve('.cache/ai/heckAi.session');\n\nconst DEFAULT_HEADERS = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) Gecko/20100101 Firefox/140.0',\n  Accept: '*/*',\n  'Accept-Language': 'en-US,en;q=0.5',\n  'Content-Type': 'application/json',\n  Authorization:\n    'Bearer eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjU5NDBkZGZiLTI0MzYtNGY2MC1iYjU2LTk0ZWNhZDExMjU3YiIsImVtYWlsIjoiZGltYXNsYW5qYWthQGdtYWlsLmNvbSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTAzNzQ1NTEsImV4cCI6MTc1MDk3OTM1MX0.3C4yS65SWCUQBxPfiajX9N6e3LNP9xeyTMBplkcBUTk',\n  'Alt-Used': 'api.heckai.weight-wave.com',\n  'Sec-Fetch-Dest': 'empty',\n  'Sec-Fetch-Mode': 'cors',\n  'Sec-Fetch-Site': 'cross-site',\n  Priority: 'u=0',\n  Pragma: 'no-cache',\n  'Cache-Control': 'no-cache'\n};\n\n/**\n * Creates a new chat session and saves session info to `.cache/ai/heckAi.session`.\n *\n * @async\n * @function createSession\n * @param {string} [chat_title='Hello'] - The title of the chat session.\n * @returns {Promise<HeckAiSession|null>} The session object if created successfully, otherwise null.\n */\nexport async function createSession(chat_title = 'Hello') {\n  const sessionUrl = 'https://api.heckai.weight-wave.com/api/ha/v1/session/create';\n\n  const res = await fetch(sessionUrl, {\n    credentials: 'include',\n    headers: DEFAULT_HEADERS,\n    referrer: 'https://heck.ai/',\n    body: JSON.stringify({ title: chat_title }),\n    method: 'POST',\n    mode: 'cors'\n  });\n\n  if (!res.ok) {\n    console.error('‚ùå Error:', res.status, await res.text());\n    return null;\n  }\n\n  const data = await res.json();\n  console.log('‚úÖ Response:', data);\n\n  await fs.mkdir(path.dirname(SESSION_FILE), { recursive: true });\n  await fs.writeFile(SESSION_FILE, JSON.stringify(data, null, 2), 'utf-8');\n\n  // Preflight OPTIONS request\n  fetch(sessionUrl, {\n    method: 'OPTIONS',\n    mode: 'cors',\n    headers: {\n      ...DEFAULT_HEADERS,\n      Priority: 'u=4'\n    },\n    credentials: 'omit',\n    referrer: 'https://heck.ai/'\n  }).then((res2) => {\n    if (res2.ok) console.log('Session connected');\n  });\n\n  return data;\n}\n\n/**\n * Reads saved session info from `.cache/ai/heckAi.session`.\n *\n * @async\n * @function getSavedSession\n * @returns {Promise<HeckAiSession|null>} The session object if available, otherwise null.\n */\nexport async function getSavedSession() {\n  try {\n    const data = await fs.readFile(SESSION_FILE, 'utf-8');\n    return JSON.parse(data);\n  } catch {\n    console.warn('‚ö†Ô∏è No saved session found.');\n    return null;\n  }\n}\n\n/**\n * Gets the saved session from file, or creates a new one if none exists.\n *\n * @async\n * @function getOrCreateSession\n * @param {string} [chat_title='Hello'] - Title for the session if it needs to be created.\n * @returns {Promise<HeckAiSession>} The existing or newly created session object.\n */\nexport async function getOrCreateSession(chat_title = 'Hello') {\n  const saved = await getSavedSession();\n  if (saved) {\n    console.log('üì¶ Loaded saved session.');\n    return saved;\n  }\n\n  console.log('üîÑ No saved session found. Creating a new one...');\n  return await createSession(chat_title);\n}\n\n/**\n * Sends a message to the Heck AI chat API and parses the response.\n *\n * @async\n * @function sendMessage\n * @param {string} sessionId - The session ID to send the message to.\n * @param {string} message - The message to send.\n * @param {boolean} [echo=false] - Whether to log the response in a human-friendly format.\n * @returns {Promise<{ status: 'success' | 'error', data?: { answer: ReturnType<typeof extractAnswerCodeblock>, relatedQuestions: ReturnType<typeof extractRelatedQuestions> }, error?: string }>}\n */\nexport async function sendMessage(sessionId, message, echo = false) {\n  const url = 'https://api.heckai.weight-wave.com/api/ha/v1/chat';\n\n  try {\n    const res = await fetch(url, {\n      credentials: 'include',\n      headers: DEFAULT_HEADERS,\n      referrer: 'https://heck.ai/',\n      body: JSON.stringify({\n        model: 'openai/gpt-4o-mini',\n        question: message,\n        language: 'English',\n        sessionId,\n        previousQuestion: null,\n        previousAnswer: null,\n        imgUrls: [],\n        superSmartMode: false\n      }),\n      method: 'POST',\n      mode: 'cors'\n    });\n\n    const raw = await res.text();\n    writefile('.cache/ai/lines.json', raw.split(/\\r?\\n/));\n\n    if (!res.ok) {\n      const error = `HTTP ${res.status} ${res.statusText}`;\n      if (echo) console.error('‚ùå', error);\n      return { status: 'error', error, data: raw };\n    }\n\n    writefile('.cache/ai/heckAi.response.json', raw);\n    const parsed = {\n      answer: extractAnswerCodeblock(raw),\n      relatedQuestions: extractRelatedQuestions(raw)\n    };\n\n    if (echo) {\n      console.group('üß† AI Response');\n      console.log(`üí¨ Answer: ${parsed.answer || '(none)'}`);\n      if (parsed.relatedQuestions.length) {\n        console.log('üìé Related Questions:');\n        parsed.relatedQuestions.forEach((q) => console.log('‚Ä¢ ‚ú©', q));\n      }\n      console.groupEnd();\n    }\n\n    return {\n      status: 'success',\n      data: {\n        ...parsed,\n        raw\n      }\n    };\n  } catch (err) {\n    if (echo) console.error('‚ùå Exception:', err.message);\n    return { status: 'error', error: err.message };\n  }\n}\n"]}