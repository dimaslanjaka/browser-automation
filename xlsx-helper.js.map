{"version":3,"sources":["../src/xlsx-helper.js"],"names":["nikParserStrict"],"mappings":"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","file":"xlsx-helper.js","sourcesContent":["import ansiColors from 'ansi-colors';\nimport * as glob from 'glob';\nimport moment from 'moment';\nimport { nikParserStrictSync as nikParserStrict } from 'nik-parser-jurusid';\nimport crypto from 'node:crypto';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { array_random, writefile } from 'sbg-utility';\nimport { getAge } from '../src/date.js';\nimport { geocodeWithNominatim } from './address/nominatim.js';\nimport { extractMonthName, getDatesWithoutSundays } from './date.js';\nimport { logLine } from './utils.js';\nimport { getNumbersOnly } from './utils-browser.js';\nimport { getBeratBadan, getTinggiBadan } from './skrin_utils.js';\n\n/**\n * Generates a hash for the given file\n * @param {string} filePath - Path to the file\n * @returns {string} SHA256 hash of the file\n */\nexport function getFileHash(filePath) {\n  const fileBuffer = fs.readFileSync(filePath);\n  return crypto.createHash('sha256').update(fileBuffer).digest('hex');\n}\n\n/**\n * Generates a cache key\n * @param {string} prefix - Cache key prefix\n * @param {string} fileHash - Hash of the file\n * @param {...any} params - Additional parameters to include in the cache key\n * @returns {string} Cache key\n */\nexport function getCacheKey(prefix, fileHash, ...params) {\n  const shortHash = fileHash.substring(0, 7); // Use first 7 characters of hash\n  const paramString = params.length > 0 ? `_${params.join('_')}` : '';\n  return `${prefix}_${shortHash}${paramString}`;\n}\n\n/**\n * Gets cached data if available and valid\n * @param {string} cacheKey - Cache key\n * @param {string} [cacheDir='.cache/temp'] - Cache directory relative to process.cwd()\n * @returns {Object|null} Cached data or null if not found/invalid\n */\nexport function getCachedData(cacheKey, cacheDir = '.cache/temp') {\n  try {\n    const cacheFile = path.join(process.cwd(), cacheDir, `${cacheKey}.json`);\n    if (fs.existsSync(cacheFile)) {\n      const cachedData = JSON.parse(fs.readFileSync(cacheFile, 'utf-8'));\n      console.log(`Cache hit: ${cacheKey}`);\n      return cachedData;\n    }\n  } catch (error) {\n    console.warn(`Cache read error for ${cacheKey}:`, error.message);\n  }\n  return null;\n}\n\n/**\n * Saves data to cache\n * @param {string} cacheKey - Cache key\n * @param {any} data - Data to cache\n * @param {string} [cacheDir='.cache/temp'] - Cache directory relative to process.cwd()\n */\nexport function saveCachedData(cacheKey, data, cacheDir = '.cache/temp') {\n  try {\n    const fullCacheDir = path.join(process.cwd(), cacheDir);\n    if (!fs.existsSync(fullCacheDir)) {\n      fs.mkdirSync(fullCacheDir, { recursive: true });\n    }\n\n    const cacheFile = path.join(fullCacheDir, `${cacheKey}.json`);\n    fs.writeFileSync(cacheFile, JSON.stringify(data, null, 2), 'utf-8');\n    console.log(`Cache saved: ${cacheKey}`);\n  } catch (error) {\n    console.warn(`Cache save error for ${cacheKey}:`, error.message);\n  }\n}\n\n/**\n * Clears cache files matching a pattern\n * @param {string} pattern - Glob pattern to match cache files\n * @param {string} [cacheDir='.cache/temp'] - Cache directory relative to process.cwd()\n */\nexport function clearCache(pattern, cacheDir = '.cache/temp') {\n  try {\n    const fullCacheDir = path.join(process.cwd(), cacheDir);\n    if (!fs.existsSync(fullCacheDir)) {\n      console.log('Cache directory does not exist');\n      return;\n    }\n\n    const cacheFiles = glob.globSync(pattern, { cwd: fullCacheDir, absolute: true });\n    let deletedCount = 0;\n\n    cacheFiles.forEach((file) => {\n      try {\n        fs.unlinkSync(file);\n        deletedCount++;\n        console.log(`Deleted cache file: ${path.basename(file)}`);\n      } catch (error) {\n        console.warn(`Failed to delete ${file}:`, error.message);\n      }\n    });\n\n    console.log(`Cleared ${deletedCount} cache file(s)`);\n  } catch (error) {\n    console.warn('Cache clear error:', error.message);\n  }\n}\n\n/**\n * Find data rows by NIK\n * @param {import('../globals').ExcelRowData[]} datas - Array of Excel data\n * @param {string} targetNik - NIK to search for\n * @returns {import('../globals').ExcelRowData|null} Found data or null\n */\nexport function findByNik(datas, targetNik) {\n  return datas.find((item) => item.nik === targetNik || `${item.nik}`.trim().includes(targetNik)) || null;\n}\n\n/**\n * Matches the first and last data against expected values\n * @param {import('../globals').ExcelRowData[]} datas - Array of Excel data\n * @param {Object} matchData - Expected first and last data\n * @returns {Object} Matching results\n */\nexport function matchFirstAndLastData(datas, matchData) {\n  const firstItem = datas.at(0);\n  const lastItem = datas.at(-1);\n\n  const firstMatch = {\n    nikMatch: firstItem?.nik === matchData.first.nik,\n    namaMatch: firstItem?.nama === matchData.first.nama,\n    actualNik: firstItem?.nik,\n    actualNama: firstItem?.nama,\n    expectedNik: matchData.first.nik,\n    expectedNama: matchData.first.nama\n  };\n\n  const lastMatch = {\n    nikMatch: lastItem?.nik === matchData.last.nik,\n    namaMatch: lastItem?.nama === matchData.last.nama,\n    actualNik: lastItem?.nik,\n    actualNama: lastItem?.nama,\n    expectedNik: matchData.last.nik,\n    expectedNama: matchData.last.nama\n  };\n\n  return {\n    first: firstMatch,\n    last: lastMatch,\n    overallMatch: firstMatch.nikMatch && firstMatch.namaMatch && lastMatch.nikMatch && lastMatch.namaMatch\n  };\n}\n\n/**\n * Gets data range between two specific rows identified by NIK and NAMA.\n * @param {(import('../globals').ExcelRowData4 | import('../globals').ExcelRowData)[]} data - Array of Excel row data\n * @param {Object} options - Configuration object\n * @param {string} options.fromNik - NIK of the starting row\n * @param {string} options.fromNama - NAMA of the starting row\n * @param {string} options.toNik - NIK of the ending row\n * @param {string} options.toNama - NAMA of the ending row\n * @param {string} [options.outputFile] - Optional file path to write the range data\n * @returns {Promise<(import('../globals').ExcelRowData4 | import('../globals').ExcelRowData)[]>} - Array of rows between fromRow and toRow (inclusive)\n */\nexport async function getDataRange(data, { fromNik, fromNama, toNik, toNama, outputFile = null }) {\n  // Support both uppercase and lowercase keys for NIK and NAMA\n  const fromRow = data.find(\n    (row) => (row.NIK === fromNik || row.nik === fromNik) && (row.NAMA === fromNama || row.nama === fromNama)\n  );\n  const toRow = data.find(\n    (row) => (row.NIK === toNik || row.nik === toNik) && (row.NAMA === toNama || row.nama === toNama)\n  );\n\n  if (!fromRow) {\n    throw new Error(`FromRow not found: NIK=${fromNik}, NAMA=${fromNama}`);\n  }\n\n  if (!toRow) {\n    throw new Error(`ToRow not found: NIK=${toNik}, NAMA=${toNama}`);\n  }\n\n  const fromIndex = data.indexOf(fromRow);\n  const toIndex = data.indexOf(toRow);\n  const rangeData = data.slice(fromIndex, toIndex + 1);\n\n  // console.log(`\\nRange: from index ${fromIndex} to index ${toIndex}`);\n  // console.log(`Total rows in range: ${rangeData.length}`);\n\n  // Write to file if outputFile is provided\n  if (outputFile) {\n    writefile(outputFile, JSON.stringify(rangeData, null, 2), 'utf8');\n    logLine(`\\nRange data written to: ${outputFile}`);\n    logLine(\n      `File contains ${rangeData.length} rows from originalRowNumber ${rangeData[0]?.originalRowNumber} to ${rangeData[rangeData.length - 1]?.originalRowNumber}`\n    );\n  }\n\n  // Validation\n  if (rangeData[0] !== fromRow) {\n    throw new Error('First row in rangeData is not fromRow');\n  }\n\n  if (rangeData[rangeData.length - 1] !== toRow) {\n    throw new Error('Last row in rangeData is not toRow');\n  }\n\n  return rangeData;\n}\n\n/**\n * Fixes and validates data object by normalizing field access and validating required fields.\n * Handles both ExcelRowData (lowercase) and ExcelRowData4 (uppercase) field naming conventions.\n *\n * @param {import('../globals').ExcelRowData4 | import('../globals').ExcelRowData | null} data - The data object to fix and validate\n * @returns The validated and potentially modified data object\n * @throws {Error} When required fields are missing or invalid\n */\nexport async function fixData(data) {\n  /** @type {Partial<import('../globals').fixDataResult>} */\n  const initialData = data || null;\n  if (!initialData) throw new Error('Invalid data format: data is required');\n\n  // Normalize key fields\n  let nik = initialData.NIK || initialData.nik || null;\n  const nama = initialData.NAMA || initialData.nama || null;\n  if (!nik || !nama) throw new Error('Invalid data format: NIK and NAMA are required');\n  nik = getNumbersOnly(nik);\n  if (nik.length !== 16) throw new Error(`Invalid NIK length: ${nik} (expected 16 characters)`);\n  if (nama.length < 3) throw new Error(`Invalid NAMA length: ${nama} (expected at least 3 characters)`);\n\n  initialData.nik = nik; // Ensure both lowercase and uppercase keys are set\n  initialData.NIK = nik; // Ensure both lowercase and uppercase keys are set\n\n  initialData.nama = nama; // Ensure both lowercase and uppercase keys are set\n  initialData.NAMA = nama; // Ensure both lowercase and uppercase keys are set\n\n  // Parse NIK\n  const parsed_nik = nikParserStrict(nik);\n  if (parsed_nik.status == 'success' && parsed_nik.data.lahir) {\n    // Normalize date format for lahir\n    parsed_nik.data.originalLahir = parsed_nik.data.lahir;\n    const momentParseNik = moment(parsed_nik.data.lahir, 'YYYY-MM-DD', true);\n    if (momentParseNik.isValid()) {\n      parsed_nik.data.lahir = momentParseNik.format('DD/MM/YYYY');\n    }\n  }\n  initialData.parsed_nik = parsed_nik.status === 'success' ? parsed_nik : null;\n\n  // Tanggal entry normalization\n  let tanggalEntry = initialData['TANGGAL ENTRY'] || initialData.tanggal;\n  if (!tanggalEntry) {\n    console.log('\\nTanggal entry is required', initialData, '\\n');\n    process.exit(1);\n  }\n  if (!moment(tanggalEntry, 'DD/MM/YYYY', true).isValid()) {\n    if (\n      typeof tanggalEntry === 'string' &&\n      /\\b(jan(uari)?|feb(ruari)?|mar(et)?|apr(il)?|mei|jun(i|e)?|jul(i|y)?|agu(stus)?|aug(ust)?|sep(tember)?|okt(ober)?|oct(ober)?|nov(ember)?|des(ember)?|dec(ember)?|bln\\s+\\w+|bulan\\s+\\w+)\\b/i.test(\n        tanggalEntry\n      )\n    ) {\n      const monthName = extractMonthName(tanggalEntry);\n      if (!monthName) throw new Error(`Month name not found in tanggalEntry: ${tanggalEntry}`);\n      tanggalEntry = array_random(getDatesWithoutSundays(monthName, 2025, 'DD/MM/YYYY', true));\n      logLine(\n        `${ansiColors.cyan('[fixData]')} Generated new date for \"${tanggalEntry}\" from month name in entry: ${tanggalEntry}`\n      );\n    }\n    const reparseTglLahir = moment(tanggalEntry, 'DD/MM/YYYY', true);\n    if (reparseTglLahir.day() === 0) throw new Error(`Tanggal entry cannot be a Sunday: ${tanggalEntry}`);\n    if (!reparseTglLahir.isValid())\n      throw new Error(`Invalid tanggalEntry format: ${tanggalEntry} (expected DD/MM/YYYY)`);\n    initialData.tanggal = tanggalEntry;\n    initialData['TANGGAL ENTRY'] = tanggalEntry;\n  } else {\n    const parsedDate = moment(tanggalEntry, 'DD/MM/YYYY', true);\n    // Check if the date is a Sunday\n    if (parsedDate.day() === 0) {\n      throw new Error(`Tanggal entry ${nik} cannot be a Sunday: ${tanggalEntry}`);\n    }\n    // Check if the date is not greater than today\n    if (parsedDate.isAfter(moment())) {\n      throw new Error(`Tanggal entry ${nik} cannot be in the future: ${tanggalEntry}`);\n    }\n  }\n\n  // TGL LAHIR normalization\n  let tglLahir = initialData['TGL LAHIR'] || null;\n  if (tglLahir) {\n    if (typeof tglLahir === 'number') {\n      const baseDate = moment('1900-01-01');\n      let days = tglLahir - 1;\n      if (days > 59) days--;\n      tglLahir = baseDate.add(days, 'days').format('DD/MM/YYYY');\n      logLine(`${ansiColors.cyan('[fixData]')} Converted Excel serial date to: ${tglLahir}`);\n    } else if (typeof tglLahir === 'string' && !moment(tglLahir, 'DD/MM/YYYY', true).isValid()) {\n      throw new Error(`Invalid TGL LAHIR format: ${tglLahir} (expected DD/MM/YYYY)`);\n    }\n    if (!moment(tglLahir, 'DD/MM/YYYY', true).isValid())\n      throw new Error(`Invalid TGL LAHIR date: ${tglLahir} (expected DD/MM/YYYY)`);\n    initialData['TGL LAHIR'] = tglLahir;\n  }\n\n  // Gender\n  let gender = parsed_nik.status === 'success' ? parsed_nik?.data.kelamin : 'Tidak Diketahui';\n  if (gender.toLowerCase() === 'l' || gender.toLowerCase() === 'laki-laki') {\n    gender = 'Laki-laki';\n  } else if (gender.toLowerCase() === 'p' || gender.toLowerCase() === 'perempuan') {\n    gender = 'Perempuan';\n  }\n  initialData.gender = gender; // fixData gender result\n\n  // Age calculation\n  let age = 0;\n  let birthDate = initialData.tgl_lahir || initialData['TGL LAHIR'] || null;\n  if (birthDate) {\n    age = getAge(birthDate, 'DD/MM/YYYY');\n    logLine(`${ansiColors.cyan('[fixData]')} Age from TGL LAHIR: ${age} years`);\n  } else if (parsed_nik.status === 'success' && parsed_nik.data.lahir) {\n    age = getAge(parsed_nik.data.lahir);\n    logLine(`${ansiColors.cyan('[fixData]')} Age from NIK: ${age} years`);\n  }\n  data.age = age; // Ensure age is set in the data object\n\n  // Pekerjaan normalization\n  let pekerjaan = initialData.pekerjaan || initialData.PEKERJAAN || null;\n  if (!pekerjaan) {\n    if (!pekerjaan) {\n      if (age > 55 || age <= 20) {\n        pekerjaan = 'Tidak Bekerja';\n      } else {\n        pekerjaan = gender && gender.toLowerCase() === 'perempuan' ? 'IRT' : 'Wiraswasta';\n      }\n    }\n  } else {\n    logLine(`${ansiColors.cyan('[fixData]')} Pekerjaan: ${pekerjaan}`);\n  }\n  const jobMappings = [\n    { pattern: /rumah\\s*tangga|irt/i, value: 'IRT' },\n    { pattern: /swasta|pedagang/i, value: 'Wiraswasta' },\n    { pattern: /tukang|buruh/i, value: 'Buruh ' },\n    { pattern: /tidak\\s*bekerja|belum\\s*bekerja|pensiun|belum\\/tidak\\s*bekerja/i, value: 'Tidak Bekerja' },\n    { pattern: /pegawai\\s*negeri(\\s*sipil)?|pegawai\\s*negri/i, value: 'PNS ' },\n    { pattern: /guru|dosen/i, value: 'Guru/ Dosen' },\n    { pattern: /perawat|dokter/i, value: 'Tenaga Profesional Medis ' },\n    { pattern: /pengacara|wartawan/i, value: 'Tenaga Profesional Non Medis ' },\n    { pattern: /pelajar|siswa|siswi|sekolah/i, value: 'Pelajar/ Mahasiswa' },\n    { pattern: /s[o,u]pir/i, value: 'Sopir ' }\n  ];\n  for (const { pattern, value } of jobMappings) {\n    if (pattern.test(pekerjaan.toLowerCase())) {\n      pekerjaan = value;\n      logLine(`${ansiColors.cyan('[fixData]')} Pekerjaan mapped: ${pekerjaan}`);\n      break;\n    }\n  }\n  if (pekerjaan) {\n    initialData.pekerjaan = pekerjaan;\n    initialData.PEKERJAAN = pekerjaan;\n    logLine(`${ansiColors.cyan('[fixData]')} Pekerjaan fixed: ${pekerjaan}`);\n  } else {\n    throw new Error(`Pekerjaan could not be determined for NIK: ${nik}`);\n  }\n\n  // Fix alamat\n  let alamat = initialData.alamat || initialData.ALAMAT || null;\n  if (!alamat) {\n    if (initialData.parsed_nik && initialData.parsed_nik.status === 'success') {\n      const parsed_data = initialData.parsed_nik.data;\n      alamat = [parsed_data.kelurahan?.[0]?.name, parsed_data.namaKec, parsed_data.kotakab, parsed_data.provinsi]\n        .filter((part) => part !== undefined && part !== null && part !== '')\n        .join(', ');\n      logLine(`${ansiColors.cyan('[fixData]')} Alamat from parsed NIK: ${alamat}`);\n      const keywordAddr = `${parsed_data.kelurahan}, ${parsed_data.namaKec}, Surabaya, Jawa Timur`.trim();\n      const address = await geocodeWithNominatim(keywordAddr);\n      data._address = address;\n\n      let { kotakab = '', namaKec = '', provinsi = '', kelurahan = [] } = parsed_data;\n\n      if (kotakab.length === 0 || namaKec.length === 0 || provinsi.length === 0) {\n        logLine(`Fetching address from Nominatim for: ${keywordAddr}`);\n        logLine('Nominatim result:', address);\n\n        const addr = address.address || {};\n\n        if (kelurahan.length === 0) kelurahan = [addr.village || addr.hamlet || ''];\n        if (namaKec.length === 0) namaKec = addr.suburb || addr.city_district || '';\n        if (kotakab.length === 0) kotakab = addr.city || addr.town || addr.village || 'Kota Surabaya';\n        if (provinsi.length === 0) provinsi = addr.state || addr.province || 'Jawa Timur';\n\n        if (kotakab.toLowerCase().includes('surabaya')) {\n          kotakab = 'Kota Surabaya';\n        }\n\n        if (kotakab.length === 0 || namaKec.length === 0) {\n          throw new Error(\"❌ Failed to take the patient's city or town\");\n        }\n\n        parsed_data.kelurahan = kelurahan;\n        parsed_data.namaKec = namaKec;\n        parsed_data.kotakab = kotakab;\n        parsed_data.provinsi = provinsi;\n        initialData.parsed_nik.data = parsed_data; // Update parsed_nik with new\n      }\n    } else {\n      throw new Error(`Alamat is required for NIK: ${nik}`);\n    }\n  }\n  initialData.alamat = alamat; // Ensure both lowercase and uppercase keys are set\n  initialData.ALAMAT = alamat; // Ensure both lowercase and uppercase keys are set\n\n  // Fix tinggi and berat badan\n  let tinggi = initialData.TB || initialData.tb || null;\n  let berat = initialData.bb || initialData.BB || null;\n\n  if (!tinggi) {\n    tinggi = getTinggiBadan(age, gender);\n  }\n  if (!berat) {\n    berat = getBeratBadan(age, gender);\n  }\n\n  initialData.tb = tinggi; // Ensure both lowercase and uppercase keys are set\n  initialData.TB = tinggi; // Ensure both lowercase and uppercase keys are set\n  initialData.bb = berat; // Ensure both lowercase and uppercase keys are set\n  initialData.BB = berat; // Ensure both lowercase and uppercase keys are set\n\n  return initialData;\n}\n"]}