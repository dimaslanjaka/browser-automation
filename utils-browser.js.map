{"version":3,"sources":["../src/utils-browser.js"],"names":["_a"],"mappings":"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","file":"utils-browser.js","sourcesContent":["/**\n * @typedef {Object} LoadJSOpt\n * @property {boolean} [proxy] - Whether to proxy the request (useful for CORS)\n * @property {boolean} [async] - Whether to load the script asynchronously\n * @property {boolean} [defer] - Whether to defer script execution\n * @property {function(Event): void} [onload] - onload handler\n * @property {function(Event): void} [onerror] - onerror handler\n * @property {string} [crossOrigin] - Cross-origin attribute\n */\n\nimport Bluebird from 'bluebird';\n\n/**\n * No-op fallback\n */\nexport function noop() {}\n\n/**\n * Strip protocol (http/https) from a URL\n * @param {string} url\n * @returns {string}\n */\nexport function stripProtocol(url) {\n  return url.replace(/^https?:/, '');\n}\n\n/**\n * Load external JavaScript file with deduplication\n *\n * @param {string} url - The script URL to load\n * @param {LoadJSOpt} [props] - Optional settings\n * @returns {Promise<void>}\n *\n * @example\n * React.useEffect(() => { loadJS('//host/path/file.js') });\n *\n * // or in class React.Component\n * componentDidMount() { loadJS('//host/path/file.js') }\n */\nexport function loadJS(url, props) {\n  props = Object.assign(\n    {\n      proxy: false,\n      onload: noop,\n      onerror: noop\n    },\n    props || {}\n  );\n\n  return new Bluebird((resolve, reject) => {\n    const script = document.createElement('script');\n\n    // Fix dynamic protocol source\n    if (url.startsWith('//')) {\n      url = window.location.protocol + url;\n    }\n\n    // Proxying when enabled\n    if (url.startsWith('http') && props.proxy) {\n      url = 'https://crossorigin.me/' + url;\n    }\n\n    // Skip duplicate script loads\n    const existingSources = Array.from(document.scripts)\n      .map((el) => stripProtocol(el.src))\n      .filter((source) => source === stripProtocol(url));\n\n    if (existingSources.length > 0 || document.querySelector(`script[src=\"${url}\"]`)) {\n      return resolve(props.onload?.call(null));\n    }\n\n    script.src = url.replace(/(^\\w+:|^)/, window.location.protocol);\n    script.async = props.async || false;\n    script.defer = props.defer || false;\n    script.crossOrigin = props.crossOrigin || 'anonymous';\n\n    script.onload = () => resolve(props.onload?.call(null));\n    script.onerror = (err) => reject(props.onerror?.call(null) || err);\n\n    document.body.appendChild(script);\n  });\n}\n\n/**\n * Pauses execution for a specified amount of time.\n * @function sleep\n * @param {number} ms - The number of milliseconds to sleep.\n * @returns {Promise<void>} A promise that resolves after the specified time.\n */\nexport function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n} /**\n * Extracts only numbers from a string and removes all whitespaces.\n * @function getNumbersOnly\n * @param {string} str - The input string.\n * @returns {string} A string containing only numeric characters.\n */\n\nexport function getNumbersOnly(str) {\n  return `${str}`.replace(/\\D+/g, '').trim();\n} /**\n * Extracts a number (integer or float) from a string, preserving decimal separator as comma.\n * If the input is already a number, returns it as a string (with comma if float).\n *\n * @function extractNumericWithComma\n * @param {string|number} str - The input string or number.\n * @returns {string} A string containing the numeric value, with decimal comma if applicable.\n */\n\nexport function extractNumericWithComma(str) {\n  if (typeof str === 'number') {\n    // Convert number to string, replace dot with comma if float\n    return String(str).replace('.', ',');\n  }\n  const match = `${str}`.match(/\\d+[.,]?\\d*/);\n  if (match) {\n    // Replace decimal dot with comma\n    return match[0].replace('.', ',');\n  }\n  return '';\n} /**\n * Merges an array of objects by a unique key, combining non-null and non-empty values.\n *\n * @param {Array<Object>} data - The array of objects to merge.\n * @param {string} key - The key to group by (e.g., 'nik').\n * @returns {Array<Object>} An array of merged objects, one per unique key.\n */\n\nexport function uniqueArrayObjByKey(data, key) {\n  return Object.values(\n    data.reduce((acc, item) => {\n      const id = item[key];\n      if (!acc[id]) {\n        acc[id] = { ...item };\n      } else {\n        for (const prop in item) {\n          if (prop !== key && item[prop] !== null && item[prop] !== '') {\n            acc[id][prop] = item[prop];\n          }\n        }\n      }\n      return acc;\n    }, {})\n  );\n} /**\n * Get all weekdays (Monday to Friday) in the current month.\n *\n * @param {boolean} [debug=false] - If true, logs debug information with the formatted date and day name.\n * @returns {string[]} Array of dates in the format DD/MM/YYYY for all weekdays in the current month.\n *\n * @example\n * // Get weekdays without debug info\n * const weekdays = getWeekdaysOfCurrentMonth();\n * logLine(weekdays);\n *\n * @example\n * // Get weekdays with debug info\n * const weekdaysWithDebug = getWeekdaysOfCurrentMonth(true);\n * logLine(weekdaysWithDebug);\n */\n\nexport function getWeekdaysOfCurrentMonth(debug = false) {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = now.getMonth(); // January = 0\n\n  const result = [];\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month, day);\n    const dayOfWeek = date.getDay(); // 0 = Sunday, 6 = Saturday\n    const dayName = date.toLocaleString('en-us', { weekday: 'long' }); // Get day name\n\n    const dd = String(date.getDate()).padStart(2, '0');\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const yyyy = date.getFullYear();\n    const formattedDate = `${dd}/${mm}/${yyyy}`;\n\n    if (debug) {\n      console.log(`Date: ${formattedDate}, Day: ${dayName}`);\n    }\n\n    if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n      result.push(formattedDate);\n    }\n  }\n\n  return result;\n}\n\n/**\n * generate random string\n * @param len length\n * @returns\n */\nexport const randomStr = (len = 8) =>\n  Math.random()\n    .toString(36)\n    .substring(2, len + 2);\n"]}