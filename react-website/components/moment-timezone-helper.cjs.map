{"version":3,"sources":["../../../src/react-website/components/moment-timezone-helper.js"],"names":["moment"],"mappings":";;;;;;;;;AAaO,SAAS,wBAAA,GAA2B;AACzC,EAAA,IAAI,OAAO,aAAa,WAAA,IAAe,QAAA,CAAS,KAAK,QAAA,CAAS,MAAM,CAAA,EAAG,OAAA,CAAQ,KAAA,EAAM;AACvF;AASO,SAAS,aAAA,CAAc,SAAA,EAAW,cAAA,EAAgB,eAAA,EAAiB;AAIxE,EAAA,IAAI,IAAA;AACJ,EAAA,IAAI,SAAA,CAAU,SAAS,CAAA,EAAG;AACxB,IAAA,IAAA,GAAOA,uBAAA,CAAO,SAAS,CAAA,CAAE,MAAA,EAAO;AAAA,EAClC;AACA,EAAA,IAAI,OAAO,cAAc,QAAA,EAAU;AACjC,IAAA,IAAA,GAAO,IAAI,KAAK,SAAS,CAAA;AAAA,EAC3B;AACA,EAAA,IAAI,KAAA,GAAQ,EAAA;AACZ,EAAA,IAAI,OAAO,cAAA,KAAmB,QAAA,IAAY,cAAA,CAAe,SAAS,CAAA,EAAG;AACnE,IAAA,KAAA,GAAQ,cAAA;AAAA,EACV,WAAW,cAAA,IAAkB,cAAA,CAAe,SAAS,cAAA,CAAe,KAAA,CAAM,SAAS,CAAA,EAAG;AACpF,IAAA,KAAA,GAAQ,cAAA,CAAe,KAAA;AAAA,EACzB;AACA,EAAA,IAAI,QAAA,GAAW,MAAA;AACf,EAAA,IAAI,OAAO,aAAa,WAAA,EAAa;AACnC,IAAA,MAAM,aAAA,GAAgB,QAAA,CAAS,cAAA,CAAe,eAAe,CAAA;AAC7D,IAAA,IAAI,aAAA,IAAiB,cAAc,KAAA,EAAO;AACxC,MAAA,QAAA,GAAW,aAAA,CAAc,MAAM,IAAA,EAAK;AAAA,IACtC;AAAA,EACF;AACA,EAAA,IAAI,OAAO,eAAA,KAAoB,QAAA,IAAY,eAAA,CAAgB,SAAS,CAAA,EAAG;AACrE,IAAA,QAAA,GAAW,eAAA;AAAA,EACb;AACA,EAAA,OAAOA,wBAAO,IAAI,CAAA,CAAE,GAAG,QAAQ,CAAA,CAAE,OAAO,KAAK,CAAA;AAC/C;AAOO,SAAS,iBAAA,CAAkB,SAAS,IAAA,EAAM;AAK/C,EAAA,MAAM,KAAA,GAAQ,aAAA,CAAc,IAAA,EAAM,qBAAqB,CAAA;AACvD,EAAA,OAAA,CAAQ,GAAA,CAAI,WAAA,EAAa,EAAE,KAAA,EAAO,CAAA;AAQlC,EAAA,OAAA,CAAQ,KAAA,GAAQ,KAAA;AAClB;AAEO,SAAS,UAAU,GAAA,EAAK;AAC7B,EAAA,OAAO,CAAC,MAAM,GAAG,CAAA,IAAK,CAAC,KAAA,CAAM,UAAA,CAAW,GAAG,CAAC,CAAA;AAC9C;AAWO,SAAS,iBAAA,GAAoB;AAClC,EAAA,MAAM,MAAA,GAAS;AAAA,IACb,QAAA,EAAU,MAAA;AAAA,IACV,MAAA,EAAQ;AAAA,GACV;AACA,EAAA,IAAI;AACF,IAAA,MAAA,CAAO,QAAA,GAAW,IAAA,CAAK,cAAA,EAAe,CAAE,iBAAgB,CAAE,QAAA;AAAA,EAC5D,SAAS,CAAA,EAAG;AAAA,EAEZ;AACA,EAAA,MAAM,MAAA,GAAA,qBAAa,IAAA,EAAK,EAAE,mBAAkB,EAC1C,CAAA,GAAI,IAAA,CAAK,GAAA,CAAI,MAAM,CAAA;AACrB,EAAA,MAAA,CAAO,UAAU,MAAA,GAAS,CAAA,GAAI,MAAM,GAAA,IAAA,CAAQ,IAAA,GAAO,KAAK,KAAA,CAAM,CAAA,GAAI,EAAE,CAAA,EAAG,KAAA,CAAM,EAAE,CAAA,GAAI,GAAA,GAAA,CAAO,OAAQ,CAAA,GAAI,EAAA,EAAK,MAAM,EAAE,CAAA;AACnH,EAAA,OAAO,MAAA;AACT","file":"moment-timezone-helper.cjs","sourcesContent":["// https://codepen.io/dimaslanjaka/pen/LYegjaV\n// data timezone load https://momentjs.com/timezone/docs/#/data-loading/\n// list timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n// import 'moment';\n// import 'moment/min/moment-with-locales';\n// import 'moment-timezone/builds/moment-timezone-with-data.min';\n// import moment from 'moment-timezone';\n\nimport moment from 'moment-timezone';\n\n/**\n * start moment timezone script\n */\nexport function momentTimezonePlayground() {\n  if (typeof location !== 'undefined' && location.host.includes('cdpn')) console.clear();\n}\n\n/**\n * moment format\n * @param {Date|string|number} dateInput\n * @param {string} [custom_pattern]\n * @param {string} [custom_timezone]\n * @returns\n */\nexport function moment_format(dateInput, custom_pattern, custom_timezone) {\n  /**\n   * @type {Date}\n   */\n  let date;\n  if (isNumeric(dateInput)) {\n    date = moment(dateInput).toDate();\n  }\n  if (typeof dateInput === 'string') {\n    date = new Date(dateInput);\n  }\n  let value = '';\n  if (typeof custom_pattern === 'string' && custom_pattern.length > 0) {\n    value = custom_pattern;\n  } else if (custom_pattern && custom_pattern.value && custom_pattern.value.length > 0) {\n    value = custom_pattern.value;\n  }\n  let timezone = undefined;\n  if (typeof document !== 'undefined') {\n    const date_timezone = document.getElementById('date-timezone');\n    if (date_timezone && date_timezone.value) {\n      timezone = date_timezone.value.trim();\n    }\n  }\n  if (typeof custom_timezone === 'string' && custom_timezone.length > 0) {\n    timezone = custom_timezone;\n  }\n  return moment(date).tz(timezone).format(value);\n}\n\n/**\n * set datetime-local\n * @param {HTMLInputElement} element\n * @param {Date} date\n */\nexport function setDateLocalValue(element, date) {\n  /*const new_date = new Date(date.getTime() - new Date().getTimezoneOffset() * 60 * 1000);\n\tconst isoString = new_date.toISOString();\n\tconst value = isoString.substring(0, ((isoString.indexOf('T') | 0) + 6) | 0);\n\tconsole.log('set value', { isoString, value });*/\n  const value = moment_format(date, 'YYYY-MM-DD HH:mm:ss');\n  console.log('set value', { value });\n  // const nodeName = element.tagName.toLowerCase();\n  // if (nodeName === 'select' || (nodeName === 'input' && element.type === 'file')) {\n  //   // IE9-IE11, non-IE\n  //   // Dispatch change.\n  //   const event = new Event('change', { bubbles: true });\n  //   event.dispatchEvent(event);\n  // }\n  element.value = value;\n}\n\nexport function isNumeric(str) {\n  return !isNaN(str) && !isNaN(parseFloat(str));\n}\n\n/**\n * Get client side timezone offset from UTC or GMT (for example, UTC+01)\n *\n * @returns {{ offset: string|undefined, timeZone: string|undefined }} (+|-)HH:mm - Where `HH` is 2 digits hours and `mm` 2 digits minutes.\n * @example\n * // From Indian/Reunion with UTC+4\n * // '+04:00'\n * getTimeZone()\n */\nexport function getTimeZoneOffset() {\n  const result = {\n    timeZone: undefined,\n    offset: undefined\n  };\n  try {\n    result.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  } catch (_) {\n    //\n  }\n  const offset = new Date().getTimezoneOffset(),\n    o = Math.abs(offset);\n  result.offset = (offset < 0 ? '+' : '-') + ('00' + Math.floor(o / 60)).slice(-2) + ':' + ('00' + (o % 60)).slice(-2);\n  return result;\n}\n"]}