{"version":3,"sources":["../../../src/react-website/components/cookie.js"],"names":[],"mappings":"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","file":"cookie.cjs","sourcesContent":["/**\n * Create detailed cookie\n * @param {string} name\n * @param {string|number|boolean} value\n * @param {number} expires - expires in days\n * @param {string} [path] - specific path\n * @param {string} [domain] - specific domain\n * @param {boolean} [secure] - secure cookie (https only)\n */\nexport function setCookie(name, value, expires, path, domain, secure) {\n  let exp = '';\n  if (expires) {\n    const d = new Date();\n    d.setTime(d.getTime() + parseInt(`${expires}`) * 24 * 60 * 60 * 1000); // days\n    exp = '; expires=' + d.toUTCString();\n  }\n  if (!path) {\n    path = '/';\n  }\n  const cookie =\n    name +\n    '=' +\n    encodeURIComponent(value) +\n    exp +\n    '; path=' +\n    path +\n    (domain ? '; domain=' + domain : '') +\n    (secure ? '; secure' : '');\n  document.cookie = cookie;\n}\n\n/**\n * Create detailed cookie in minutes\n * @param {string} name\n * @param {string} value\n * @param {number} [minutes=10] - expires in minutes\n * @param {string} [path='/'] - specific path\n * @param {string} [domain] - specific domain\n * @param {boolean} [secure] - secure cookie (https only)\n * @returns {Promise<null>}\n */\nexport function setCookieMins(name, value, minutes = 10, path = '/', domain, secure) {\n  return new Promise(function (resolve) {\n    let expires;\n    if (minutes) {\n      const date = new Date();\n      date.setTime(date.getTime() + minutes * 60 * 1000);\n      expires = '; expires=' + date.toUTCString();\n    } else {\n      expires = '';\n    }\n\n    const cookie =\n      name +\n      '=' +\n      encodeURIComponent(value) +\n      expires +\n      '; path=' +\n      path +\n      (domain ? '; domain=' + domain : '') +\n      (secure ? '; secure' : '');\n    document.cookie = cookie;\n    resolve(null);\n  });\n}\n\n/**\n * Get a cookie by name\n * @param {string} name\n * @returns {string|null}\n */\nexport function getCookie(name) {\n  const nameEQ = name + '=';\n  const ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) == ' ') c = c.substring(1);\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length);\n  }\n  return null;\n}\n\n/**\n * @typedef {Object} GetCookiesOptions\n * @property {boolean} sort - Sort cookies by key\n * @property {string[]} [skipKey] - Keys to skip\n */\n\n/**\n * Get all cookies\n * @param {GetCookiesOptions} [options={ sort: false }]\n * @returns {Object.<string, any>}\n */\nexport function getCookies(options = { sort: false }) {\n  const { sort = false, skipKey = [] } = options;\n  const pairs = document.cookie.split(';');\n  const cookies = {};\n  for (let i = 0; i < pairs.length; i++) {\n    const pair = pairs[i].split('=');\n    cookies[(pair[0] + '').trim()] = unescape(pair.slice(1).join('='));\n  }\n\n  if (skipKey.length > 0) {\n    for (const key in cookies) {\n      if (skipKey.includes(key)) delete cookies[key];\n    }\n  }\n\n  if (sort) {\n    const sorted = {};\n    const sortKeys = Object.keys(cookies).sort((a, b) => (a === b ? 0 : a < b ? -1 : 1));\n    sortKeys.forEach((key) => {\n      sorted[key] = cookies[key];\n    });\n    return sorted;\n  }\n\n  return cookies;\n}\n\n/**\n * Remove a cookie by name\n * @param {string} name\n */\nexport function eraseCookie(name) {\n  document.cookie = name + '=; Max-Age=-99999999;';\n}\n\n/**\n * Remove a cookie by name (alias for eraseCookie)\n * @param {string} name\n * @returns {void}\n */\nexport function removeCookie(name) {\n  return eraseCookie(name);\n}\n\n/**\n * Delete all cookies in the current domain\n */\nexport function deleteAllCookies() {\n  const cookies = document.cookie.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i];\n    const eqPos = cookie.indexOf('=');\n    const name = eqPos > -1 ? cookie.substring(0, eqPos) : cookie;\n    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT';\n  }\n}\n\n/**\n * Get a unique ID for the current page via cookie\n * @returns {string}\n */\nexport function getCurrentPageId() {\n  if (!getCookie('___current_id')) {\n    setCookie('___current_id', Math.random().toString(36).substring(2, 9), 1);\n  }\n  if (!window.pageId) window.pageId = getCookie('___current_id');\n  return window.pageId;\n}\n"]}