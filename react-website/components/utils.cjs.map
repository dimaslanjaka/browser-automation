{"version":3,"sources":["../../../src/react-website/components/utils.js"],"names":["safelinkify","setCookieMins","getCookie","sleep"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,SAAS,WAAA,GAAc;AAC5B,EAAA,IAAI,OAAO,MAAA,KAAW,WAAA,IAAe,MAAA,CAAO,QAAA,EAAU;AAEpD,IAAA,UAAA,CAAW,MAAM;AACf,MAAA,MAAA,CAAO,QAAA,CAAS,GAAG,CAAC,CAAA;AACpB,MAAA,UAAA,CAAW,MAAM;AACf,QAAA,MAAA,CAAO,QAAA,CAAS,CAAA,EAAG,QAAA,CAAS,IAAA,CAAK,eAAe,CAAC,CAAA;AACjD,QAAA,UAAA,CAAW,MAAM;AACf,UAAA,MAAA,CAAO,QAAA,CAAS,GAAG,CAAC,CAAA;AAAA,QACtB,GAAG,GAAG,CAAA;AAAA,MACR,GAAG,GAAG,CAAA;AAAA,IACR,GAAG,GAAG,CAAA;AAAA,EACR;AACF;AAMA,IAAI,WAAA,GAAc,IAAA;AAMlB,eAAe,gBAAA,GAAmB;AAChC,EAAA,IAAI,aAAa,OAAO,WAAA;AACxB,EAAA,IAAI;AACF,IAAA,MAAM,GAAA,GAAM,MAAM,KAAA,CAAM,cAAc,CAAA;AACtC,IAAA,MAAM,IAAA,GAAO,MAAM,GAAA,CAAI,IAAA,EAAK;AAC5B,IAAA,WAAA,GAAc,KACX,KAAA,CAAM,IAAI,EACV,GAAA,CAAI,CAAC,SAAS,IAAA,CAAK,IAAA,EAAM,CAAA,CACzB,OAAO,CAAC,IAAA,KAAS,QAAQ,IAAA,CAAK,UAAA,CAAW,MAAM,CAAC,CAAA;AACnD,IAAA,OAAO,WAAA;AAAA,EACT,SAAS,EAAA,EAAI;AACX,IAAA,WAAA,GAAc,EAAC;AACf,IAAA,OAAO,WAAA;AAAA,EACT;AACF;AAMA,eAAe,qBAAA,GAAwB;AACrC,EAAA,MAAM,IAAA,GAAO,MAAM,gBAAA,EAAiB;AACpC,EAAA,IAAI,CAAC,KAAK,MAAA,EAAQ;AAEhB,IAAA,OAAO,sDAAA;AAAA,EACT;AAEA,EAAA,MAAM,IAAA,GAAO,KAAK,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,IAAA,CAAK,MAAM,CAAC,CAAA;AAEzD,EAAA,IAAI,IAAA,CAAK,QAAA,CAAS,OAAO,CAAA,EAAG,OAAO,IAAA;AACnC,EAAA,IAAI,IAAA,CAAK,QAAA,CAAS,GAAG,CAAA,SAAU,IAAA,GAAO,OAAA;AACtC,EAAA,OAAO,IAAA,GAAO,OAAA;AAChB;AAMA,eAAsB,mBAAA,GAAsB;AAC1C,EAAA,MAAM,QAAA,GAAW,MAAM,qBAAA,EAAsB;AAC7C,EAAA,OAAO,IAAIA,uBAAY,QAAA,CAAS;AAAA,IAC9B,OAAA,EAAS,CAAC,6DAA6D,CAAA;AAAA,IACvE,QAAA;AAAA,IACA,OAAA,EAAS,KAAA;AAAA,IACT,IAAA,EAAM,QAAA;AAAA,IACN,QAAA,EAAU;AAAA,GACX,CAAA;AACH;AAOO,SAAS,eAAe,GAAA,EAAK;AAClC,EAAA,IAAI,GAAA;AACJ,EAAA,IAAI;AACF,IAAA,GAAA,GAAM,IAAI,IAAI,GAAG,CAAA;AAAA,EACnB,SAAS,CAAA,EAAG;AACV,IAAA,OAAO,KAAA;AAAA,EACT;AACA,EAAA,OAAO,GAAA,CAAI,QAAA,KAAa,OAAA,IAAW,GAAA,CAAI,QAAA,KAAa,QAAA;AACtD;AAMA,eAAsB,4BAAA,GAA+B;AACnD,EAAA,MAAM,EAAA,GAAK,MAAM,mBAAA,EAAoB;AACrC,EAAA,MAAM,cAAA,GAAiB,EAAA,CAAG,eAAA,CAAgB,QAAA,CAAS,IAAI,CAAA;AACvD,EAAA,IAAI,SAAA;AACJ,EAAA,IAAI,cAAA,EAAgB;AAClB,IAAA,MAAM,gBAAA,GAAmB,cAAA,CAAe,GAAA,IAAO,cAAA,CAAe,KAAK,cAAA,CAAe,CAAA;AAClF,IAAA,IAAI,gBAAA,EAAkB;AACpB,MAAA,MAAM,YAAA,GAAe,gBAAA,CAAiB,GAAA,CAAI,MAAA,IAAU,iBAAiB,MAAA,CAAO,MAAA;AAE5E,MAAA,IAAI,YAAA,EAAc;AAChB,QAAAC,uBAAA,CAAc,kBAAkB,YAAA,EAAc,EAAA,EAAI,SAAS,QAAQ,CAAA,CAAE,KAAK,mBAAmB,CAAA;AAAA,MAC/F,CAAA,MAAO;AACL,QAAA,IAAI;AAEF,UAAA,MAAM,KAAA,GAAQ,IAAI,GAAA,CAAI,gBAAA,CAAiB,KAAK,CAAA;AAC5C,UAAA,SAAA,GAAY,MAAM,QAAA,EAAS;AAAA,QAG7B,CAAA,CAAA,MAAQ;AAEN,UAAA,OAAA,CAAQ,GAAA,CAAI,eAAA,EAAiB,gBAAA,CAAiB,KAAK,CAAA;AAAA,QACrD;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAA,MAAO;AAEL,IAAA,SAAA,GAAYC,oBAAU,gBAAgB,CAAA;AAEtC,IAAA,MAAM,EAAA,GAAK,cAAc,KAAK,CAAA;AAC9B,IAAA,IAAI,cAAc,OAAA,EAAS;AACzB,MAAA,EAAA,CAAG,YAAA,CAAa,YAAY,MAAM,CAAA;AAClC,MAAA,EAAA,CAAG,WAAA,GAAc,aAAA;AAEjB,MAAA,MAAMC,sBAAM,GAAK,CAAA;AACjB,MAAA,MAAM,CAAA,GAAI,QAAA,CAAS,aAAA,CAAc,GAAG,CAAA;AAEpC,MAAA,IAAI,SAAA,CAAU,QAAA,CAAS,WAAW,CAAA,EAAG;AACnC,QAAA,SAAA,GAAY,mBAAmB,SAAS,CAAA;AAAA,MAC1C;AACA,MAAA,CAAA,CAAE,IAAA,GAAO,SAAA;AACT,MAAA,CAAA,CAAE,GAAA,GAAM,6BAAA;AACR,MAAA,CAAA,CAAE,MAAA,GAAS,QAAA;AACX,MAAA,CAAA,CAAE,SAAA,CAAU,GAAA,CAAI,KAAA,EAAO,QAAA,EAAU,eAAe,sBAAsB,CAAA;AACtE,MAAA,MAAM,cAAA,GAAiB,UAAU,SAAS,CAAA;AAC1C,MAAA,CAAA,CAAE,WAAA,GAAc,UAAU,cAAA,CAAe,IAAA;AACzC,MAAA,WAAA,CAAY,GAAG,EAAE,CAAA;AAAA,IACnB;AAAA,EACF;AACA,EAAA,OAAO,SAAA;AACT;AAKA,SAAS,mBAAA,GAAsB;AAC7B,EAAA,QAAA,CAAS,OAAO,QAAA,CAAS,QAAA;AAC3B;AAOO,SAAS,cAAc,GAAA,EAAK;AACjC,EAAA,MAAM,MAAA,GAAS,QAAA,CAAS,aAAA,CAAc,GAAG,CAAA;AACzC,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,wBAAA,EAA2B,GAAG,CAAA,qBAAA,CAAuB,CAAA;AAAA,EACrE;AACA,EAAA,OAAO,UAAU,EAAC;AACpB;AAOO,SAAS,WAAA,CAAY,YAAY,UAAA,EAAY;AAClD,EAAA,IAAI,CAAC,WAAW,UAAA,EAAY;AAC1B,IAAA,OAAA,CAAQ,GAAA,CAAI,YAAY,aAAa,CAAA;AACrC,IAAA,MAAM,CAAA,GAAI,QAAA,CAAS,aAAA,CAAc,KAAK,CAAA;AACtC,IAAA,CAAA,CAAE,YAAY,UAAU,CAAA;AAAA,EAC1B,CAAA,MAAO;AAEL,IAAA,UAAA,CAAW,UAAA,CAAW,YAAA,CAAa,UAAA,EAAY,UAAU,CAAA;AAAA,EAC3D;AACF;AAOO,SAAS,UAAU,IAAA,EAAM;AAC9B,EAAA,IAAI,CAAC,IAAA,EAAM;AACT,IAAA,IAAA,GAAO,QAAA,CAAS,IAAA;AAAA,EAClB;AACA,EAAA,MAAM,CAAA,GAAI,QAAA,CAAS,aAAA,CAAc,GAAG,CAAA;AACpC,EAAA,CAAA,CAAE,IAAA,GAAO,IAAA;AACT,EAAA,CAAA,CAAE,OAAO,CAAA,GAAI,WAAA,CAAY,IAAI,IAAI,CAAA;AACjC,EAAA,OAAO,CAAA;AACT;AAQO,SAAS,WAAA,CAAY,OAAO,MAAA,EAAQ;AACzC,EAAA,IAAI,CAAC,MAAA,EAAQ;AACX,IAAA,MAAA,GAAS,OAAO,QAAA,CAAS,MAAA;AAAA,EAC3B,CAAA,MAAA,IAAW,eAAA,CAAgB,IAAA,CAAK,MAAM,CAAA,EAAG;AACvC,IAAA,MAAA,GAAS,IAAI,GAAA,CAAI,MAAM,CAAA,CAAE,MAAA;AAAA,EAC3B;AACA,EAAA,IAAI,SAAA,GAAY,IAAI,eAAA,CAAgB,MAAM,CAAA;AAC1C,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,WAAA,CAAY,SAAS,CAAA;AACzC,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,QAAA,CAAS,IAAA,CAAK,UAAU,CAAC,CAAA;AAC7C,EAAA,SAAA,GAAY,IAAI,gBAAgB,IAAI,CAAA;AACpC,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,WAAA,CAAY,SAAS,CAAA;AACzC,EAAA,MAAM,IAAA,GAAO,MAAA,CAAO,MAAA,CAAO,IAAA,EAAM,IAAI,CAAA;AACrC,EAAA,IAAI,OAAO,SAAS,UAAA,EAAY;AAC9B,IAAA,OAAO,IAAA;AAAA,EACT;AACA,EAAA,IAAI,OAAO,KAAA,KAAU,QAAA,IAAY,IAAA,CAAK,KAAK,CAAA,EAAG;AAC5C,IAAA,OAAO,KAAK,KAAK,CAAA;AAAA,EACnB;AACA,EAAA,OAAO,MAAA;AACT;AAOO,SAAS,WAAA,GAAc;AAI5B,EAAA,IAAI,QAAA,CAAS,QAAA,CAAS,UAAA,CAAW,UAAU,GAAG,OAAO,IAAA;AAIrD,EAAA,IAAI,4DAA4D,IAAA,CAAK,MAAA,CAAO,QAAA,CAAS,IAAI,GAAG,OAAO,IAAA;AACnG,EAAA,OAAO,KAAA;AACT","file":"utils.cjs","sourcesContent":["import * as safelinkify from 'safelinkify/browser_module';\nimport { sleep } from '../../utils-browser.js';\nimport { getCookie, setCookieMins } from './cookie.js';\n\n/**\n * Scrolls the window to the top of the page with a sequence of scrolls for smoother effect.\n * Uses setTimeout to scroll to top, then to the middle, then back to top, each after 800ms.\n * Does nothing if not running in a browser environment.\n */\nexport function scrollToTop() {\n  if (typeof window !== 'undefined' && window.scrollTo) {\n    // window.scrollTo({ top: 0, behavior: 'smooth' });\n    setTimeout(() => {\n      window.scrollTo(0, 0);\n      setTimeout(() => {\n        window.scrollTo(0, document.body.scrollHeight / 2);\n        setTimeout(() => {\n          window.scrollTo(0, 0);\n        }, 800);\n      }, 800);\n    }, 800);\n  }\n}\n\n/**\n * Store the loaded sitemap URLs in memory for caching.\n * @type {string[]|null}\n */\nlet sitemapUrls = null;\n\n/**\n * Fetch and cache sitemap URLs from /sitemap.txt.\n * @returns {Promise<string[]>} Array of sitemap URLs.\n */\nasync function fetchSitemapUrls() {\n  if (sitemapUrls) return sitemapUrls;\n  try {\n    const res = await fetch('/sitemap.txt');\n    const text = await res.text();\n    sitemapUrls = text\n      .split('\\n')\n      .map((line) => line.trim())\n      .filter((line) => line && line.startsWith('http'));\n    return sitemapUrls;\n  } catch (_e) {\n    sitemapUrls = [];\n    return sitemapUrls;\n  }\n}\n\n/**\n * Get a random redirect base URL from the sitemap, or fallback to a default.\n * @returns {Promise<string>} The redirect base URL.\n */\nasync function getRandomRedirectBase() {\n  const urls = await fetchSitemapUrls();\n  if (!urls.length) {\n    // fallback to default\n    return 'https://www.webmanajemen.com/page/safelink.html?url=';\n  }\n  // Pick a random URL and append the safelink path if needed\n  const base = urls[Math.floor(Math.random() * urls.length)];\n  // Ensure it ends with / or ?url=\n  if (base.includes('?url=')) return base;\n  if (base.endsWith('/')) return base + '?url=';\n  return base + '?url=';\n}\n\n/**\n * Factory to get a safelink instance with a random redirect base.\n * @returns {Promise<safelinkify.safelink>} A safelink instance.\n */\nexport async function getSafelinkInstance() {\n  const redirect = await getRandomRedirectBase();\n  return new safelinkify.safelink({\n    exclude: [/([a-z0-9](?:[a-z0-9-]{1,61}[a-z0-9])?[.])*webmanajemen\\.com/],\n    redirect,\n    verbose: false,\n    type: 'base64',\n    password: 'unique-password'\n  });\n}\n\n/**\n * Validate if a string is a valid HTTP or HTTPS URL.\n * @param {string} str - The string to validate.\n * @returns {boolean} True if valid HTTP/HTTPS URL, false otherwise.\n */\nexport function isValidHttpUrl(str) {\n  let url;\n  try {\n    url = new URL(str);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === 'http:' || url.protocol === 'https:';\n}\n\n/**\n * Start decoding safelink from the current URL or cookie and handle redirection or value extraction.\n * Calls setCookieMins and refreshes the page if decoded, or replaces the go button if not.\n */\nexport async function decodeSafelinkQueryParameter() {\n  const sf = await getSafelinkInstance();\n  const parse_safelink = sf.resolveQueryUrl(location.href);\n  let urlResult;\n  if (parse_safelink) {\n    const value_from_query = parse_safelink.url || parse_safelink.o || parse_safelink.u;\n    if (value_from_query) {\n      const value_cookie = value_from_query.aes.decode || value_from_query.base64.decode;\n      // set cookie value and refresh without parameters\n      if (value_cookie) {\n        setCookieMins('safelink_value', value_cookie, 20, location.pathname).then(refreshWithoutParam);\n      } else {\n        try {\n          // check if query is url\n          const parse = new URL(value_from_query.value);\n          urlResult = parse.toString();\n          // redirect to url\n          // location.href = parse.toString();\n        } catch {\n          // the query is not valid url\n          console.log('cannot decode', value_from_query.value);\n        }\n      }\n    }\n  } else {\n    // get safelink value from cookie\n    urlResult = getCookie('safelink_value');\n    // Replace the go button with the decoded value\n    const go = querySelector('#go');\n    if (go instanceof Element) {\n      go.setAttribute('disabled', 'true');\n      go.textContent = 'Please Wait';\n      // wait 10 seconds\n      await sleep(10000);\n      const a = document.createElement('a');\n      // detect encoded protocol\n      if (urlResult.includes('%3A%2F%2F')) {\n        urlResult = decodeURIComponent(urlResult);\n      }\n      a.href = urlResult;\n      a.rel = 'nofollow noopener noreferer';\n      a.target = '_blank';\n      a.classList.add('btn', 'btn-sm', 'btn-success', 'text-decoration-none');\n      const parse_redirect = parse_url(urlResult);\n      a.textContent = 'goto ' + parse_redirect.host;\n      replaceWith(a, go);\n    }\n  }\n  return urlResult;\n}\n\n/**\n * Refresh the page without any URL parameters.\n */\nfunction refreshWithoutParam() {\n  location.href = location.pathname;\n}\n\n/**\n * Safe query selector that returns the element or an empty object if not found.\n * @param {string} str - The selector string.\n * @returns {Element|Object} The selected element or an empty object.\n */\nexport function querySelector(str) {\n  const select = document.querySelector(str);\n  if (!select) {\n    console.error(`document.querySelector(\"${str}\") is null, return {}`);\n  }\n  return select || {};\n}\n\n/**\n * Replace an old DOM element with a new one.\n * @param {Element} newElement - The new element to insert.\n * @param {Element} oldElement - The old element to be replaced.\n */\nexport function replaceWith(newElement, oldElement) {\n  if (!oldElement.parentNode) {\n    console.log(oldElement, 'parent null');\n    const d = document.createElement('div');\n    d.appendChild(oldElement);\n  } else {\n    //log(oldElement.parentNode.tagName);\n    oldElement.parentNode.replaceChild(newElement, oldElement);\n  }\n}\n\n/**\n * Parse a URL string to an HTMLAnchorElement and attach a query object.\n * @param {string} [href] - The URL to parse. Defaults to current location.\n * @returns {HTMLAnchorElement & {query: Object}} Anchor element with query property.\n */\nexport function parse_url(href) {\n  if (!href) {\n    href = location.href;\n  }\n  const l = document.createElement('a');\n  l.href = href;\n  l['query'] = parse_query({}, href);\n  return l;\n}\n\n/**\n * Parse query parameters from a URL or the current location, including hash.\n * @param {string|function} query - The query key to extract or a function to return all params.\n * @param {string} [search] - The search string or full URL. Defaults to current location.\n * @returns {Object|undefined} The query object, value, or undefined.\n */\nexport function parse_query(query, search) {\n  if (!search) {\n    search = window.location.search;\n  } else if (/^https?:\\/\\//i.test(search)) {\n    search = new URL(search).search;\n  }\n  let urlParams = new URLSearchParams(search);\n  const urlp = Object.fromEntries(urlParams);\n  const hash = window.location.hash.substring(1);\n  urlParams = new URLSearchParams(hash);\n  const urlh = Object.fromEntries(urlParams);\n  const urlO = Object.assign(urlh, urlp);\n  if (typeof query == 'function') {\n    return urlO;\n  }\n  if (typeof query === 'string' && urlO[query]) {\n    return urlO[query];\n  }\n  return undefined;\n}\n\n/**\n * Check if the current script is running on localhost or a local network.\n * Matches localhost, 127.0.0.1, or 192.168.* addresses.\n * @returns {boolean} True if running locally, false otherwise.\n */\nexport function islocalhost() {\n  // local hostname\n  //if (['adsense.webmanajemen.com', 'localhost', '127.0.0.1'].includes(location.hostname)) return true;\n  // local network\n  if (location.hostname.startsWith('192.168.')) return true;\n  // port defined\n  //if (location.port.length > 0) return true;\n  // pattern regex\n  if (/(localhost|127.0.0.1|192.168.[0-9]{1,3}\\.[0-9]{1,3}):?/gim.test(window.location.host)) return true;\n  return false;\n}\n"]}