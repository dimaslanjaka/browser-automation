{"version":3,"sources":["../src/SharedPrefs.js"],"names":["path","fs"],"mappings":"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","file":"SharedPrefs.cjs","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst instances = new Set();\n\n/**\n * Register shutdown hooks to save all SharedPrefs instances to disk.\n */\nfunction registerShutdownHook() {\n  const saveAll = () => {\n    for (const instance of instances) {\n      instance.saveToDisk();\n    }\n  };\n\n  process.once('exit', saveAll);\n  process.once('SIGINT', () => {\n    saveAll();\n    process.exit(0);\n  });\n  process.once('SIGTERM', () => {\n    saveAll();\n    process.exit(0);\n  });\n}\n\nlet shutdownHookRegistered = false;\n\n/**\n * SharedPrefs is a persistent key-value store similar to Android's SharedPreferences.\n */\nexport class SharedPrefs {\n  /** @type {string} */\n  #filePath;\n\n  /** @type {Record<string, any>} */\n  #prefs;\n\n  /** @type {boolean} */\n  #dirty = false;\n\n  /**\n   * @param {string} name - Preference file name (without extension)\n   * @param {string} [dir='.cache/shared_prefs'] - Directory to store preference files\n   */\n  constructor(name, dir = '.cache/shared_prefs') {\n    const folderPath = path.resolve(dir);\n    this.#filePath = path.join(folderPath, `${name}.json`);\n\n    if (!fs.existsSync(folderPath)) {\n      fs.mkdirSync(folderPath, { recursive: true });\n    }\n\n    this.#prefs = this.#load();\n\n    instances.add(this);\n    if (!shutdownHookRegistered) {\n      registerShutdownHook();\n      shutdownHookRegistered = true;\n    }\n  }\n\n  /**\n   * Load preference data from disk.\n   * @returns {Record<string, any>}\n   * @private\n   */\n  #load() {\n    if (!fs.existsSync(this.#filePath)) {\n      return {};\n    }\n    try {\n      return JSON.parse(fs.readFileSync(this.#filePath, 'utf-8'));\n    } catch {\n      return {};\n    }\n  }\n\n  /**\n   * Save the current preferences to disk if they have changed.\n   */\n  saveToDisk() {\n    if (this.#dirty) {\n      fs.writeFileSync(this.#filePath, JSON.stringify(this.#prefs, null, 2));\n      this.#dirty = false;\n    }\n  }\n\n  /**\n   * Get a stored value by key.\n   * @param {string} key\n   * @param {any} [defaultValue=null]\n   * @returns {any}\n   */\n  get(key, defaultValue = null) {\n    return Object.hasOwn(this.#prefs, key) ? this.#prefs[key] : defaultValue;\n  }\n\n  /**\n   * Set a value for a key (writes will be deferred until process exit).\n   * @param {string} key\n   * @param {any} value\n   */\n  set(key, value) {\n    this.#prefs[key] = value;\n    this.#dirty = true;\n  }\n\n  /**\n   * Remove a key from the preferences.\n   * @param {string} key\n   */\n  remove(key) {\n    delete this.#prefs[key];\n    this.#dirty = true;\n  }\n\n  /**\n   * Check if a key exists.\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return Object.hasOwn(this.#prefs, key);\n  }\n\n  /**\n   * Get all key-value pairs.\n   * @returns {Record<string, any>}\n   */\n  getAll() {\n    return { ...this.#prefs };\n  }\n\n  /**\n   * Clear all preferences.\n   */\n  clear() {\n    this.#prefs = {};\n    this.#dirty = true;\n  }\n}\n"]}