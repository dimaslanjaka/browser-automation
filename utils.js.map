{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import ansiColors from 'ansi-colors';\nimport { exec } from 'child_process';\nimport fs from 'fs-extra';\nimport moment from 'moment';\nimport nikParse from 'nik-parser-jurusid';\nimport path from 'node:path';\nimport readline from 'node:readline';\nimport { readfile } from 'sbg-utility';\nexport * from './utils-browser.js';\n\nexport function singleBeep() {\n  exec('[console]::beep(1000, 500)', { shell: 'powershell.exe' });\n}\n\nexport function multiBeep() {\n  exec('1..3 | %{ [console]::beep(1000, 500) }', { shell: 'powershell.exe' });\n}\n\n/**\n * Prompts the user to press Enter with an optional sound beep before continuing execution.\n *\n * @param {string} message - The message to display in the terminal prompt.\n * @param {boolean} [sound=true] - Whether to play a beep sound before prompting.\n * @returns {Promise<void>} A promise that resolves when the user presses Enter.\n */\nexport function waitEnter(message, sound = true) {\n  return new Promise(function (resolve) {\n    if (sound) singleBeep();\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    rl.question(message, () => {\n      rl.close(); // Close immediately after use\n      resolve();\n    });\n  });\n}\n\nexport const defaultLogFilePath = path.join(process.cwd(), '.cache/lastData.log');\n\n/**\n * Appends a log entry to the specified log file in the format:\n * `ISO_TIMESTAMP - MESSAGE: JSON_DATA`\n *\n * @param {any} data - The data to be logged. Will be serialized using `JSON.stringify`.\n * @param {string} [message='Processed Data'] - A label indicating the status or type of the log entry.\n * @param {string|null} [logFilePath=null] - The path to the log file. If `null`, defaults to `defaultLogFilePath`.\n */\nexport function appendLog(data, message = 'Processed Data', logFilePath = null) {\n  if (!logFilePath) logFilePath = defaultLogFilePath;\n  const logEntry = `${new Date().toISOString()} - ${message}: ${JSON.stringify(data)}\\n`;\n  fs.appendFileSync(logFilePath, logEntry, 'utf8');\n}\n\n/**\n * Reads and parses structured log entries from a log file.\n *\n * Each object includes:\n * - `timestamp`: ISO string\n * - `status`: normalized to 'processed', 'skipped', or 'invalid'\n * - `data`: parsed JSON or error\n * - `raw`: the original line string from the log\n *\n * @param {string|null} [logFilePath=null] - The path to the log file. If `null`, uses `defaultLogFilePath`.\n * @returns {Array<{timestamp: string, status: string, data: import('../globals').ExcelRowData, raw: string}>}\n */\nexport function getLogData(logFilePath = null) {\n  if (!logFilePath) logFilePath = defaultLogFilePath;\n  const log = readfile(logFilePath);\n\n  return log\n    .trim()\n    .split('\\n')\n    .map((line) => {\n      const match = line.match(/^(.+?) - ([^:]+): (.+)$/);\n      if (!match) {\n        return {\n          raw: line,\n          error: 'Invalid log line format'\n        };\n      }\n\n      const [_, timestamp, statusRaw, jsonStr] = match;\n\n      // Normalize status to lowercase keyword\n      const statusMap = {\n        'processed data': 'processed',\n        'skipped data': 'skipped',\n        'invalid data': 'invalid'\n      };\n      const status = statusMap[statusRaw.trim().toLowerCase()] || statusRaw.trim().toLowerCase();\n\n      let data;\n      try {\n        data = JSON.parse(jsonStr);\n      } catch (_e) {\n        data = { error: 'Invalid JSON', raw: jsonStr, line };\n      }\n\n      if (!data || typeof data !== 'object') {\n        throw new Error(\n          `Invalid data format at line ${log.split('\\n').indexOf(line)}: \"${line}\" (Log path: ${logFilePath})`\n        );\n      }\n      if (data.error) {\n        throw new Error(\n          `Error parsing log line at index ${log.split('\\n').indexOf(line)}: ${data.error}. Line: \"${line}\" (Log path: ${logFilePath})`\n        );\n      }\n\n      if (!data.parsed_nik && data.nik) {\n        // If parsed_nik is not present, parse the NIK\n        const nik_parser_result = nikParse(data.nik);\n        if (nik_parser_result.status === 'success') {\n          if (nik_parser_result.data) {\n            data.parsed_nik = nik_parser_result.data;\n          }\n        }\n        if (!data.parsed_nik) {\n          throw new Error(`NIK parsing failed for NIK: ${data.nik} at line: \"${line}\"`);\n        }\n      }\n\n      return {\n        timestamp,\n        status,\n        data,\n        raw: line // this is what you asked for\n      };\n    });\n}\n\n/**\n * Normalize and validate a birth date (e.g. from NIK) to DD/MM/YYYY format.\n *\n * @param {string} dateStr - Raw birth date string (e.g. from parsed NIK).\n * @param {string[]} formats - List of acceptable input date formats. eg: ['DD/MM/YYYY', 'YYYY-MM-DD', 'MM/DD/YYYY'].\n * @param {string} [context=''] - Optional context for clearer error messages.\n * @returns {string} - A normalized date string in DD/MM/YYYY format.\n * @throws Will throw an error if the input cannot be parsed with the given formats.\n */\nexport function enforceDateFormat(dateStr, formats, context = '') {\n  const parsed = moment(dateStr, formats, true);\n  if (!parsed.isValid()) {\n    throw new Error(\n      `❌ Invalid birth date format${context ? ` in ${context}` : ''}. Expected one of [${formats.join(', ')}], got: ${dateStr}`\n    );\n  }\n\n  if (!moment(dateStr, 'DD/MM/YYYY', true).isValid()) {\n    console.warn(`⚠️ Converted birth date to DD/MM/YYYY: ${parsed.format('DD/MM/YYYY')} (from: ${dateStr})`);\n  }\n\n  return parsed.format('DD/MM/YYYY');\n}\n\nfunction colorizeJson(value, indent = 2, level = 0) {\n  const space = ' '.repeat(indent * level);\n  if (value === null) return ansiColors.gray('null');\n  if (Array.isArray(value)) {\n    if (value.length === 0) return ansiColors.cyan('[]');\n    const items = value.map((item) => space + ' '.repeat(indent) + colorizeJson(item, indent, level + 1)).join(',\\n');\n    return ansiColors.cyan('[\\n') + items + '\\n' + space + ansiColors.cyan(']');\n  }\n  if (typeof value === 'object') {\n    const keys = Object.keys(value);\n    if (keys.length === 0) return ansiColors.cyan('{}');\n    const items = keys\n      .map(\n        (key) =>\n          space +\n          ' '.repeat(indent) +\n          ansiColors.green('\"' + key + '\"') +\n          ansiColors.cyan(': ') +\n          colorizeJson(value[key], indent, level + 1)\n      )\n      .join(',\\n');\n    return ansiColors.cyan('{\\n') + items + '\\n' + space + ansiColors.cyan('}');\n  }\n  if (typeof value === 'string') {\n    return ansiColors.yellow('\"' + value + '\"');\n  }\n  if (typeof value === 'number') {\n    return ansiColors.magenta(value);\n  }\n  if (typeof value === 'boolean') {\n    return ansiColors.blue(value);\n  }\n  return String(value);\n}\n\n/**\n * Logs one or more messages inline, overwriting the current line in the console.\n * Useful for progress indicators or status updates that should replace the previous message.\n * @function logInline\n * @param {...any} args - The messages to log inline. Objects and arrays will be JSON stringified.\n * @returns {void}\n */\nexport function logInline(...args) {\n  let output;\n  if (args.length > 1) {\n    output = args\n      .map((arg) => {\n        if (arg === null) {\n          return ansiColors.gray('null');\n        } else if (typeof arg === 'object' && arg !== null) {\n          try {\n            return colorizeJson(arg);\n          } catch (_e) {\n            return ansiColors.red('[Unserializable Object]');\n          }\n        } else if (typeof arg === 'number') {\n          return ansiColors.magenta(arg);\n        } else if (typeof arg === 'boolean') {\n          return ansiColors.blue(arg);\n        }\n        return String(arg);\n      })\n      .join(' ');\n  } else {\n    const message = args[0];\n    if (message === null) {\n      output = ansiColors.gray('null');\n    } else if (typeof message === 'object' && message !== null) {\n      try {\n        output = colorizeJson(message);\n      } catch (_e) {\n        output = ansiColors.red('[Unserializable Object]');\n      }\n    } else if (typeof message === 'number') {\n      output = ansiColors.magenta(message);\n    } else if (typeof message === 'boolean') {\n      output = ansiColors.blue(message);\n    } else {\n      output = String(message);\n    }\n  }\n  process.stdout.write(`\\r${output}`);\n  global.__lastLogWasInline = true;\n}\n\n/**\n * Logs one or more messages on a new line in the console.\n * Standard logging function for messages that should appear on separate lines.\n * @function logLine\n * @param {...any} args - The messages to log on a new line. Objects and arrays will be JSON stringified.\n * @returns {void}\n */\nexport function logLine(...args) {\n  let output;\n  if (args.length > 1) {\n    output = args\n      .map((arg) => {\n        if (arg === null) {\n          return ansiColors.gray('null');\n        } else if (typeof arg === 'object' && arg !== null) {\n          try {\n            return colorizeJson(arg);\n          } catch (_e) {\n            return ansiColors.red('[Unserializable Object]');\n          }\n        } else if (typeof arg === 'number') {\n          return ansiColors.magenta(arg);\n        } else if (typeof arg === 'boolean') {\n          return ansiColors.blue(arg);\n        }\n        return String(arg);\n      })\n      .join(' ');\n  } else {\n    const message = args[0];\n    if (message === null) {\n      output = ansiColors.gray('null');\n    } else if (typeof message === 'object' && message !== null) {\n      try {\n        output = colorizeJson(message);\n      } catch (_e) {\n        output = ansiColors.red('[Unserializable Object]');\n      }\n    } else if (typeof message === 'number') {\n      output = ansiColors.magenta(message);\n    } else if (typeof message === 'boolean') {\n      output = ansiColors.blue(message);\n    } else {\n      output = String(message);\n    }\n  }\n  // Only prepend a newline if the last log was inline\n  const prefix = global.__lastLogWasInline ? '\\n' : '';\n  process.stdout.write(`${prefix}${output}\\n`);\n  global.__lastLogWasInline = false;\n}\n"]}