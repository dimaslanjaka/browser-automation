{"version":3,"sources":["../../src/runner/sehatindonesiaku-data.ts"],"names":["LogDatabase","SharedPreferences","path","xlsx","downloadSheets","fs","moment","normalizePathUnix","minimist"],"mappings":"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","file":"sehatindonesiaku-data.cjs","sourcesContent":["import 'dotenv/config.js';\nimport fs from 'fs-extra';\nimport minimist from 'minimist';\nimport moment from 'moment';\nimport { normalizePathUnix } from 'sbg-utility';\nimport SharedPreferences from 'sbg-utility/dist/utils/SharedPreferences';\nimport path from 'upath';\nimport xlsx from 'xlsx';\nimport { LogDatabase } from '../database/LogDatabase.js';\nimport { downloadSheets } from '../utils/googleSheet.js';\nimport { DataItem } from './types.js';\n\nconst { MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_PORT } = process.env;\nlet sehatindonesiakuDb = new LogDatabase('sehatindonesiaku-kemkes', {\n  connectTimeout: 60000,\n  connectionLimit: 10,\n  host: MYSQL_HOST || 'localhost',\n  user: MYSQL_USER || 'root',\n  password: MYSQL_PASS || '',\n  port: Number(MYSQL_PORT) || 3306,\n  type: MYSQL_HOST ? 'mysql' : 'sqlite'\n});\n\nexport async function getSehatIndonesiaKuDb() {\n  if (!sehatindonesiakuDb) {\n    console.log('[DB] Creating sehatindonesiaku-kemkes pool');\n    sehatindonesiakuDb = new LogDatabase('sehatindonesiaku-kemkes', {\n      connectTimeout: 60000,\n      connectionLimit: 10,\n      host: MYSQL_HOST || 'localhost',\n      user: MYSQL_USER || 'root',\n      password: MYSQL_PASS || '',\n      port: Number(MYSQL_PORT) || 3306,\n      type: MYSQL_HOST ? 'mysql' : 'sqlite'\n    });\n  }\n  await sehatindonesiakuDb.waitReady();\n  return sehatindonesiakuDb;\n}\n\nexport function restartSehatIndonesiaKuDb() {\n  if (sehatindonesiakuDb) {\n    sehatindonesiakuDb\n      .close()\n      .then(() => {\n        console.log('[DB] Closed sehatindonesiaku-kemkes pool');\n      })\n      .catch(() => {\n        // Ignore close error\n      });\n  }\n  console.log('[DB] Restarting sehatindonesiaku-kemkes pool');\n  sehatindonesiakuDb = new LogDatabase('sehatindonesiaku-kemkes', {\n    connectTimeout: 60000,\n    connectionLimit: 10\n  });\n  return sehatindonesiakuDb;\n}\n\nexport async function closeSehatIndonesiaKuDb() {\n  if (sehatindonesiakuDb) {\n    await sehatindonesiakuDb.close();\n    sehatindonesiakuDb = undefined;\n    console.log('[DB] Closed sehatindonesiaku-kemkes pool');\n  }\n}\n\nexport const sehatindonesiakuPref = new SharedPreferences({ namespace: 'sehatindonesiaku-kemkes' });\nconst xlsxFile = path.join(process.cwd(), '.cache/sheets/sehatindonesiaku.xlsx');\nconst tanggal_pemeriksaan = sehatindonesiakuPref.getString('tanggal_pemeriksaan', '24/08/2025');\n\nprocess.on('SIGINT', async () => {\n  await closeSehatIndonesiaKuDb();\n  console.log('[DB] Closed sehatindonesiaku-kemkes pool (SIGINT)');\n  process.exit(0);\n});\nprocess.on('SIGTERM', async () => {\n  await closeSehatIndonesiaKuDb();\n  console.log('[DB] Closed sehatindonesiaku-kemkes pool (SIGTERM)');\n  process.exit(0);\n});\nprocess.on('exit', () => {\n  // Not async, but best effort\n  closeSehatIndonesiaKuDb();\n  console.log('[DB] Closed sehatindonesiaku-kemkes pool (exit)');\n});\n\n/**\n * Parse the 'Format Full' sheet from an XLSX file and return an array of data objects.\n *\n * Each row is mapped to a partial DataItem, with columns mapped as follows:\n * - NIK, Nama, Tanggal Lahir (parsed from NIK if possible), Jenis Kelamin, Nomor WhatsApp, Pekerjaan, Provinsi, Alamat.\n * - Additional columns are included as dynamic keys (e.g., 'Column 9').\n *\n * @param filePath - Path to the XLSX file. Defaults to the local sehatindonesiaku.xlsx file.\n * @param rangeIndex - 0-based row index to start parsing (default: 6, i.e., row 7)\n * @param rangeEndIndex - 0-based row index to end parsing (inclusive, optional)\n * @returns Promise resolving to an array of partial DataItem objects.\n * @throws If the 'Format Full' sheet is not found in the file.\n */\nexport async function parseXlsxFile(\n  filePath = xlsxFile,\n  rangeIndex = 6,\n  rangeEndIndex: number = Number.MAX_SAFE_INTEGER\n) {\n  const workbook = xlsx.readFile(filePath);\n  const sheetName = 'Format Full';\n  const sheet = workbook.Sheets[sheetName];\n  if (!sheet) {\n    throw new Error(`Sheet '${sheetName}' not found in file: ${filePath}`);\n  }\n  // Parse from row 7 (index 6) by default, no header\n  // Fix: Prevent infinite range if rangeEndIndex is too large\n  let sheetToJsonRange: string | number = rangeIndex;\n  const ref = sheet['!ref'];\n  let maxRow = Number.MAX_SAFE_INTEGER;\n  if (ref) {\n    const [, endCell] = ref.split(':');\n    maxRow = xlsx.utils.decode_cell(endCell).r;\n  }\n  // Clamp rangeEndIndex to maxRow\n  const effectiveEndIndex = Math.min(rangeEndIndex, maxRow);\n  if (typeof rangeEndIndex === 'number' && effectiveEndIndex >= rangeIndex) {\n    if (ref) {\n      const [, endCell] = ref.split(':');\n      const startCell = xlsx.utils.encode_cell({ c: 0, r: rangeIndex });\n      const endCol = xlsx.utils.decode_cell(endCell).c;\n      const endCellStr = xlsx.utils.encode_cell({ c: endCol, r: effectiveEndIndex });\n      sheetToJsonRange = `${startCell}:${endCellStr}`;\n    }\n  }\n  const data: any[] = xlsx.utils.sheet_to_json(sheet, {\n    header: 1,\n    defval: null,\n    range: sheetToJsonRange\n  });\n  const result: Partial<DataItem>[] = [];\n  for (const row of data) {\n    const obj: DataItem = {\n      tanggal_pemeriksaan,\n      nik: null,\n      nama: null,\n      nomor_wa: null,\n      tanggal_lahir: null,\n      jenis_kelamin: null,\n      pekerjaan: null,\n      provinsi: null,\n      alamat: null\n    };\n    if (!row || row.length === 0) {\n      continue; // Skip empty rows\n    }\n    for (let index = 0; index < row.length; index++) {\n      if (index === 0) {\n        // NIK\n        obj['nik'] = row[index];\n        continue;\n      } else if (index === 1) {\n        // Nama\n        obj['nama'] = row[index];\n        continue;\n      } else if (index === 2) {\n        // Tanggal Lahir\n        let tgl_lahir = row[index];\n        // Convert Excel date number to DD/MM/YYYY if needed\n        if (typeof tgl_lahir === 'number') {\n          const jsDate = new Date(Math.round((tgl_lahir - 25569) * 86400 * 1000));\n          tgl_lahir = jsDate.toLocaleDateString('en-GB'); // DD/MM/YYYY\n        }\n        obj['tanggal_lahir'] = tgl_lahir;\n        continue;\n      } else if (index === 3) {\n        // Jenis Kelamin / Gender\n        obj['jenis_kelamin'] = row[index];\n        continue;\n      } else if (index === 4) {\n        // Tanggal Pemeriksaan\n        let tglPemeriksaan = row[index];\n        // Convert Excel date number to DD/MM/YYYY if needed\n        if (typeof tglPemeriksaan === 'number') {\n          const jsDate = new Date(Math.round((tglPemeriksaan - 25569) * 86400 * 1000));\n          tglPemeriksaan = jsDate.toLocaleDateString('en-GB'); // DD/MM/YYYY\n        }\n        obj['tanggal_pemeriksaan'] = tglPemeriksaan;\n        continue;\n      } else if (index === 5) {\n        // Nomor WhatsApp (WA)\n        if (row[index] && String(row[index]).startsWith('+62')) {\n          obj['nomor_wa'] = String(row[index]);\n        } else if (row[index] && String(row[index]).startsWith('0')) {\n          obj['nomor_wa'] = '+62' + String(row[index]).substring(1);\n        } else if (row[index] && String(row[index]).toString().trim() !== '') {\n          obj['nomor_wa'] = '+62' + String(row[index]);\n        }\n        continue;\n      } else if (index === 6) {\n        // Pekerjaan\n        obj['pekerjaan'] = row[index];\n        continue;\n      } else if (index === 7) {\n        // Provinsi\n        obj['provinsi'] = row[index];\n        continue;\n      } else if (index === 8) {\n        // Alamat\n        obj['alamat'] = row[index];\n        continue;\n      } else if (index === 44) {\n        // Tinggi Badan\n        obj['tinggi_badan'] = row[index];\n        continue;\n      } else if (index === 45) {\n        // Berat Badan\n        obj['berat_badan'] = row[index];\n        continue;\n      } else if (index === 46) {\n        // Lingkar Perut\n        obj['lingkar_perut'] = row[index];\n        continue;\n      } else if (index === 47) {\n        // Sistolik\n        obj['sistolik'] = row[index];\n        continue;\n      } else if (index === 48) {\n        // Diastolik\n        obj['diastolik'] = row[index];\n        continue;\n      } else if (index === 49) {\n        // Gula Darah\n        obj['gula_darah'] = row[index];\n        continue;\n      }\n      obj[`Column ${index + 1}`] = row[index];\n    }\n    // FIXME: Search actual address\n    // try {\n    //   const address = (obj['alamat'] || '') + ' ' + (obj['provinsi'] || '');\n    //   obj['resolved_address'] = await resolveAddress(address);\n    // } catch {\n    //   // Handle address resolution error\n    // }\n    result.push(obj);\n  }\n  // Remove undefined or null or specific patterns values\n  return (\n    result\n      .map((item) => {\n        const cleanedItem: Partial<DataItem> = {};\n        for (const key in item) {\n          if (item[key] !== null && item[key] !== undefined && item[key] !== '+62null') {\n            cleanedItem[key] = item[key];\n          }\n        }\n        return cleanedItem;\n      })\n      // Filter out empty objects\n      .filter((item) => Object.keys(item).length > 0)\n  );\n}\n\nconst outPath = path.join(process.cwd(), '.cache/sheets/sehatindonesiaku-data.json');\nexport { outPath as sehatindonesiakuDataPath };\n\n/**\n * Downloads the Kemkes spreadsheet from Google Sheets, parses the \"Format Full\" sheet,\n * and writes the processed data as JSON to the cache directory.\n *\n * @param options - Options object\n * @param options.rangeIndex 0-based row index to start parsing (default: 6 → row 7)\n * @param options.rangeEndIndex 0-based row index to end parsing (inclusive, default: Number.MAX_SAFE_INTEGER)\n * @param options.spreadsheetId Optional Google Sheets spreadsheet ID. If not provided, falls back to `process.env.KEMKES_SPREADSHEET_ID`.\n * @param options.cache If true (default), use cache and skip download if up-to-date. If false, always download.\n * @returns Promise<void> Resolves when the process is complete.\n * @throws {Error} If neither a `spreadsheetId` argument nor the `KEMKES_SPREADSHEET_ID` environment variable is provided.\n */\nexport async function downloadAndProcessXlsx(\n  options: {\n    rangeIndex?: number;\n    rangeEndIndex?: number;\n    spreadsheetId?: string;\n    cache?: boolean;\n  } = {}\n) {\n  const { rangeIndex = 6, rangeEndIndex = Number.MAX_SAFE_INTEGER, spreadsheetId, cache = true } = options;\n  const resolvedSpreadsheetId = spreadsheetId || process.env.KEMKES_SPREADSHEET_ID;\n\n  if (!resolvedSpreadsheetId) {\n    throw new Error(\n      'Spreadsheet ID is required but not provided. ' +\n        'Pass it explicitly as an argument, or set the KEMKES_SPREADSHEET_ID environment variable.'\n    );\n  }\n\n  if (!cache) {\n    console.log('Cache is disabled. Forcing download of the spreadsheet.');\n  }\n\n  const downloadResult = await downloadSheets(resolvedSpreadsheetId, !cache);\n  const result = await parseXlsxFile(downloadResult.xlsxFilePath, rangeIndex, rangeEndIndex);\n  fs.ensureDirSync(path.dirname(outPath));\n  fs.writeFileSync(outPath, JSON.stringify(result, null, 2), 'utf-8');\n  console.log(`Parsed XLSX data (Format Full) written to: ${outPath}`);\n}\n\n/**\n * Loads data from the Excel JSON file.\n *\n * Reads the processed data from the `.cache/sheets/sehatindonesiaku-data.json` file\n * and returns it as an array of DataItem objects.\n *\n * @returns Promise resolving to an array of DataItem objects loaded from the Excel JSON file.\n */\nexport async function getExcelData() {\n  const rawData: DataItem[] = JSON.parse(fs.readFileSync(outPath, 'utf-8'));\n  return rawData;\n}\n\n/**\n * Loads data from the database and updates it with the latest Excel data if available.\n *\n * For each entry in the database, attempts to find a matching entry in the Excel data (by NIK).\n * If a match is found, updates the database entry with the Excel data and writes the updated entry back to the database.\n * Returns the resulting array of updated database entries.\n *\n * @returns Promise resolving to an array of DataItem objects, merged with the latest Excel data where available.\n */\nexport async function getDbData() {\n  const dbData = (await sehatindonesiakuDb.getLogs<DataItem>()).filter((item) => item && item.data);\n  // Fix update additional data from excel (when update)\n  for (let i = dbData.length - 1; i >= 0; i--) {\n    const item = dbData[i];\n    const excelItem = (await getExcelData()).find((row) => row.nik === item.data.nik);\n    if (excelItem) {\n      console.log(`Updating data for NIK: ${item.data.nik}`);\n      const newItem = { ...item, ...excelItem };\n      dbData[i] = newItem;\n      // Update database\n      await sehatindonesiakuDb.addLog<DataItem>({\n        id: item.data.nik,\n        data: newItem,\n        message: item.message\n      });\n    }\n  }\n  return dbData;\n}\n\n/**\n * Ensures a valid WhatsApp number exists in the Kemkes data item.\n *\n * If the `nomor_wa` field is missing or falsy, sets it to a default value.\n *\n * @param item - Partial DataItem object to fix.\n * @returns The updated Partial<DataItem> with a valid `nomor_wa` field.\n */\nexport function fixKemkesDataItem(item: Partial<DataItem>): Partial<DataItem> {\n  if (!item.nomor_wa) {\n    item.nomor_wa = '81316270797';\n  }\n  if (item.nomor_wa && String(item.nomor_wa).startsWith('0')) {\n    item.nomor_wa = '+62' + String(item.nomor_wa).substring(1);\n  } else if (item.nomor_wa && !String(item.nomor_wa).startsWith('+62')) {\n    item.nomor_wa = '+62' + String(item.nomor_wa);\n  }\n  // Set default tanggal_pemeriksaan if missing\n  if (!item.tanggal_pemeriksaan) {\n    item.tanggal_pemeriksaan = moment().format('DD/MM/YYYY');\n  }\n  return item;\n}\n\nexport function showHelp() {\n  const [node, script] = process.argv;\n  console.log(`Usage: ${normalizePathUnix(node)} ${normalizePathUnix(script)} [options]\\n`);\n  console.log('Options:');\n  console.log('  --start <row>    Start row index (default: 320)');\n  console.log('  --end <row>      End row index (default: 500)');\n  console.log('  --cache          Use cache (default: true). If set to false, always download the spreadsheet.');\n  console.log('  --nc, --no-cache Alias for --cache false (no cache, always download)');\n  console.log('  --help, -h       Show this help message');\n}\n\nif (process.argv.some((arg) => /sehatindonesiaku-data\\.(ts|mjs|js|cjs)$/.test(arg))) {\n  (async () => {\n    const cliArgs = minimist(process.argv.slice(2), {\n      alias: { h: 'help', nc: 'cache' }, // `--nc` works as shorthand\n      default: { cache: true } // cache enabled unless explicitly disabled\n    });\n    if (cliArgs.help) {\n      showHelp();\n      process.exit(0);\n    }\n    // Convert user input (Excel row numbers, 1-based) to 0-based indices for parsing\n    const start = cliArgs.start !== undefined && !isNaN(parseInt(cliArgs.start)) ? parseInt(cliArgs.start) - 1 : 315;\n    let end: number;\n    if (typeof cliArgs.end === 'string' && cliArgs.end.toLowerCase() === 'max') {\n      end = Number.MAX_SAFE_INTEGER;\n    } else if (cliArgs.end !== undefined && !isNaN(parseInt(cliArgs.end))) {\n      end = parseInt(cliArgs.end) - 1;\n    } else {\n      end = 1000;\n    }\n    if (end < start) {\n      throw new Error(`Invalid range: end (${end + 1}) cannot be less than start (${start + 1})`);\n    }\n\n    const cache = cliArgs.cache !== false;\n\n    console.log(`Downloading and processing XLSX with range ${start + 1}-${end + 1}...`);\n    // download excel and parse with range 320-500\n    await downloadAndProcessXlsx({ rangeIndex: start, rangeEndIndex: end, cache: cache });\n  })();\n}\n"]}