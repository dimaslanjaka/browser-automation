{"version":3,"sources":["../../src/runner/sehatindonesiaku-kehadiran.ts"],"names":["minimist","normalizePathUnix","getSehatIndonesiaKuDb","getPuppeteer","array_shuffle","UnauthorizedError","ErrorDataKehadiranNotFound","array_unique","sleep","fs","sehatindonesiakuDataPath","enterSehatIndonesiaKu","waitForDomStable","item","clickElementByText","ElementNotFoundError","isElementExist","anyElementWithTextExists"],"mappings":"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","file":"sehatindonesiaku-kehadiran.cjs","sourcesContent":["import fs from 'fs-extra';\nimport minimist from 'minimist';\nimport { Page } from 'puppeteer';\nimport { array_shuffle, array_unique, normalizePathUnix } from 'sbg-utility';\nimport { ElementNotFoundError } from '../puppeteer-errors.cjs';\nimport {\n  anyElementWithTextExists,\n  clickElementByText,\n  getPuppeteer,\n  isElementExist,\n  waitForDomStable\n} from '../puppeteer_utils.js';\nimport { sleep } from '../utils-browser.js';\nimport { getSehatIndonesiaKuDb, sehatindonesiakuDataPath } from './sehatindonesiaku-data.js';\nimport { DataItem } from './types.js';\nimport { ErrorDataKehadiranNotFound, UnauthorizedError } from './sehatindonesiaku-errors.js';\nimport { enterSehatIndonesiaKu } from './sehatindonesiaku-utils.js';\nimport { LogDatabase } from '../database/LogDatabase.js';\n\nconst args = minimist(process.argv.slice(2), {\n  boolean: ['help', 'single', 'shuffle'],\n  alias: { h: 'help', s: 'single', sh: 'shuffle' }\n});\n\nexport function showHelp() {\n  const [node, script] = process.argv;\n  console.log(`[hadir] Usage: ${normalizePathUnix(node)} ${normalizePathUnix(script)} [options]`);\n  console.log('[hadir]', '');\n  console.log('[hadir]', 'Options:');\n  console.log('[hadir]', '  -h, --help     Show help');\n  console.log('[hadir]', '  -s, --single   Process a single item');\n  console.log('[hadir]', '  -sh, --shuffle      Shuffle the order of data items before processing');\n}\n\nif (process.argv.some((arg) => /sehatindonesiaku-kehadiran\\.(cjs|js|mjs|ts)$/i.test(arg))) {\n  (async () => {\n    // Show help if -h or --help is passed\n    if (args.h || args.help) {\n      showHelp();\n      return;\n    }\n    let db: LogDatabase;\n    try {\n      db = await getSehatIndonesiaKuDb();\n      await main(db);\n    } finally {\n      if (db) await db.close();\n    }\n  })();\n}\n\nasync function main(db: LogDatabase) {\n  const puppeteer = await getPuppeteer();\n  // Prepare data to process\n  let allData = await getData(db);\n  // Shuffle data if --shuffle is passed\n  if (args.shuffle || args.sh) {\n    allData = array_shuffle(allData);\n  }\n  // If --single or -s is passed, keep only the first item\n  if (args.single || args.s) {\n    if (allData.length > 1) {\n      allData.splice(1); // Keep only the first item\n    }\n  }\n  console.log(`[hadir] Processing ${allData.length} items...`);\n  for (const item of allData) {\n    if (!item.nik) {\n      console.error(`[hadir] Skipping item with missing NIK: ${JSON.stringify(item)}`);\n      continue;\n    }\n    try {\n      if ((await puppeteer.browser.pages()).length > 3) {\n        // Close first page\n        const pages = await puppeteer.browser.pages();\n        await pages[0].close();\n      }\n      await processData(await puppeteer.browser.newPage(), item, db);\n    } catch (e) {\n      if (e instanceof UnauthorizedError) {\n        console.error(\n          '[hadir]',\n          `${item.nik} - UnauthorizedError: Login required. Please login first using sehatindonesiaku-login. (close browser and rerun the script after login)`\n        );\n        break; // Stop processing further if unauthorized\n      }\n      if (e instanceof ErrorDataKehadiranNotFound) {\n        console.error(`[hadir] ${item.nik} - Error: Data Kehadiran not found.`);\n        const message = ((await db.getLogById(item.nik))?.message ?? '').split(',');\n        message.push('Data Kehadiran not found');\n        await db.addLog({\n          id: item.nik,\n          data: { ...item, hadir: false },\n          message: array_unique(message).join(',')\n        });\n        continue; // Continue to next item\n      }\n      console.error(`[hadir] ${item.nik} - Error processing data: ${(e as Error).message}`);\n      console.error('[hadir]', (e as Error).stack);\n    }\n    if (args.single || args.s) break; // Process only one item\n  }\n\n  console.log('[hadir]', 'All data processed. Closing browser...');\n  await sleep(2000);\n  await puppeteer.browser.close();\n  process.exit(0);\n}\n\nasync function getExcelData(db: LogDatabase) {\n  const rawData: DataItem[] = JSON.parse(fs.readFileSync(sehatindonesiakuDataPath, 'utf-8'));\n  for (let i = rawData.length - 1; i >= 0; i--) {\n    const item = rawData[i];\n    if (item.nik && typeof item.nik === 'string' && item.nik.trim().length === 16) {\n      // Merge DB data if exists\n      const dbItem = await db.getLogById(item.nik);\n      let merged = { ...item };\n      if (dbItem && dbItem.data) {\n        merged = { ...merged, ...dbItem.data };\n      }\n      if (!('registered' in merged)) {\n        // Remove unregistered participants\n        rawData.splice(i, 1);\n        console.log(`[hadir] ${item.nik}: ${item.nama} - Exclude unregistered`);\n      }\n    } else {\n      // Remove invalid NIK\n      rawData.splice(i, 1);\n    }\n  }\n  return rawData;\n}\n\nexport interface DataOptions {\n  shuffle?: boolean;\n  single?: boolean;\n}\n\n/**\n * Retrieves a filtered list of data items to process for kehadiran (attendance).\n *\n * The function sources data either from the database logs or from Kemkes data,\n * depending on the `type` option provided. It then filters the data to include only items:\n * - Whose `data` property exists and contains a non-empty `nik` value.\n * - That do not already have the `hadir` property in their `data` (i.e., not yet marked as hadir).\n *\n * The returned list can be shuffled or limited to a single item based on the options.\n *\n * @param options Optional configuration for data retrieval:\n *   - shuffle: If true, randomizes the order of the returned items.\n *   - single: If true, returns only the first item after filtering (useful for single processing).\n *   - type: Source of data, either 'db' (database logs) or 'excel' (Kemkes data). Defaults to 'excel'.\n * @returns Promise resolving to an array of DataItem objects to process.\n */\nasync function getData(db: LogDatabase, options?: DataOptions): Promise<DataItem[]> {\n  const defaultOptions: DataOptions = { shuffle: false, single: false };\n  options = { ...defaultOptions, ...options };\n  const data = await getExcelData(db);\n  console.log(`[hadir] Total data items retrieved: ${data.length}`);\n  let filtered = data.filter((item) => {\n    if (!item || typeof item.nik !== 'string' || item.nik.length === 0) return false;\n    // Allow if 'hadir' is missing\n    if (!('hadir' in item)) return true;\n    return false;\n  });\n  console.log(`[hadir] Total filtered data items: ${filtered.length}`);\n  if (options.shuffle) {\n    filtered = array_shuffle(filtered);\n  }\n  if (options.single) {\n    return filtered.slice(0, 1);\n  }\n  return filtered;\n}\n\nasync function processData(page: Page, item: DataItem, db: LogDatabase) {\n  const isLoggedIn = await enterSehatIndonesiaKu(page);\n  if (!isLoggedIn) throw new UnauthorizedError();\n  await page.goto('https://sehatindonesiaku.kemkes.go.id/ckg-pendaftaran-individu', { waitUntil: 'networkidle2' });\n  await waitForDomStable(page, 2000, 5000);\n  await searchNik(page, item.nik);\n  // Check if data not found\n  const isNoDataFound = await page.evaluate(() => {\n    const el = document.querySelectorAll('.table-individu-terdaftar .font-bold');\n    if (el.length === 0) return false;\n    return Array.from(el).some(\n      (item) => (item as HTMLElement).innerText.trim().toLowerCase() === 'data tidak ditemukan'\n    );\n  });\n  console.log(`[hadir] ${item.nik} - isNoDataFound: ${isNoDataFound}`);\n  if (isNoDataFound) {\n    throw new ErrorDataKehadiranNotFound(item.nik);\n  }\n  if (await checkAlreadyHadir(page, item, db)) {\n    return;\n  }\n  // Click <button type=\"button\" class=\"w-fill btn-fill-primary h-11\"><div class=\"flex flex-row justify-center gap-2\"><!----><div class=\"tracking-wide\">Konfirmasi Hadir <!----></div></div></button>\n  if (!(await clickElementByText(page, 'button.w-fill', 'Konfirmasi Hadir'))) {\n    throw new ElementNotFoundError('Konfirmasi Hadir button not found or not clickable');\n  }\n  await waitForDomStable(page, 2000, 10000);\n  await sleep(1000);\n  // Check checkbox <div><input id=\"verify\" name=\"verify\" type=\"checkbox\" class=\"\" value=\"false\"><div id=\"verify\" class=\"check\"></div></div>\n  console.log(`[hadir] ${item.nik} - checking hadir checkbox`);\n  let checkboxFound = false;\n  for (const verifyCheckboxSelector of ['div#verify', '[name=\"verify\"]']) {\n    if (await isElementExist(page, verifyCheckboxSelector, { visible: true })) {\n      const el = await page.evaluateHandle((selector) => {\n        const checkbox = document.querySelector(selector) as HTMLInputElement;\n        if (checkbox) {\n          checkbox.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });\n        }\n        return checkbox;\n      }, verifyCheckboxSelector);\n      await el.click();\n      // await page.evaluate(() => {\n      //   const checkbox = document.querySelector('input#verify') as HTMLInputElement;\n      //   // Scroll to checkbox\n      //   if (checkbox) {\n      //     checkbox.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });\n      //   }\n      //   // Click checkbox if not already checked\n      //   if (checkbox && !checkbox.checked) {\n      //     checkbox.click();\n      //     // Trigger change event\n      //     const event = new Event('change', { bubbles: true });\n      //     checkbox.dispatchEvent(event);\n      //   }\n      // });\n      await waitForDomStable(page, 2000, 10000);\n      checkboxFound = true;\n      break;\n    } else {\n      console.log(`[hadir] ${item.nik} - ${verifyCheckboxSelector} checkbox not found`);\n    }\n  }\n\n  if (!checkboxFound) {\n    throw new ElementNotFoundError('Checkbox verify not found');\n  }\n\n  // Click hadir button <button type=\"button\" class=\"w-fill btn-fill-primary h-11\"><div class=\"flex flex-row justify-center gap-2\"><!----><div class=\"tracking-wide\">Hadir <!----></div></div></button>\n  await clickElementByText(page, 'button.w-fill', 'Hadir');\n  await waitForDomStable(page, 2000, 10000);\n  // Click tutup button on modal <div class=\"flex flex-row justify-center gap-2\"><!----><div class=\"tracking-wide\">Tutup <!----></div></div>\n  await clickElementByText(page, 'div.flex.flex-row.justify-center.gap-2', 'Tutup');\n  await waitForDomStable(page, 2000, 10000);\n  console.log(`[hadir] ${item.nik} - hadir confirmed`);\n  const message = ((await db.getLogById(item.nik))?.message ?? '').split(',');\n  message.push('Data hadir confirmed');\n  await db.addLog({\n    id: item.nik,\n    data: { ...item, hadir: true },\n    message: array_unique(message).join(',')\n  });\n}\n\nexport async function searchNik(page: Page, nik: string) {\n  console.log(`[hadir] ${nik} - change search type to NIK`);\n  // Select search dropdown <div data-v-c491f920=\"\" class=\"h-[2.9rem] w-full flex cursor-pointer items-center justify-start overflow-hidden border-none bg-transparent pl-4 text-sm focus:outline-none text-black\">Nomor Tiket</div>\n  await clickElementByText(page, 'div.cursor-pointer', 'Nomor Tiket');\n  await sleep(200);\n  await clickElementByText(page, 'div.cursor-pointer', 'NIK');\n  // Search for NIK <input id=\"nik\" type=\"text\" class=\"form-input border-gray-3 focus-within:border-black pl-12 border-rd-r-lg border-rd-l-0\" name=\"NIK\" placeholder=\"Masukkan NIK\" autocomplete=\"off\" maxlength=\"19\">\n  await page.focus('#nik');\n  await page.type('#nik', nik, { delay: 100 });\n  // Press enter on input\n  await page.keyboard.press('Enter');\n  await waitForDomStable(page, 2000, 10000);\n  await sleep(1000);\n}\n\nexport async function checkAlreadyHadir(page: Page, item: DataItem, db: LogDatabase) {\n  // Check sudah hadir text <div data-v-7b617409=\"\" class=\"w-[50%] lt-sm:w-full text-[12px] font-600 text-[#16B3AC] flex items-center gap-2 justify-center\"><img data-v-7b617409=\"\" src=\"/images/icons/icon-success.svg\" class=\"w-[13.33px] h-[13.33px]\"> Sudah Hadir </div>\n  if (await anyElementWithTextExists(page, 'div.w-full', 'Sudah Hadir')) {\n    console.log(`[hadir] ${item.nik} - already marked as hadir`);\n    const message = ((await db.getLogById(item.nik))?.message ?? '').split(',');\n    message.push('Data sudah hadir');\n    await db.addLog({\n      id: item.nik,\n      data: { ...item, hadir: true },\n      message: array_unique(message).join(',')\n    });\n    return true;\n  }\n  return false;\n}\n\nexport { getData as getKehadiranData, main as mainKehadiran, processData as processKehadiranData };\n"]}