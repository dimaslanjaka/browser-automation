{"version":3,"sources":["../../src/runner/skrin2.js"],"names":["minimist","fixData","getNumbersOnly","getLogById","logLine","enterSkriningPage","waitForDomStable","iframe","iframeSelector","selector","sleep","typeAndTriggerIframe","validateAndRetryIframeInput","isIframeElementVisible","clickIframeElement","waitEnter","moment","ucwords","extractNumericWithComma","logInline","getFormValuesFromFrame","isElementVisible","addLog","getPuppeteer","skrinLogin","loadCsvData","parseBabyName","ansiColors","nikUtils"],"mappings":"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","file":"skrin2.cjs","sourcesContent":["import 'dotenv/config';\nimport moment from 'moment';\nimport * as nikUtils from 'nik-parser-jurusid/index';\nimport { loadCsvData, parseBabyName } from '../../data/index.js';\nimport { addLog, getLogById } from '../database/SQLiteLogDatabase.js';\nimport {\n  clickIframeElement,\n  getFormValuesFromFrame,\n  getPuppeteer,\n  isElementVisible,\n  isIframeElementVisible,\n  typeAndTriggerIframe,\n  validateAndRetryIframeInput,\n  waitForDomStable\n} from '../puppeteer_utils.js';\nimport { enterSkriningPage, skrinLogin } from '../skrin_puppeteer.js';\nimport { extractNumericWithComma, getNumbersOnly, logInline, logLine, sleep, waitEnter } from '../utils.js';\nimport { ucwords } from '../utils/string.js';\nimport { fixData } from '../xlsx-helper.js';\nimport minimist from 'minimist';\nimport ansiColors from 'ansi-colors';\n\nconsole.clear();\n\nconst cliArgs = minimist(process.argv.slice(2), {\n  boolean: ['help', 'shuffle'],\n  alias: {\n    h: 'help',\n    sh: 'shuffle'\n  }\n});\n\nfunction showHelp() {\n  console.log(`\n    Usage: node skrin2.js [options]\n\n    Options:\n      -h, --help        Show help\n      -sh, --shuffle    Shuffle the data\n  `);\n}\n\n/**\n * Processes a single data entry in the skrining workflow.\n *\n * @async\n * @param {import('puppeteer').Page} page - Puppeteer page instance to operate on.\n * @param {import('../../globals.js').ExcelRowData} data - A single data row from getDataRange (already fixed by fixData).\n * @returns {Promise<void>} Resolves when processing is complete.\n */\nasync function processData(page, data) {\n  const fixedData = await fixData(data);\n  const NIK = getNumbersOnly(fixedData.nik);\n  const cachedData = getLogById(NIK);\n  if (cachedData && cachedData.data && cachedData.data.status === 'success') {\n    logLine(`Data for NIK: ${NIK} already processed. Skipping...`);\n    return;\n  }\n\n  logLine('Processing', fixedData);\n\n  const iframeSelector = '.k-window-content iframe.k-content-frame';\n\n  await enterSkriningPage(page, false);\n\n  // Wait for the dialog window iframe to appear\n  await page.waitForSelector(iframeSelector, { visible: true, timeout: 30000 });\n  await waitForDomStable(page, 3000, 30000);\n\n  // Wait for the iframe to load and the datepicker element to be ready\n  await page.waitForFunction(\n    () => {\n      const iframe = document.querySelector('.k-window-content iframe.k-content-frame');\n      if (!iframe || !iframe.contentDocument) return false;\n\n      const datePickerElement = iframe.contentDocument.getElementById('dt_tgl_skrining');\n      return datePickerElement !== null;\n    },\n    { timeout: 30000 }\n  );\n\n  logLine('Iframe loaded and datepicker element is ready');\n\n  // Get the iframe element and its content frame\n  const iframeElement = await page.$(iframeSelector);\n  const iframe = await iframeElement.contentFrame();\n  const iframeType = async (selector, value) => {\n    // Skip if element is hidden\n    const isVisible = await iframe.$eval(selector, (el) => {\n      const style = window.getComputedStyle(el);\n      return style && style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n    });\n    if (!isVisible) {\n      logLine(`Element ${selector} is not visible, skipping typing.`);\n      return;\n    }\n    // Scroll to the element before typing\n    await iframe.$eval(selector, (el) => el.scrollIntoView({ behavior: 'auto', block: 'center' }));\n    // Focus the element before typing\n    await iframe.focus(selector);\n    // Reset existing value before typing\n    await page.evaluate(\n      (iframeSelector, selector) => {\n        const iframe = document.querySelector(iframeSelector);\n        const element = iframe.contentDocument.querySelector(selector);\n        element.value = '';\n        element.dispatchEvent(new iframe.contentWindow.Event('input', { bubbles: true }));\n      },\n      iframeSelector,\n      selector\n    );\n    // Type the value into the input field\n    await iframe.type(selector, value, { delay: 100 });\n    // Trigger input and change events\n    await iframe.$eval(selector, (el) => {\n      const event = new Event('change', { bubbles: true });\n      el.dispatchEvent(event);\n    });\n    // Wait for the input to stabilize\n    await sleep(1000);\n  };\n\n  const tanggalEntry = fixedData['TANGGAL ENTRY'] || fixedData.tanggal;\n\n  // Set the date value in the iframe's datepicker element\n\n  if (tanggalEntry) {\n    await iframe.focus('#dt_tgl_skrining');\n    await iframe.$eval('#dt_tgl_skrining', (e) => e.removeAttribute('readonly'));\n    await typeAndTriggerIframe(page, iframeSelector, '#dt_tgl_skrining', tanggalEntry);\n\n    // More robust event triggering for datepicker\n    await iframe.$eval('#dt_tgl_skrining', (el) => {\n      // Trigger multiple events to ensure compatibility with different datepicker implementations\n      const events = ['input', 'change', 'blur', 'keyup', 'keydown'];\n      events.forEach((eventType) => {\n        const event = new Event(eventType, { bubbles: true, cancelable: true });\n        el.dispatchEvent(event);\n      });\n\n      // Also trigger jQuery events if jQuery is available\n      if (typeof window.$ !== 'undefined' && window.$(el).length) {\n        window.$(el).trigger('change').trigger('blur');\n      }\n    });\n\n    await sleep(500); // Allow events to propagate\n    await iframe.$eval('#dt_tgl_skrining', (e) => e.setAttribute('readonly', 'true'));\n\n    // Validate that the date was properly set\n    const dateValidated = await validateAndRetryIframeInput(page, iframeSelector, '#dt_tgl_skrining', tanggalEntry, {\n      maxRetries: 2,\n      retryDelay: 1000\n    });\n\n    if (dateValidated) {\n      logLine(`Date ${tanggalEntry} successfully applied to #dt_tgl_skrining`);\n    } else {\n      logLine(`Warning: Date ${tanggalEntry} may not have been properly applied to #dt_tgl_skrining`);\n    }\n\n    await sleep(1500); // Extended wait for the datepicker to process the input\n    await waitForDomStable(page, 3000, 30000);\n  }\n\n  // Insert default skrining inputs\n\n  await iframeType('#field_item_metode_id input[type=\"text\"]', 'Tunggal');\n  await iframeType('input[name=\"tempat_skrining_id_input\"]', 'Puskesmas');\n  await typeAndTriggerIframe(page, iframeSelector, '#nik', NIK);\n\n  await sleep(4000); // Wait for the NIK input to process\n  await waitForDomStable(page, 3000, 30000);\n\n  const isInvalidAlertVisible = async () =>\n    await isIframeElementVisible(page, iframeSelector, '.k-widget.k-tooltip.k-tooltip-validation.k-invalid-msg');\n  const isIdentityModalVisible = async () =>\n    await isIframeElementVisible(page, iframeSelector, '.k-widget.k-window.k-window-maximized');\n  const isNikErrorVisible = async () => await isIframeElementVisible(page, iframeSelector, '.k-notification-error');\n  const isNIKNotFoundModalVisible = async () =>\n    await isIframeElementVisible(page, iframeSelector, '[aria-labelledby=\"dialogconfirm_wnd_title\"]');\n\n  // Check NIK not found modal visibility\n  let isManualInput = false;\n  if (await isNIKNotFoundModalVisible()) {\n    // NIK not found, handle confirmation modal then proceed with manual input\n    logLine(`Confirmation modal is visible - Data tidak ditemukan`);\n\n    // You can check for specific buttons too\n    const hasYesButton = await isIframeElementVisible(page, iframeSelector, '#yesButton');\n    const hasNoButton = await isIframeElementVisible(page, iframeSelector, '#noButton');\n\n    if (hasYesButton && hasNoButton) {\n      logLine(`Both Yes and No buttons are available`);\n      // Here you can click on the appropriate button\n\n      // Click the Yes button to continue with manual input\n      const clickSuccess = await clickIframeElement(page, iframeSelector, '#yesButton');\n\n      if (clickSuccess) {\n        logLine(`Successfully clicked Yes button - continuing with manual input`);\n        isManualInput = true;\n      } else {\n        logLine(`Failed to click Yes button`);\n      }\n    }\n  } else if (await isIdentityModalVisible()) {\n    // NIK is already registered, handle identity confirmation modal\n    logLine(`Identity modal is visible - NIK is already registered. Confirming identity...`);\n\n    const innerFrameElement = await iframe.$('#dialog iframe.k-content-frame');\n    const innerFrameContent = await innerFrameElement.contentFrame();\n    await innerFrameContent.waitForSelector('body', { visible: true, timeout: 10000 });\n    const pilihBtn = await innerFrameContent.$('#pilih');\n    if (pilihBtn) {\n      const isVisible = await innerFrameContent\n        .$eval('#pilih', (el) => {\n          const style = window.getComputedStyle(el);\n          return style && style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n        })\n        .catch(() => false);\n      if (isVisible) {\n        await innerFrameContent.$eval('#pilih', (el) => el.scrollIntoView({ behavior: 'smooth', block: 'end' }));\n        await pilihBtn.click({ delay: 100 });\n        logLine('Clicked pilih button to confirm identity.');\n      } else {\n        throw new Error('Pilih button is not visible in identity modal.');\n      }\n    } else {\n      throw new Error('Pilih button not found in identity modal.');\n    }\n    // Refactored: Check if #pilih is still visible after clicking\n    const pilihStillVisible = await innerFrameContent\n      .$eval('#pilih', (el) => !!el && el.offsetParent !== null)\n      .catch(() => false);\n    if (pilihStillVisible) {\n      await waitEnter(\n        'Pilih button still visible after clicking. Please resolve the identity confirmation manually, then press Enter to continue...'\n      );\n    }\n  }\n\n  // Check if manual is false and province, kabupaten, kecamatan, and kelurahan are already filled\n  if (!isManualInput) {\n    logLine(`NIK: ${NIK} is already registered, skipping manual input.`);\n    // Check if gender field is empty to determine if form is filled\n    const isGenderEmpty = await iframe.$eval(\n      '#field_item_jenis_kelamin_id input[type=\"text\"]',\n      (el) => !el.value || el.value.trim() === ''\n    );\n    const isKabupatenEmpty = await iframe.$eval(\n      '#field_item_kabupaten_ktp_id input[type=\"text\"]',\n      (el) => !el.value || el.value.trim() === ''\n    );\n    const isProvinsiEmpty = await iframe.$eval(\n      '#field_item_provinsi_ktp_id input[type=\"text\"]',\n      (el) => !el.value || el.value.trim() === ''\n    );\n    const isKecamatanEmpty = await iframe.$eval(\n      '#field_item_kecamatan_ktp_id input[type=\"text\"]',\n      (el) => !el.value || el.value.trim() === ''\n    );\n    const isKelurahanEmpty = await iframe.$eval(\n      '#field_item_kelurahan_ktp_id input[type=\"text\"]',\n      (el) => !el.value || el.value.trim() === ''\n    );\n    console.log(\n      `isGenderEmpty: ${isGenderEmpty}, isKabupatenEmpty: ${isKabupatenEmpty}, isProvinsiEmpty: ${isProvinsiEmpty}, isKecamatanEmpty: ${isKecamatanEmpty}, isKelurahanEmpty: ${isKelurahanEmpty}`\n    );\n    if (isGenderEmpty || isKabupatenEmpty || isProvinsiEmpty || isKecamatanEmpty || isKelurahanEmpty) {\n      // If any field is empty, set isManualInput to true\n      isManualInput = true;\n    }\n  }\n\n  if (isManualInput) {\n    // Proceed with manual input\n\n    logLine(`Proceeding with manual input for NIK: ${NIK}`);\n\n    // Input name manually\n    await iframeType('#field_item_nama_peserta input[type=\"text\"]', fixedData.nama);\n\n    if (fixedData.gender !== 'Tidak Diketahui') {\n      // Input gender\n      await typeAndTriggerIframe(\n        page,\n        iframeSelector,\n        '#field_item_jenis_kelamin_id input[type=\"text\"]',\n        fixedData.gender\n      );\n    } else {\n      throw new Error(`Gender is not known for NIK: ${NIK}`);\n    }\n\n    // Try to find the birth date field in fixedData\n    let tglLahir = fixedData['TGL LAHIR'] || fixedData.tgl_lahir;\n    if (!moment(tglLahir, 'DD/MM/YYYY', true).isValid()) {\n      throw new Error(`Invalid date format for TGL LAHIR: ${tglLahir} (NIK: ${NIK})`);\n    } else {\n      await typeAndTriggerIframe(page, iframeSelector, '#field_item_tgl_lahir input[type=\"text\"]', tglLahir);\n    }\n    logLine('Resolved tglLahir: ' + tglLahir);\n\n    // input address: provinsi -> kabupaten -> kecamatan -> kelurahan -> alamat\n    if (fixedData.parsed_nik && fixedData.parsed_nik.status === 'success') {\n      const parsed_nik = fixedData.parsed_nik.data;\n      let { kotakab = '', namaKec = '', provinsi = '', kelurahan = [] } = parsed_nik;\n\n      if (provinsi.length > 0) {\n        await typeAndTriggerIframe(\n          page,\n          iframeSelector,\n          '#field_item_provinsi_ktp_id input[type=\"text\"]',\n          ucwords(provinsi)\n        );\n      }\n\n      if (kotakab.length > 0) {\n        await typeAndTriggerIframe(\n          page,\n          iframeSelector,\n          '#field_item_kabupaten_ktp_id input[type=\"text\"]',\n          ucwords(kotakab)\n        );\n      }\n\n      if (namaKec.length > 0) {\n        await typeAndTriggerIframe(\n          page,\n          iframeSelector,\n          '#field_item_kecamatan_ktp_id input[type=\"text\"]',\n          ucwords(namaKec)\n        );\n      }\n\n      if (kelurahan.length > 0) {\n        const selectedKelurahan = kelurahan[0];\n        if (selectedKelurahan && selectedKelurahan.name) {\n          logLine(`Using parsed NIK data for address: ${selectedKelurahan.name}, ${namaKec}, ${kotakab}, ${provinsi}`);\n\n          await typeAndTriggerIframe(\n            page,\n            iframeSelector,\n            '#field_item_kelurahan_ktp_id input[type=\"text\"]',\n            ucwords(selectedKelurahan.name)\n          );\n        }\n      }\n    }\n  }\n\n  // Always input alamat\n  if (fixedData.alamat && String(fixedData.alamat).trim() !== '') {\n    await typeAndTriggerIframe(\n      page,\n      iframeSelector,\n      '#field_item_alamat_ktp textarea[type=\"text\"]',\n      String(fixedData.alamat)\n    );\n  }\n\n  // Input pekerjaan\n  logLine(`Inputting pekerjaan: ${fixedData.pekerjaan} for NIK: ${NIK}`);\n  await iframeType('input[name=\"pekerjaan_id_input\"]', fixedData.pekerjaan);\n\n  // Input berat badan and tinggi badan\n  const bb = fixedData.bb || fixedData.BB || null;\n  const tb = fixedData.tb || fixedData.TB || null;\n  logLine(`Inputting berat badan (${bb}) dan tinggi badan (${tb}) untuk NIK: ${NIK}`);\n\n  await iframeType('#field_item_berat_badan input[type=\"text\"]', extractNumericWithComma(bb));\n  await iframeType('#field_item_tinggi_badan input[type=\"text\"]', extractNumericWithComma(tb));\n\n  // Input tidak\n  const tidakOptions = { clearFirst: true };\n\n  await iframeType('#field_item_risiko_6_id input[type=\"text\"]', fixedData.diabetes ? 'Ya' : 'Tidak', tidakOptions);\n  // detach from active element\n  await page.keyboard.press('Tab');\n\n  if (fixedData.gender.toLowerCase().trim() === 'perempuan') {\n    await iframeType('#field_item_risiko_9_id input[type=\"text\"]', 'Tidak', tidakOptions);\n    // detach from active element\n    await page.keyboard.press('Tab');\n  }\n\n  if (!fixedData.batuk) {\n    logLine(`Inputting batuk: Tidak ${fixedData.NAMA} (${NIK})`);\n    await iframeType('#field_item_gejala_2_1_id input[type=\"text\"]', 'Tidak', tidakOptions);\n    // detach from active element\n    await page.keyboard.press('Tab');\n  } else {\n    let keteranganBatuk = fixedData.batuk.replace(/ya,/, 'batuk');\n    logLine(`Inputting batuk: ${keteranganBatuk} ${fixedData.NAMA} (${NIK})`);\n    if (/\\d/m.test(keteranganBatuk)) {\n      await iframeType('#field_item_keterangan textarea', keteranganBatuk, tidakOptions);\n      logLine(`Keterangan batuk contains a number for NIK: ${NIK}, waiting for user to fix data...`);\n      await waitEnter(`Please fix data batuk/demam for ${fixedData.NAMA} (${NIK}). Press Enter to continue...`);\n    }\n  }\n\n  const tidakFields = [\n    '#field_item_cxr_pemeriksaan_id input[type=\"text\"]',\n    '#field_item_gejala_2_3_id input[type=\"text\"]',\n    '#field_item_gejala_2_4_id input[type=\"text\"]',\n    '#field_item_gejala_2_5_id input[type=\"text\"]',\n    '#field_item_gejala_6_id input[type=\"text\"]',\n    '#field_item_risiko_1_id input[type=\"text\"]',\n    '#field_item_risiko_10_id input[type=\"text\"]',\n    '#field_item_risiko_11_id input[type=\"text\"]',\n    '#field_item_risiko_4_id input[type=\"text\"]',\n    '#field_item_risiko_5_id input[type=\"text\"]',\n    '#field_item_risiko_7_id input[type=\"text\"]',\n    '#field_item_riwayat_kontak_tb_id input[type=\"text\"]'\n  ];\n  if (fixedData.age < 18) {\n    tidakFields.push(\n      '#field_item_gejala_1_1_id input[type=\"text\"]',\n      '#field_item_gejala_1_3_id input[type=\"text\"]',\n      '#form_item_gejala_1_4_id input[type=\"text\"]',\n      '#field_item_gejala_1_5_id input[type=\"text\"]'\n    );\n  }\n\n  for (const selector of tidakFields) {\n    await iframeType(selector, 'Tidak', tidakOptions);\n    // detach from active element\n    await page.keyboard.press('Tab');\n  }\n\n  // detach from any active element\n  await page.keyboard.press('Tab');\n\n  await sleep(3000); // Wait for the form to stabilize\n\n  // Prepare submit data\n\n  const isAllowedToSubmit = async () => {\n    const identityModalVisible = await isIdentityModalVisible(page);\n    const invalidAlertVisible = await isInvalidAlertVisible(page);\n    const nikErrorVisible = await isNikErrorVisible(page);\n    const nikNotFoundModalVisible = await isNIKNotFoundModalVisible(page);\n\n    logLine('identityModalVisible:', identityModalVisible);\n    logLine('invalidAlertVisible:', invalidAlertVisible);\n    logLine('nikErrorVisible:', nikErrorVisible);\n    logLine('nikNotFoundModalVisible:', nikNotFoundModalVisible);\n    return !identityModalVisible && !invalidAlertVisible && !nikErrorVisible && !nikNotFoundModalVisible;\n  };\n\n  await sleep(2000); // Wait for the form to stabilize\n\n  // Re-evaluate the form to ensure all fields are filled correctly\n  if (!(await isAllowedToSubmit())) {\n    await re_evaluate(page);\n  }\n\n  while (!(await isAllowedToSubmit())) {\n    // if (await isIframeElementVisible(page, iframeSelector, '#yesButton')) {\n    //   break; // If the Yes button is visible, we can proceed\n    // }\n    logLine(`Submission not allowed for NIK: ${NIK}. Please check the form for errors.`);\n    // Wait for user to fix data\n    await waitEnter(`Please fix data for ${fixedData.NAMA} (${NIK}). Press Enter to continue...`);\n  }\n\n  if (await isAllowedToSubmit()) {\n    logLine(`Submitting data for NIK: ${NIK}`);\n\n    // Scroll to submit button\n    await iframe.$eval('#save', (el) => el.scrollIntoView());\n    // Click the submit button\n    await clickIframeElement(page, iframeSelector, '#save');\n    // Wait for the confirmation modal to appear\n    await sleep(2000); // Wait for the modal to appear\n\n    let counter = 0; // Counter for waiting for confirmation\n\n    while (!(await isIframeElementVisible(page, iframeSelector, '#yesButton'))) {\n      logInline(`Yes button is not visible for NIK: ${NIK} after ${counter}s. Please check the form for errors.`);\n      await sleep(1000);\n      counter++;\n    }\n\n    counter = 0; // Reset counter\n    logLine(`Yes button is now visible for NIK: ${NIK}. Waiting for submission...`);\n\n    while (!isAllowedToSubmit()) {\n      logInline(`Submission not allowed for NIK: ${NIK} after ${counter}s. Please check the form for errors.`);\n      await sleep(1000);\n      counter++;\n    }\n\n    counter = 0; // Reset counter\n    logLine(`Submission allowed for NIK: ${NIK}. Clicking Yes to confirm...`);\n\n    // get form values before submission\n    logLine(`Getting form values for NIK: ${NIK} before submission...`);\n    const formValues = (await getFormValuesFromFrame(page, iframeSelector, '#main-container'))\n      .map((item) => {\n        if (!item.name || item.name.trim().length === 0) {\n          return null; // Skip items without a name\n        }\n        if (item.isVisible.toLowerCase() === 'false') {\n          return null; // Skip invisible elements\n        }\n        let valueLabel = item.value || '';\n        if (valueLabel.trim().length === 0) {\n          valueLabel = '<empty>';\n        }\n        let keyLabel = '';\n        if (item.name && item.name.trim().length > 0) {\n          keyLabel = `[name=\"${item.name}\"]`;\n        } else if (item.id && item.id.trim().length > 0) {\n          keyLabel = `#${item.id}`;\n        } else {\n          keyLabel = '<empty-key>';\n        }\n        const isDisabled = item.disabled?.toLowerCase() === 'true';\n        return {\n          selector: keyLabel,\n          value: valueLabel,\n          disabled: isDisabled,\n          label: item.label\n        };\n      })\n      .filter((item) => item !== null);\n    fixedData.formValues = formValues;\n\n    // Click the Yes button to confirm submission\n    await clickIframeElement(page, iframeSelector, '#yesButton');\n  }\n\n  await sleep(2000); // Wait for the submission to process\n\n  if (!(await isElementVisible(page, iframeSelector))) {\n    logLine(`Data for NIK: ${NIK} submitted successfully.`);\n    // Get the form values after submission\n    addLog({\n      id: NIK,\n      data: { ...fixedData, status: 'success' },\n      message: `Data for NIK: ${NIK} submitted successfully.`\n    });\n  } else {\n    logLine(`Data for NIK: ${NIK} submission failed. Please check the form for errors.`);\n  }\n}\n\nasync function re_evaluate(page) {\n  const iframeSelector = '.k-window-content iframe.k-content-frame';\n  const iframeElement = await page.$(iframeSelector);\n  const iframe = await iframeElement.contentFrame();\n  const iframeType = async (selector, value) => {\n    // Check if element is visible and enabled\n    const isVisibleAndEnabled = await iframe\n      .$eval(selector, (el) => {\n        const style = window.getComputedStyle(el);\n        const notHidden =\n          style && style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n        const notDisabled = !el.disabled && !el.readOnly;\n        return notHidden && notDisabled;\n      })\n      .catch(() => false);\n    if (!isVisibleAndEnabled) {\n      logLine(`Element ${selector} is not visible or enabled, skipping typing.`);\n      return;\n    }\n    // Scroll to the element before typing\n    await iframe.$eval(selector, (el) => el.scrollIntoView({ behavior: 'auto', block: 'center' }));\n    // Click to focus the element\n    await iframe.click(selector).catch(() => {});\n    await iframe.focus(selector).catch(() => {});\n    // Try to clear the input using keyboard (Ctrl+A, Backspace)\n    try {\n      await iframe.click(selector, { clickCount: 3 });\n      await iframe.type(selector, String.fromCharCode(1), { delay: 10 }); // Ctrl+A\n      await iframe.keyboard.down('Control');\n      await iframe.keyboard.press('A');\n      await iframe.keyboard.up('Control');\n      await iframe.keyboard.press('Backspace');\n    } catch {\n      // fallback to JS clear\n      await page.evaluate(\n        (iframeSelector, selector) => {\n          const iframe = document.querySelector(iframeSelector);\n          const element = iframe.contentDocument.querySelector(selector);\n          if (element) {\n            element.value = '';\n            element.dispatchEvent(new iframe.contentWindow.Event('input', { bubbles: true }));\n          }\n        },\n        iframeSelector,\n        selector\n      );\n    }\n    // Retry typing up to 3 times if value is not set\n    let lastError = null;\n    for (let attempt = 0; attempt < 3; attempt++) {\n      try {\n        await iframe.type(selector, value, { delay: 100 });\n        // Wait for value to be set\n        await iframe.waitForFunction(\n          (sel, val) => {\n            const el = document.querySelector(sel);\n            return el && el.value && el.value.trim() === val.trim();\n          },\n          {},\n          selector,\n          value\n        );\n        // Trigger input and change events\n        await iframe.$eval(selector, (el) => {\n          el.dispatchEvent(new Event('input', { bubbles: true }));\n          el.dispatchEvent(new Event('change', { bubbles: true }));\n        });\n        await sleep(500);\n        return;\n      } catch (err) {\n        lastError = err;\n        logLine(`Typing attempt ${attempt + 1} failed for ${selector}: ${err}`);\n        await sleep(300);\n      }\n    }\n    logLine(`Failed to type value into ${selector} after 3 attempts. Last error: ${lastError}`);\n  };\n  const isInputEmpty = async (selector) => {\n    try {\n      const value = await iframe.$eval(selector, (el) => el.value);\n      return !value || value.trim() === '';\n    } catch (err) {\n      logLine(`Error checking input empty state for ${selector} with $eval: ${err}`);\n      // Fallback: try to get value using JS evaluate\n      try {\n        const value = await page.evaluate(\n          (iframeSelector, selector) => {\n            const iframe = document.querySelector(iframeSelector);\n            if (!iframe) return '';\n            const el = iframe.contentDocument.querySelector(selector);\n            return el ? el.value : '';\n          },\n          iframeSelector,\n          selector\n        );\n        return !value || value.trim() === '';\n      } catch (err2) {\n        logLine(`Fallback JS evaluate failed for ${selector}: ${err2}`);\n        return true; // Assume empty if error occurs\n      }\n    }\n  };\n  if (await isInputEmpty('#field_item_nama_peserta input[type=\"text\"]'))\n    await iframeType('#field_item_metode_id input[type=\"text\"]', 'Tunggal');\n  if (await isInputEmpty('input[name=\"tempat_skrining_id_input\"]'))\n    await iframeType('input[name=\"tempat_skrining_id_input\"]', 'Puskesmas');\n}\n\n/**\n *\n * @param {import('puppeteer').Page} page\n */\nasync function _test(page) {\n  await enterSkriningPage(page, false);\n\n  await sleep(3000);\n\n  const iframeSelector = '.k-window-content iframe.k-content-frame';\n  const iframeElement = await page.$(iframeSelector);\n  const iframe = await iframeElement.contentFrame();\n  const iframeType = async (selector, value) => {\n    // Skip if element is hidden\n    const isVisible = await iframe.$eval(selector, (el) => {\n      const style = window.getComputedStyle(el);\n      return style && style.display !== 'none' && style.visibility !== 'hidden' && el.offsetParent !== null;\n    });\n    if (!isVisible) {\n      logLine(`Element ${selector} is not visible, skipping typing.`);\n      return;\n    }\n    // Scroll to the element before typing\n    await iframe.$eval(selector, (el) => el.scrollIntoView({ behavior: 'auto', block: 'center' }));\n    // Focus the element before typing\n    await iframe.focus(selector);\n    // Reset existing value before typing\n    await page.evaluate(\n      (iframeSelector, selector) => {\n        const iframe = document.querySelector(iframeSelector);\n        const element = iframe.contentDocument.querySelector(selector);\n        element.value = '';\n        element.dispatchEvent(new iframe.contentWindow.Event('input', { bubbles: true }));\n      },\n      iframeSelector,\n      selector\n    );\n    // Type the value into the input field\n    await iframe.type(selector, value, { delay: 100 });\n    // Trigger input and change events\n    await iframe.$eval(selector, (el) => {\n      const event = new Event('change', { bubbles: true });\n      el.dispatchEvent(event);\n    });\n    // Wait for the input to stabilize\n    await sleep(1000);\n  };\n  await iframeType('#field_item_metode_id input[type=\"text\"]', 'Tunggal');\n  await iframeType('input[name=\"tempat_skrining_id_input\"]', 'Puskesmas');\n  await iframeType('#field_item_nama_peserta input[type=\"text\"]', 'MUHAMMAD NATHAN ALFATIR');\n  const tidakFields = [\n    '#field_item_cxr_pemeriksaan_id input[type=\"text\"]',\n    '#field_item_gejala_2_3_id input[type=\"text\"]',\n    '#field_item_gejala_2_4_id input[type=\"text\"]',\n    '#field_item_gejala_2_5_id input[type=\"text\"]',\n    '#field_item_gejala_6_id input[type=\"text\"]',\n    '#field_item_risiko_1_id input[type=\"text\"]',\n    '#field_item_risiko_10_id input[type=\"text\"]',\n    '#field_item_risiko_11_id input[type=\"text\"]',\n    '#field_item_risiko_4_id input[type=\"text\"]',\n    '#field_item_risiko_5_id input[type=\"text\"]',\n    '#field_item_risiko_7_id input[type=\"text\"]',\n    '#field_item_riwayat_kontak_tb_id input[type=\"text\"]',\n    '#field_item_gejala_1_1_id input[type=\"text\"]',\n    '#field_item_gejala_1_3_id input[type=\"text\"]',\n    '#form_item_gejala_1_4_id input[type=\"text\"]',\n    '#field_item_gejala_1_5_id input[type=\"text\"]'\n  ];\n  for (const selector of tidakFields) {\n    await iframeType(selector, 'Tidak');\n  }\n}\n\nconst _main = async () => {\n  const { page, browser } = await getPuppeteer();\n  await skrinLogin(page);\n  /**\n   * @type {import('./types.js').SkrinData[]}\n   */\n  const dataKunto = await loadCsvData();\n\n  // Fix data names\n  for (let i = 0; i < dataKunto.length; i++) {\n    if (/bayi/i.test(dataKunto[i].nama)) {\n      const namaBayi = parseBabyName(dataKunto[i].nama);\n      if (namaBayi) {\n        logLine(`Parsed baby name: ${dataKunto[i].nama} -> ${ansiColors.green(namaBayi)}`);\n        dataKunto[i].nama = namaBayi;\n      } else {\n        logLine(`Failed to parse baby name: ${dataKunto[i].nama}`);\n        dataKunto[i].skip = true; // Mark to skip\n      }\n    }\n  }\n\n  if (cliArgs.shuffle) {\n    // Shuffle data array using Fisher-Yates algorithm\n    for (let i = dataKunto.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [dataKunto[i], dataKunto[j]] = [dataKunto[j], dataKunto[i]];\n    }\n    logLine('Data shuffled');\n  }\n\n  const unprocessedData = dataKunto.filter((item) => {\n    // Check if the data for this NIK has already been processed\n    const nik = getNumbersOnly(item.nik);\n    return !getLogById(nik) || Object.hasOwn(getLogById(nik).data, 'status') === false;\n  });\n\n  while (unprocessedData.length > 0) {\n    const currentData = unprocessedData.shift();\n    if (currentData.skip) {\n      continue; // Skip this entry\n    }\n    if (!nikUtils.isValidNIK(currentData.nik)) {\n      logLine(`Skipping invalid NIK: ${currentData.nik}`);\n      addLog({\n        id: getNumbersOnly(currentData.nik),\n        data: { ...currentData, status: 'invalid' },\n        message: 'Invalid NIK format'\n      });\n      continue; // Skip invalid NIKs\n    }\n    // Close the first page if there are more than 3 pages open\n    if ((await browser.pages()).length > 3) {\n      const pages = await browser.pages();\n      await pages[0].close();\n    }\n    // Start new page for each data entry\n    if (currentData) await processData(await browser.newPage(), currentData);\n  }\n\n  // await _test(page);\n};\n\nconst _test2 = async () => {\n  const { page } = await getPuppeteer();\n  await skrinLogin(page);\n  const dataKunto = await loadCsvData();\n  processData(page, dataKunto[0]);\n};\n\nif (cliArgs.help) {\n  showHelp();\n  process.exit(0);\n} else {\n  _main()\n    .then(() => {\n      logLine('All done!');\n      process.exit(0);\n    })\n    .catch((err) => {\n      console.error('Fatal error:', err);\n      process.exit(1);\n    });\n}\n"]}