{"version":3,"sources":["../../src/runner/sehatindonesiaku-utils.ts"],"names":["waitForDomStable"],"mappings":";;;;;;;AAgBA,eAAsB,aAAa,IAAA,EAAY;AAC7C,EAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,EAAA,CAAG,QAAQ,CAAA;AAEtC,EAAA,KAAA,MAAW,OAAO,OAAA,EAAS;AACzB,IAAA,MAAM,IAAA,GAAO,MAAM,GAAA,CAAI,QAAA,CAAS,CAAC,EAAA,KAAO;AACtC,MAAA,IAAI,CAAA,GAAI,GAAG,SAAA,IAAa,EAAA;AAExB,MAAA,CAAA,GAAI,CAAA,CAAE,OAAA,CAAQ,wBAAA,EAA0B,EAAE,CAAA;AAE1C,MAAA,CAAA,GAAI,CAAA,CAAE,OAAA,CAAQ,kBAAA,EAAoB,EAAE,CAAA;AAEpC,MAAA,CAAA,GAAI,EAAE,OAAA,CAAQ,MAAA,EAAQ,GAAG,CAAA,CAAE,IAAA,GAAO,WAAA,EAAY;AAC9C,MAAA,OAAO,CAAA;AAAA,IACT,CAAC,CAAA;AAED,IAAA,IAAI,SAAS,SAAA,EAAW;AACtB,MAAA,MAAM,IAAI,KAAA,EAAM;AAChB,MAAA;AAAA,IACF;AAAA,EACF;AAMA,EAAA,MAAM,IAAI,MAAM,mCAA8B,CAAA;AAChD;AAOA,MAAM,SAAA,GAAoC;AAAA,EACxC,GAAA,EAAK,CAAA;AAAA,EACL,OAAA,EAAS,CAAA;AAAA,EACT,GAAA,EAAK,CAAA;AAAA,EACL,QAAA,EAAU,CAAA;AAAA,EACV,GAAA,EAAK,CAAA;AAAA,EACL,KAAA,EAAO,CAAA;AAAA,EACP,GAAA,EAAK,CAAA;AAAA,EACL,KAAA,EAAO,CAAA;AAAA,EACP,GAAA,EAAK,CAAA;AAAA,EACL,GAAA,EAAK,CAAA;AAAA,EACL,IAAA,EAAM,CAAA;AAAA,EACN,GAAA,EAAK,CAAA;AAAA,EACL,IAAA,EAAM,CAAA;AAAA,EACN,GAAA,EAAK,CAAA;AAAA,EACL,GAAA,EAAK,CAAA;AAAA,EACL,KAAA,EAAO,CAAA;AAAA,EACP,OAAA,EAAS,CAAA;AAAA,EACT,IAAA,EAAM,CAAA;AAAA,EACN,GAAA,EAAK,CAAA;AAAA,EACL,SAAA,EAAW,CAAA;AAAA,EACX,GAAA,EAAK,CAAA;AAAA,EACL,OAAA,EAAS,CAAA;AAAA,EACT,GAAA,EAAK,EAAA;AAAA,EACL,QAAA,EAAU,EAAA;AAAA,EACV,GAAA,EAAK,EAAA;AAAA,EACL,QAAA,EAAU;AACZ,CAAA;AASA,SAAS,qBAAqB,IAAA,EAAsB;AAClD,EAAA,MAAM,GAAA,GAAM,IAAA,CAAK,IAAA,EAAK,CAAE,WAAA,EAAY;AACpC,EAAA,IAAI,GAAA,IAAO,SAAA,EAAW,OAAO,SAAA,CAAU,GAAG,CAAA;AAC1C,EAAA,MAAM,KAAA,GAAQ,GAAA,CAAI,KAAA,CAAM,CAAA,EAAG,CAAC,CAAA;AAC5B,EAAA,IAAI,KAAA,IAAS,SAAA,EAAW,OAAO,SAAA,CAAU,KAAK,CAAA;AAC9C,EAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qCAAA,EAAwC,IAAI,CAAA,CAAA,CAAG,CAAA;AACjE;AAEA,eAAsB,qBAAA,CAAsB,MAAY,OAAA,EAAmC;AACzF,EAAA,MAAM,GAAA,GAAM,OAAO,OAAA,EAAS,YAAA,EAAc,IAAI,CAAA,CAAE,IAAA,GAAO,QAAA,EAAS;AAChE,EAAA,MAAM,eAAA,GAAkB,MAAM,IAAA,CAAK,CAAA,CAAE,qBAAqB,CAAA;AAC1D,EAAA,IAAI,CAAC,iBAAiB,OAAO,KAAA;AAC7B,EAAA,MAAM,cAAA,GAAiB,MAAM,eAAA,CAAgB,EAAA,CAAG,kBAAkB,CAAA;AAElE,EAAA,KAAA,MAAW,SAAS,cAAA,EAAgB;AAClC,IAAA,MAAM,UAAU,MAAM,KAAA,CAAM,QAAA,CAAS,CAAC,MAAM,SAAA,KAAc;AApG9D,MAAA,IAAA,EAAA;AAqGM,MAAA,MAAM,UAAU,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,gBAAA,CAAiB,QAAQ,CAAC,CAAA;AAC1D,MAAA,KAAA,MAAW,OAAO,OAAA,EAAS;AACzB,QAAA,IAAI,IAAI,QAAA,IAAY,GAAA,CAAI,SAAA,CAAU,QAAA,CAAS,oBAAoB,CAAA,EAAG;AAClE,QAAA,MAAM,IAAA,GAAO,GAAA,CAAI,aAAA,CAAc,gBAAgB,CAAA;AAC/C,QAAA,IAAI,IAAA,IAAA,CAAA,CAAQ,EAAA,GAAA,IAAA,CAAK,WAAA,KAAL,IAAA,GAAA,MAAA,GAAA,EAAA,CAAkB,YAAW,SAAA,EAAW;AAClD,UAAC,IAAoB,KAAA,EAAM;AAC3B,UAAA,OAAO,IAAA;AAAA,QACT;AAAA,MACF;AACA,MAAA,OAAO,KAAA;AAAA,IACT,GAAG,GAAG,CAAA;AACN,IAAA,IAAI,SAAS,OAAO,IAAA;AAAA,EACtB;AACA,EAAA,OAAO,KAAA;AACT;AAQA,eAAsB,cAAA,CAAe,MAAY,OAAA,EAAiB;AAEhE,EAAA,MAAM,CAAA,GAAI,MAAA,CAAO,OAAA,EAAS,YAAA,EAAc,IAAI,CAAA;AAC5C,EAAA,IAAI,CAAC,CAAA,CAAE,OAAA,EAAQ,EAAG;AAChB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,qBAAA,EAAwB,OAAO,CAAA,qBAAA,CAAuB,CAAA;AAAA,EACxE;AACA,EAAA,MAAM,SAAA,GAAY,EAAE,IAAA,EAAK;AACzB,EAAA,MAAM,WAAA,GAAc,EAAE,KAAA,EAAM;AAC5B,EAAA,MAAM,UAAA,GAAa,EAAE,IAAA,EAAK;AAG1B,EAAA,MAAM,IAAA,CAAK,QAAA,CAAS,MAAM,IAAI,OAAA,CAAQ,CAAC,OAAA,KAAY,UAAA,CAAW,OAAA,EAAS,GAAI,CAAC,CAAC,CAAA;AAE7E,EAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,CAAA,CAAE,8BAA8B,CAAA;AAC5D,EAAA,IAAI,CAAC,QAAA,EAAU,MAAM,IAAI,MAAM,8BAA8B,CAAA;AAE7D,EAAA,MAAM,UAAA,GAAc,MAAM,QAAA,CAAS,cAAA,CAAe,CAAC,EAAA,KAAO,EAAA,CAAG,OAAA,CAAQ,cAAc,CAAC,CAAA;AACpF,EAAA,IAAI,CAAC,UAAA,EAAY,MAAM,IAAI,MAAM,yBAAyB,CAAA;AAO1D,EAAA,eAAe,WAAW,IAAA,EAA8B;AACtD,IAAA,MAAM,OAAO,MAAM,IAAA,CAAK,KAAA,CAAM,8BAAA,EAAgC,CAAC,GAAA,KAAQ;AApJ3E,MAAA,IAAA,EAAA,EAAA,EAAA;AAqJM,MAAA,MAAM,IAAA,GAAO,GAAA,CAAI,aAAA,CAAc,oBAAoB,CAAA;AACnD,MAAA,MAAM,IAAA,GAAO,OAAO,KAAA,CAAM,IAAA,CAAK,KAAK,gBAAA,CAAiB,QAAQ,CAAC,CAAA,GAAI,EAAC;AACnE,MAAA,MAAM,eAAa,EAAA,GAAA,IAAA,CAAK,CAAC,MAAN,IAAA,GAAA,MAAA,GAAA,EAAA,CAAS,WAAA,KAAe,IAAI,IAAA,EAAK;AACpD,MAAA,MAAM,cAAY,EAAA,GAAA,IAAA,CAAK,CAAC,MAAN,IAAA,GAAA,MAAA,GAAA,EAAA,CAAS,WAAA,KAAe,IAAI,IAAA,EAAK;AACnD,MAAA,OAAO,EAAE,WAAW,QAAA,EAAS;AAAA,IAC/B,CAAC,CAAA;AACD,IAAA,MAAM,QAAA,GAAW,oBAAA,CAAqB,IAAA,CAAK,SAAS,CAAA;AACpD,IAAA,MAAM,OAAA,GAAU,QAAA,CAAS,IAAA,CAAK,QAAA,EAAU,EAAE,CAAA;AAC1C,IAAA,OAAO,EAAE,UAAU,OAAA,EAAQ;AAAA,EAC7B;AAOA,EAAA,eAAe,cAAc,IAAA,EAA8B;AACzD,IAAA,MAAM,OAAA,GAAU,MAAM,IAAA,CAAK,EAAA,CAAG,mDAAmD,CAAA;AACjF,IAAA,IAAI,QAAQ,MAAA,GAAS,CAAA,EAAG,MAAM,IAAI,MAAM,6BAA6B,CAAA;AACrE,IAAA,OAAO,EAAE,SAAS,OAAA,CAAQ,CAAC,GAAG,OAAA,EAAS,OAAA,CAAQ,CAAC,CAAA,EAAE;AAAA,EACpD;AAEA,EAAA,MAAM,EAAE,OAAA,EAAS,OAAA,EAAQ,GAAI,MAAM,cAAc,UAAU,CAAA;AAG3D,EAAA,KAAA,IAAS,MAAA,GAAS,CAAA,EAAG,MAAA,GAAS,GAAA,EAAK,MAAA,EAAA,EAAU;AAC3C,IAAA,MAAM,EAAE,QAAA,EAAU,OAAA,EAAQ,GAAI,MAAM,WAAW,UAAU,CAAA;AACzD,IAAA,IAAI,QAAA,KAAa,WAAA,IAAe,OAAA,KAAY,UAAA,EAAY;AAExD,IAAA,MAAM,IAAA,GAAA,CAAQ,UAAA,GAAa,OAAA,IAAW,EAAA,IAAM,WAAA,GAAc,QAAA,CAAA;AAC1D,IAAA,IAAI,OAAO,CAAA,EAAG;AACZ,MAAA,MAAM,QAAQ,KAAA,EAAM;AAAA,IACtB,CAAA,MAAO;AACL,MAAA,MAAM,QAAQ,KAAA,EAAM;AAAA,IACtB;AACA,IAAA,MAAM,gBAAA,CAAiB,MAAM,GAAG,CAAA;AAChC,IAAA,IAAI,MAAA,KAAW,GAAA,EAAK,MAAM,IAAI,KAAA,CAAM,mBAAmB,WAAA,GAAc,CAAC,CAAA,CAAA,EAAI,UAAU,CAAA,CAAE,CAAA;AAAA,EACxF;AAGA,EAAA,MAAM,UAAU,MAAM,UAAA,CAAW,QAAA,CAAS,CAAC,MAAM,SAAA,KAAsB;AA7LzE,IAAA,IAAA,EAAA;AA8LI,IAAA,MAAM,IAAA,GAAO,IAAA,CAAK,aAAA,CAAc,mBAAmB,CAAA;AACnD,IAAA,IAAI,CAAC,MAAM,OAAO,KAAA;AAClB,IAAA,MAAM,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,gBAAA,CAAiB,QAAQ,CAAC,CAAA;AACvD,IAAA,KAAA,MAAW,OAAO,IAAA,EAAM;AACtB,MAAA,IAAI,IAAI,SAAA,CAAU,QAAA,CAAS,oBAAoB,CAAA,IAAK,IAAI,QAAA,EAAU;AAClE,MAAA,MAAM,OAAA,GAAU,GAAA,CAAI,aAAA,CAAc,gBAAgB,CAAA;AAClD,MAAA,MAAM,GAAA,GAAA,CAAA,CAAM,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,MAAA,GAAA,OAAA,CAAS,WAAA,KAAT,IAAA,GAAA,MAAA,GAAA,EAAA,CAAsB,IAAA,EAAA,KAAU,EAAA;AAC5C,MAAA,IAAI,MAAA,CAAO,GAAG,CAAA,KAAM,SAAA,EAAW;AAC7B,QAAC,IAAoB,KAAA,EAAM;AAC3B,QAAA,OAAO,IAAA;AAAA,MACT;AAAA,IACF;AACA,IAAA,OAAO,KAAA;AAAA,EACT,GAAG,SAAS,CAAA;AAEZ,EAAA,IAAI,CAAC,OAAA,EAAS;AACZ,IAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,IAAA,EAAO,SAAS,CAAA,gCAAA,CAAkC,CAAA;AAAA,EAClE;AAEA,EAAA,OAAO,OAAA;AACT;AAEA,eAAsB,UAAA,CAAW,IAAA,EAAY,QAAA,GAAmB,oBAAA,EAAsB;AACpF,EAAA,EAAA,CAAG,aAAA,CAAc,IAAA,CAAK,OAAA,CAAQ,QAAQ,CAAC,CAAA;AACvC,EAAA,MAAM,KAAK,UAAA,CAAW;AAAA,IACpB,IAAA,EAAM,QAAA;AAAA,IACN,QAAA,EAAU;AAAA,GACX,CAAA;AACD,EAAA,OAAA,CAAQ,GAAA,CAAI,CAAA,oBAAA,EAAuB,QAAQ,CAAA,CAAE,CAAA;AAC/C;AAEA,eAAsB,gBAAgB,IAAA,EAAY;AAEhD,EAAA,MAAM,YAAA,GAAe,MAAM,IAAA,CAAK,cAAA,CAAe,MAAM;AACnD,IAAA,MAAM,UAAU,KAAA,CAAM,IAAA,CAAK,QAAA,CAAS,gBAAA,CAAiB,QAAQ,CAAC,CAAA;AAC9D,IAAA,OACE,OAAA,CAAQ,IAAA,CAAK,CAAC,GAAA,KAAQ;AACpB,MAAA,MAAM,GAAA,GAAM,GAAA,CAAI,aAAA,CAAc,gBAAgB,CAAA;AAC9C,MAAA,OAAO,OAAO,GAAA,CAAI,WAAA,IAAe,GAAA,CAAI,WAAA,CAAY,MAAK,KAAM,aAAA;AAAA,IAC9D,CAAC,CAAA,IAAK,IAAA;AAAA,EAEV,CAAC,CAAA;AACD,EAAA,IAAI,YAAA,EAAc;AAChB,IAAA,MAAM,SAAA,GAAY,MAAM,YAAA,CAAa,QAAA;AAAA,MACnC,CAAC,EAAA,KAAO,EAAA,KAAO,IAAA,IAAQ,CAAC,EAAE,EAAA,CAAG,WAAA,IAAe,EAAA,CAAG,YAAA,IAAgB,EAAA,CAAG,cAAA,EAAe,CAAE,MAAA;AAAA,KACrF;AACA,IAAA,IAAI,SAAA,EAAW;AACb,MAAA,MAAM,aAAa,KAAA,EAAM;AAEzB,MAAA,MAAM,IAAA,CAAK,SAAS,YAAY;AAC9B,QAAA,SAASA,iBAAAA,CAAiB,OAAA,GAAU,GAAA,EAAO,QAAA,GAAW,GAAA,EAAK;AACzD,UAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAA,KAAW;AACtC,YAAA,IAAI,UAAA,GAAa,KAAK,GAAA,EAAI;AAE1B,YAAA,IAAI,QAAA;AACJ,YAAA,MAAM,KAAA,GAAQ,WAAW,MAAM;AAC7B,cAAA,IAAI,QAAA,WAAmB,UAAA,EAAW;AAClC,cAAA,MAAA,CAAO,IAAI,KAAA,CAAM,+BAA+B,CAAC,CAAA;AAAA,YACnD,GAAG,OAAO,CAAA;AACV,YAAA,QAAA,GAAW,IAAI,iBAAiB,MAAM;AACpC,cAAA,UAAA,GAAa,KAAK,GAAA,EAAI;AAAA,YACxB,CAAC,CAAA;AACD,YAAA,QAAA,CAAS,OAAA,CAAQ,QAAA,CAAS,IAAA,EAAM,EAAE,SAAA,EAAW,IAAA,EAAM,OAAA,EAAS,IAAA,EAAM,UAAA,EAAY,IAAA,EAAM,aAAA,EAAe,IAAA,EAAM,CAAA;AACzG,YAAA,CAAC,SAAS,KAAA,GAAQ;AAChB,cAAA,IAAI,IAAA,CAAK,GAAA,EAAI,GAAI,UAAA,GAAa,QAAA,EAAU;AACtC,gBAAA,YAAA,CAAa,KAAK,CAAA;AAClB,gBAAA,QAAA,CAAS,UAAA,EAAW;AACpB,gBAAA,OAAA,CAAQ,MAAS,CAAA;AAAA,cACnB,CAAA,MAAO;AACL,gBAAA,UAAA,CAAW,OAAO,GAAG,CAAA;AAAA,cACvB;AAAA,YACF,CAAA,GAAG;AAAA,UACL,CAAC,CAAA;AAAA,QACH;AACA,QAAA,MAAMA,iBAAAA,EAAiB;AAAA,MACzB,CAAC,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,OAAA,CAAQ,IAAI,kCAAkC,CAAA;AAAA,IAChD;AAAA,EACF,CAAA,MAAO;AACL,IAAA,MAAM,IAAI,MAAM,gCAAgC,CAAA;AAAA,EAClD;AACF;AAOA,eAAsB,MAAA,CACpB,IAAA,EACA,OAAA,GAII,EAAC,EACL;AACA,EAAA,MAAM;AAAA,IACJ,QAAA,GAAW,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,EAAA;AAAA,IACvC,QAAA,GAAW,OAAA,CAAQ,GAAA,CAAI,YAAA,IAAgB,EAAA;AAAA,IACvC,YAAA,GAAe;AAAA,GACjB,GAAI,OAAA;AAEJ,EAAA,MAAM,KAAK,IAAA,CAAK,kDAAA,EAAoD,EAAE,SAAA,EAAW,gBAAgB,CAAA;AAGjG,EAAA,IAAI,YAAA,EAAc;AAChB,IAAA,MAAM,wBAAwB,IAAI,CAAA;AAClC,IAAA,MAAM,KAAK,IAAA,CAAK,kDAAA,EAAoD,EAAE,SAAA,EAAW,gBAAgB,CAAA;AAAA,EACnG;AAGA,EAAA,IAAI,CAAC,IAAA,CAAK,GAAA,EAAI,CAAE,QAAA,CAAS,aAAa,CAAA,EAAG;AACvC,IAAA,OAAA,CAAQ,IAAI,wCAAwC,CAAA;AACpD,IAAA;AAAA,EACF;AAEA,EAAA,MAAM,IAAA,CAAK,IAAA,CAAK,qBAAA,EAAuB,QAAQ,CAAA;AAE/C,EAAA,MAAM,IAAA,CAAK,IAAA,CAAK,0BAAA,EAA4B,QAAQ,CAAA;AAEpD,EAAA,MAAM,KAAK,eAAA,CAAgB,uBAAA,EAAyB,EAAE,OAAA,EAAS,MAAM,CAAA;AAMrE,EAAA,MAAM,mBAAA,GAAsB,qEAAA;AAE5B,EAAA,MAAM,KAAK,eAAA,CAAgB,mBAAA,EAAqB,EAAE,OAAA,EAAS,MAAM,CAAA;AAEjE,EAAA,MAAM,UAAA,GAAa,MAAM,IAAA,CAAK,KAAA,CAAM,mBAAA,EAAqB,CAAC,EAAA,KAAO,EAAA,CAAG,SAAA,CAAU,QAAA,CAAS,aAAa,CAAC,CAAA;AACrG,EAAA,IAAI,CAAC,UAAA,EAAY;AACf,IAAA,MAAM,QAAQ,GAAA,CAAI;AAAA,MAChB,IAAA,CAAK,MAAM,uCAAuC,CAAA;AAAA,MAClD,IAAA,CAAK,iBAAA,CAAkB,EAAE,SAAA,EAAW,gBAAgB;AAAA,KACrD,CAAA;AACD,IAAA,OAAA,CAAQ,IAAI,kBAAkB,CAAA;AAAA,EAChC,CAAA,MAAO;AACL,IAAA,OAAA,CAAQ,IAAI,yFAAyF,CAAA;AAAA,EACvG;AACF;AAEA,eAAsB,sBAAsB,IAAA,EAAY;AACtD,EAAA,MAAM,KAAK,IAAA,CAAK,gEAAA,EAAkE,EAAE,SAAA,EAAW,gBAAgB,CAAA;AAG/G,EAAA,MAAM,IAAA,CAAK,SAAS,YAAY;AAC9B,IAAA,SAASA,iBAAAA,CAAiB,OAAA,GAAU,GAAA,EAAO,QAAA,GAAW,GAAA,EAAK;AACzD,MAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAA,KAAW;AACtC,QAAA,IAAI,UAAA,GAAa,KAAK,GAAA,EAAI;AAE1B,QAAA,IAAI,QAAA;AACJ,QAAA,MAAM,KAAA,GAAQ,WAAW,MAAM;AAC7B,UAAA,IAAI,QAAA,WAAmB,UAAA,EAAW;AAClC,UAAA,MAAA,CAAO,IAAI,KAAA,CAAM,+BAA+B,CAAC,CAAA;AAAA,QACnD,GAAG,OAAO,CAAA;AACV,QAAA,QAAA,GAAW,IAAI,iBAAiB,MAAM;AACpC,UAAA,UAAA,GAAa,KAAK,GAAA,EAAI;AAAA,QACxB,CAAC,CAAA;AACD,QAAA,QAAA,CAAS,OAAA,CAAQ,QAAA,CAAS,IAAA,EAAM,EAAE,SAAA,EAAW,IAAA,EAAM,OAAA,EAAS,IAAA,EAAM,UAAA,EAAY,IAAA,EAAM,aAAA,EAAe,IAAA,EAAM,CAAA;AACzG,QAAA,CAAC,SAAS,KAAA,GAAQ;AAChB,UAAA,IAAI,IAAA,CAAK,GAAA,EAAI,GAAI,UAAA,GAAa,QAAA,EAAU;AACtC,YAAA,YAAA,CAAa,KAAK,CAAA;AAClB,YAAA,QAAA,CAAS,UAAA,EAAW;AACpB,YAAA,OAAA,CAAQ,MAAS,CAAA;AAAA,UACnB,CAAA,MAAO;AACL,YAAA,UAAA,CAAW,OAAO,GAAG,CAAA;AAAA,UACvB;AAAA,QACF,CAAA,GAAG;AAAA,MACL,CAAC,CAAA;AAAA,IACH;AACA,IAAA,MAAMA,iBAAAA,EAAiB;AAAA,EACzB,CAAC,CAAA;AAKD,EAAA,MAAM,UAAA,GAAa,KAAK,GAAA,EAAI;AAC5B,EAAA,IAAI,CAAC,UAAA,CAAW,QAAA,CAAS,QAAQ,CAAA,EAAG;AAClC,IAAA,OAAO,IAAA;AAAA,EACT,CAAA,MAAO;AAEL,IAAA,MAAM,OAAO,IAAI,CAAA;AACjB,IAAA,OAAO,KAAA;AAAA,EACT;AACF","file":"sehatindonesiaku-utils.js","sourcesContent":["import 'dotenv/config.js';\nimport fs from 'fs-extra';\nimport moment from 'moment';\nimport type { ElementHandle, Page } from 'puppeteer';\nimport path from 'upath';\nimport { clearCurrentPageCookies, waitForDomStable } from '../puppeteer_utils.js';\n\n/**\n * Clicks the \"Kembali\" button on the page.\n *\n * This function searches for all <button> elements and clicks the first one whose text content\n * (case-insensitive) is exactly \"kembali\". Throws an error if no such button is found.\n *\n * @param page - Puppeteer page instance\n * @throws If the \"Kembali\" button is not found\n */\nexport async function clickKembali(page: Page) {\n  const buttons = await page.$$('button');\n\n  for (const btn of buttons) {\n    const text = await btn.evaluate((el) => {\n      let t = el.innerText || '';\n      // Remove zero-width characters\n      t = t.replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n      // Remove special characters but keep letters, numbers, spaces\n      t = t.replace(/[^\\p{L}\\p{N} ]/gu, '');\n      // Collapse multiple spaces and trim\n      t = t.replace(/\\s+/g, ' ').trim().toLowerCase();\n      return t;\n    });\n\n    if (text === 'kembali') {\n      await btn.click();\n      return;\n    }\n  }\n\n  // Optional: log all button texts for debugging\n  // const allTexts = await Promise.all(buttons.map((b) => b.evaluate((el) => el.innerText)));\n  // console.log('All button texts:', allTexts);\n\n  throw new Error(\"❌ 'Kembali' button not found\");\n}\n\n// Supported Indonesian month labels seen in header\n/**\n * Supported Indonesian month labels mapped to their 0-based month index.\n * Used for parsing month names in calendar headers.\n */\nconst ID_MONTHS: Record<string, number> = {\n  jan: 0,\n  januari: 0,\n  feb: 1,\n  februari: 1,\n  mar: 2,\n  maret: 2,\n  apr: 3,\n  april: 3,\n  mei: 4,\n  jun: 5,\n  juni: 5,\n  jul: 6,\n  juli: 6,\n  agt: 7,\n  agu: 7,\n  agust: 7,\n  agustus: 7,\n  agst: 7,\n  sep: 8,\n  september: 8,\n  okt: 9,\n  oktober: 9,\n  nov: 10,\n  november: 10,\n  des: 11,\n  desember: 11\n};\n\n/**\n * Converts a month label from the calendar header to a 0-based month index.\n * Accepts full or abbreviated Indonesian month names.\n * @param text Month label from header\n * @returns 0-based month index (0 = January)\n * @throws If the label is not recognized\n */\nfunction monthIndexFromHeader(text: string): number {\n  const key = text.trim().toLowerCase();\n  if (key in ID_MONTHS) return ID_MONTHS[key];\n  const short = key.slice(0, 3);\n  if (short in ID_MONTHS) return ID_MONTHS[short];\n  throw new Error(`Unrecognized month label in header: \"${text}\"`);\n}\n\nexport async function selectDayFromCalendar(page: Page, dateStr: string): Promise<boolean> {\n  const day = moment(dateStr, 'DD/MM/YYYY', true).date().toString();\n  const calendarWrapper = await page.$('.form-data-individu');\n  if (!calendarWrapper) return false;\n  const calendarPanels = await calendarWrapper.$$('div.shadow-gmail');\n\n  for (const panel of calendarPanels) {\n    const clicked = await panel.evaluate((root, wantedDay) => {\n      const buttons = Array.from(root.querySelectorAll('button'));\n      for (const btn of buttons) {\n        if (btn.disabled || btn.classList.contains('cursor-not-allowed')) continue;\n        const span = btn.querySelector('span.font-bold');\n        if (span && span.textContent?.trim() === wantedDay) {\n          (btn as HTMLElement).click();\n          return true;\n        }\n      }\n      return false;\n    }, day);\n    if (clicked) return true;\n  }\n  return false;\n}\n\n/**\n * Selects a date in the custom calendar widget by navigating to the correct month/year and clicking the day.\n * @param page Puppeteer page instance\n * @param dateStr Date string in DD/MM/YYYY format\n * @throws If the date is invalid, the calendar is not found, or the day is not available\n */\nexport async function selectCalendar(page: Page, dateStr: string) {\n  // Parse with moment, enforce strict DD/MM/YYYY\n  const m = moment(dateStr, 'DD/MM/YYYY', true);\n  if (!m.isValid()) {\n    throw new Error(`Invalid date string: ${dateStr}, expected DD/MM/YYYY`);\n  }\n  const targetDay = m.date();\n  const targetMonth = m.month(); // 0-based\n  const targetYear = m.year();\n\n  // Instead of waiting for selector, just sleep for 1 second to allow calendar to render\n  await page.evaluate(() => new Promise((resolve) => setTimeout(resolve, 1000)));\n  // Now try to get the days grid\n  const daysGrid = await page.$('.grid.grid-cols-7.gap-1.mt-2');\n  if (!daysGrid) throw new Error('Calendar days grid not found');\n\n  const rootHandle = (await daysGrid.evaluateHandle((el) => el.closest('div.relative'))) as ElementHandle<Element>;\n  if (!rootHandle) throw new Error('Calendar root not found');\n\n  /**\n   * Reads the current month and year from the calendar header.\n   * @param root Calendar root element handle\n   * @returns Object with curMonth (0-based) and curYear\n   */\n  async function readHeader(root: ElementHandle<Element>) {\n    const info = await root.$eval(':scope .flex.justify-between', (hdr) => {\n      const left = hdr.querySelector('.flex.items-center');\n      const btns = left ? Array.from(left.querySelectorAll('button')) : [];\n      const monthText = (btns[0]?.textContent || '').trim();\n      const yearText = (btns[1]?.textContent || '').trim();\n      return { monthText, yearText };\n    });\n    const curMonth = monthIndexFromHeader(info.monthText);\n    const curYear = parseInt(info.yearText, 10);\n    return { curMonth, curYear };\n  }\n\n  /**\n   * Gets the previous and next navigation buttons in the calendar.\n   * @param root Calendar root element handle\n   * @returns Object with prevBtn and nextBtn element handles\n   */\n  async function getNavButtons(root: ElementHandle<Element>) {\n    const buttons = await root.$$(':scope .flex.items-center.justify-center > button');\n    if (buttons.length < 2) throw new Error('Prev/Next buttons not found');\n    return { prevBtn: buttons[0], nextBtn: buttons[1] };\n  }\n\n  const { prevBtn, nextBtn } = await getNavButtons(rootHandle);\n\n  // Navigate to target month/year\n  for (let safety = 0; safety < 600; safety++) {\n    const { curMonth, curYear } = await readHeader(rootHandle);\n    if (curMonth === targetMonth && curYear === targetYear) break;\n\n    const diff = (targetYear - curYear) * 12 + (targetMonth - curMonth);\n    if (diff < 0) {\n      await prevBtn.click();\n    } else {\n      await nextBtn.click();\n    }\n    await waitForDomStable(page, 150);\n    if (safety === 599) throw new Error(`Failed to reach ${targetMonth + 1}/${targetYear}`);\n  }\n\n  // Click the day\n  const clicked = await rootHandle.evaluate((root, wantedDay: number) => {\n    const grid = root.querySelector('.grid.grid-cols-7');\n    if (!grid) return false;\n    const btns = Array.from(grid.querySelectorAll('button')) as HTMLButtonElement[];\n    for (const btn of btns) {\n      if (btn.classList.contains('cursor-not-allowed') || btn.disabled) continue;\n      const daySpan = btn.querySelector('span.font-bold');\n      const txt = daySpan?.textContent?.trim() || '';\n      if (Number(txt) === wantedDay) {\n        (btn as HTMLElement).click();\n        return true;\n      }\n    }\n    return false;\n  }, targetDay);\n\n  if (!clicked) {\n    console.error(`Day ${targetDay} not found in current month view`);\n  }\n\n  return clicked;\n}\n\nexport async function screenshot(page: Page, filePath: string = 'tmp/screenshot.png') {\n  fs.ensureDirSync(path.dirname(filePath));\n  await page.screenshot({\n    path: filePath as any,\n    fullPage: true\n  });\n  console.log(`Screenshot saved as ${filePath}`);\n}\n\nexport async function clickDaftarBaru(page: Page) {\n  // Use a compatible selector and textContent check since :has and :contains are not supported in querySelector\n  const buttonHandle = await page.evaluateHandle(() => {\n    const buttons = Array.from(document.querySelectorAll('button'));\n    return (\n      buttons.find((btn) => {\n        const div = btn.querySelector('div.text-white');\n        return div && div.textContent && div.textContent.trim() === 'Daftar Baru';\n      }) || null\n    );\n  });\n  if (buttonHandle) {\n    const isVisible = await buttonHandle.evaluate(\n      (el) => el !== null && !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length)\n    );\n    if (isVisible) {\n      await buttonHandle.click();\n      // Wait for dom to stabilize after clicking\n      await page.evaluate(async () => {\n        function waitForDomStable(timeout = 10000, stableMs = 800) {\n          return new Promise((resolve, reject) => {\n            let lastChange = Date.now();\n            // eslint-disable-next-line prefer-const\n            let observer: MutationObserver;\n            const timer = setTimeout(() => {\n              if (observer) observer.disconnect();\n              reject(new Error('DOM did not stabilize in time'));\n            }, timeout);\n            observer = new MutationObserver(() => {\n              lastChange = Date.now();\n            });\n            observer.observe(document.body, { childList: true, subtree: true, attributes: true, characterData: true });\n            (function check() {\n              if (Date.now() - lastChange > stableMs) {\n                clearTimeout(timer);\n                observer.disconnect();\n                resolve(undefined);\n              } else {\n                setTimeout(check, 100);\n              }\n            })();\n          });\n        }\n        await waitForDomStable();\n      });\n    } else {\n      console.log('Button exists but is not visible');\n    }\n  } else {\n    throw new Error('Button \"Daftar Baru\" not found');\n  }\n}\n\n/**\n * Perform login on the sehatindonesiaku.kemkes.go.id site.\n * @param page Puppeteer page instance\n * @param options Optional login options: username, password, clearCookies\n */\nexport async function _login(\n  page: Page,\n  options: {\n    username?: string;\n    password?: string;\n    clearCookies?: boolean;\n  } = {}\n) {\n  const {\n    username = process.env.SIH_USERNAME || '',\n    password = process.env.SIH_PASSWORD || '',\n    clearCookies = false\n  } = options;\n\n  await page.goto('https://sehatindonesiaku.kemkes.go.id/auth/login', { waitUntil: 'networkidle2' });\n\n  // Clear cookies if specified\n  if (clearCookies) {\n    await clearCurrentPageCookies(page);\n    await page.goto('https://sehatindonesiaku.kemkes.go.id/auth/login', { waitUntil: 'networkidle2' });\n  }\n\n  // Check if already logged in\n  if (!page.url().includes('/auth/login')) {\n    console.log('Already logged in, skipping login step');\n    return;\n  }\n  // Fill email (username)\n  await page.type('input[name=\"Email\"]', username);\n  // Fill password\n  await page.type('input[name=\"Kata sandi\"]', password);\n  // Wait for captcha input to be visible\n  await page.waitForSelector('input[name=\"Captcha\"]', { visible: true });\n  // Optionally, you can add code to handle captcha here (manual or automated)\n  // Uncomment below to prompt for captcha input from user\n  // const captcha = await promptUserForCaptcha();\n  // await page.type('input[name=\"Captcha\"]', captcha);\n  // Wait for the login button to be enabled and click it\n  const loginButtonSelector = 'div.text-center .bg-disabled, div.text-center button[type=\"submit\"]';\n  // Try to find enabled button, fallback to disabled for waiting\n  await page.waitForSelector(loginButtonSelector, { visible: true });\n  // If the button is not disabled, click it\n  const isDisabled = await page.$eval(loginButtonSelector, (el) => el.classList.contains('bg-disabled'));\n  if (!isDisabled) {\n    await Promise.all([\n      page.click('div.text-center button[type=\"submit\"]'),\n      page.waitForNavigation({ waitUntil: 'networkidle2' })\n    ]);\n    console.log('Login successful');\n  } else {\n    console.log('Login button is disabled. Please check if all fields are filled and captcha is handled.');\n  }\n}\n\nexport async function enterSehatIndonesiaKu(page: Page) {\n  await page.goto('https://sehatindonesiaku.kemkes.go.id/ckg-pendaftaran-individu', { waitUntil: 'networkidle2' });\n\n  // Wait for DOM to stabilize (no mutations for 800ms)\n  await page.evaluate(async () => {\n    function waitForDomStable(timeout = 10000, stableMs = 800) {\n      return new Promise((resolve, reject) => {\n        let lastChange = Date.now();\n        // eslint-disable-next-line prefer-const\n        let observer: MutationObserver;\n        const timer = setTimeout(() => {\n          if (observer) observer.disconnect();\n          reject(new Error('DOM did not stabilize in time'));\n        }, timeout);\n        observer = new MutationObserver(() => {\n          lastChange = Date.now();\n        });\n        observer.observe(document.body, { childList: true, subtree: true, attributes: true, characterData: true });\n        (function check() {\n          if (Date.now() - lastChange > stableMs) {\n            clearTimeout(timer);\n            observer.disconnect();\n            resolve(undefined);\n          } else {\n            setTimeout(check, 100);\n          }\n        })();\n      });\n    }\n    await waitForDomStable();\n  });\n\n  // Now safe to interact with the DOM\n\n  // Check if current url is not https://sehatindonesiaku.kemkes.go.id/auth/login\n  const currentUrl = page.url();\n  if (!currentUrl.includes('/login')) {\n    return true;\n  } else {\n    // User is not logged in, perform login\n    await _login(page);\n    return false;\n  }\n}\n"]}