{"version":3,"sources":["../../src/runner/sehatindonesiaku-debug.ts"],"names":[],"mappings":"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","file":"sehatindonesiaku-debug.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { LogEntry } from '../database/BaseLogDatabase.js';\nimport { getKehadiranData } from './sehatindonesiaku-kehadiran.js';\nimport { getRegistrasiData } from './sehatindonesiaku-registrasi.js';\nimport { DataItem, DebugItem } from './types.js';\nimport { getSehatIndonesiaKuDb } from './sehatindonesiaku-data.js';\nimport { LogDatabase } from '../database/LogDatabase.js';\n\n// This file for development only\n\nconst logFile = path.join(process.cwd(), 'tmp/logs/debug.log');\n// reset log\nfs.ensureDirSync(path.dirname(logFile));\nfs.writeFileSync(logFile, '');\nconst _log = console.log;\nconst _error = console.error;\n\nconsole.log = (...args: any[]) => {\n  _log(...args);\n  const map = args.map((arg) => {\n    if (typeof arg === 'object') {\n      return JSON.stringify(arg);\n    } else if (typeof arg === 'boolean') {\n      return arg ? 'true' : 'false';\n    }\n    return arg;\n  });\n  fs.appendFileSync(logFile, `${map.join(' ')}\\n`);\n};\n\nconsole.error = (...args: any[]) => {\n  _error(...args);\n  const map = args.map((arg) => {\n    if (typeof arg === 'object') {\n      return JSON.stringify(arg);\n    } else if (typeof arg === 'boolean') {\n      return arg ? 'true' : 'false';\n    }\n    return arg;\n  });\n  fs.appendFileSync(logFile, `[ERROR] ${map.join(' ')}\\n`);\n};\n\nasync function _main(callback: (db: Awaited<ReturnType<typeof getSehatIndonesiaKuDb>>) => any | Promise<any>) {\n  const db = await getSehatIndonesiaKuDb();\n  await callback(db);\n  await db.close();\n}\n\nasync function _debugRegistrasiData() {\n  const allData = await getRegistrasiData({ debug: true });\n  console.log(`Total records from Registrasi: ${allData.length}`);\n  for (const [index, item] of allData.entries()) {\n    console.log(`[${index + 1}/${allData.length}] NIK: ${item.nik}`);\n    console.log(`${item.nik} - ${item.nama}`);\n    console.log(`\\t-> registered: ${item.registered}`);\n    console.log(`\\t-> hadir: ${item.hadir}`);\n  }\n}\n\nasync function _debugHadirData(db: LogDatabase) {\n  const allData = await getKehadiranData(db);\n  console.log(`Total records from Kehadiran: ${allData.length}`);\n  for (const [index, item] of allData.entries()) {\n    console.log(`[${index + 1}/${allData.length}] NIK: ${item.nik}`);\n    console.log(`${item.nik} - ${item.nama}`);\n    console.log(`\\t-> registered: ${item.registered}`);\n    console.log(`\\t-> hadir: ${item.hadir}`);\n  }\n}\n\nasync function _debugData(db, options?: { nik?: string }) {\n  const { getExcelData } = await import('./sehatindonesiaku-data.js');\n  const allExcelData: DataItem[] = await getExcelData();\n  const allDbData = (await db.getLogs()) as LogEntry<DataItem>[];\n\n  console.log(`Total records from Excel: ${allExcelData.length}`);\n  console.log(`Total records from Database: ${allDbData.length}`);\n\n  // Merge excel + db records with type tags (typed as DebugItem)\n  let allData = [\n    ...allExcelData.map((item) => ({ ...item, type: 'excel' as const })),\n    ...allDbData.map((log) => ({ ...log.data, type: 'db' as const }))\n  ].filter((item) => {\n    // Non-empty object\n    return item && Object.keys(item).length > 0;\n  }) as DebugItem[];\n\n  // Filter by NIK if requested\n  if (options?.nik) {\n    allData = allData.filter((item) => item.nik === options.nik);\n\n    if (allData.length === 0) {\n      console.log(`No data found for NIK ${options.nik}`);\n      return;\n    }\n\n    console.log(`Filtered results for NIK ${options.nik}:`, allData);\n  }\n\n  // Print details\n  allData.forEach((item, index) => {\n    const foundInExcel = allExcelData.some((d) => d.nik === item.nik);\n    if (!foundInExcel) return;\n\n    console.log(`[${index + 1}/${allData.length}] NIK: ${item.nik} - ${item.nama}`);\n    console.log(`\\t-> from: ${item.type}`);\n    console.log(`\\t-> registered: ${item.registered}`);\n    console.log(`\\t-> hadir: ${item.hadir}\\n`);\n  });\n}\n\nasync function _testRegistrasiFilter(db) {\n  // test register 3173050212880001\n  // kemkes --nik=3173050212880001\n  // 3173055301750007 - data tidak sesuai KTP\n  // 3173052509010005 - sukses\n  // 3173056206040006 - data kuota penuh pada tanggal tertentu\n  // Test filtering by NIK\n  const nik = `3173055605081003`;\n  process.argv.push(`--nik=${nik.trim()}`);\n  await _debugData(db, { nik });\n}\n\n_main(async function (db) {\n  // console.log('all data');\n  // await _debugData(db);\n  // console.log('all registrasi data');\n  // await _debugRegistrasiData();\n  // console.log('all hadir data');\n  // await _debugHadirData();\n  await _testRegistrasiFilter(db);\n  // await _migrate(db);\n})\n  .catch(console.error)\n  .finally(() => {\n    _log(`Log saved ${logFile}`);\n  });\n\nasync function _migrate(db) {\n  const allData = (await db.getLogs()) as LogEntry<DataItem>[];\n  for (let i = 0; i < (allData as LogEntry<DataItem>[]).length; i++) {\n    const item = (allData as LogEntry<DataItem>[])[i];\n    process.stdout.write(`\\rProcessing [${i + 1}/${(allData as LogEntry<DataItem>[]).length}] ${item.id}... `);\n    if ('status' in item.data) {\n      if (!('registered' in item.data)) {\n        // Set default value for registered\n        if (item.data.status === 'success') {\n          item.data.registered = true;\n        } else {\n          item.data.registered = false;\n        }\n      }\n      delete item.data.status;\n      await db.addLog(item);\n      console.log(`${item.id} migrated`);\n    }\n  }\n}\n"]}