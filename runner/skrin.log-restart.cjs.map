{"version":3,"sources":["../../src/runner/skrin.log-restart.js"],"names":["getPuppeteer","skrinLogin","processData","path","getLogData","deepmerge","appendLog"],"mappings":"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","file":"skrin.log-restart.cjs","sourcesContent":["import { deepmerge } from 'deepmerge-ts';\nimport path from 'node:path';\nimport { getPuppeteer } from '../puppeteer_utils.js';\nimport { processData } from './skrin.js';\nimport { appendLog, getLogData } from '../utils.js';\nimport { skrinLogin } from '../skrin_puppeteer.js';\n\n// re-test .cache/lastData.log\n// current index range: 7488 - 8286\n\nasync function createSession() {\n  console.log('Creating new Puppeteer session...');\n  const { page, browser } = await getPuppeteer();\n  await skrinLogin(page, browser);\n  return { page, browser };\n}\n\n/**\n * Attempts to reprocess a previously skipped log entry.\n *\n * Logs the result or error details, and returns the outcome of the `processData` function.\n *\n * @async\n * @function\n * @param {import('../../globals.js').ExcelRowData} data - The data entry to be reprocessed.\n * @param {import('puppeteer').Browser} browser - An instance of the Puppeteer browser.\n * @returns {Promise<{status: 'success' | 'error', data?: any, error?: any, message?: string}>}\n * Resolves with the result of processing, or throws an error if an exception occurs.\n */\nasync function processSkippedData(data, browser) {\n  const result = await processData(browser, data);\n  if (result.status === 'error') {\n    console.error('Error processing data:', {\n      error: result.error || result.message || 'Unknown error',\n      data,\n      result\n    });\n  } else if (result.status === 'success') {\n    console.log('Data processed successfully:', result.data);\n  } else {\n    console.warn('Unexpected result status:', result.status, result);\n  }\n  return result;\n}\n\n// from 7512\nexport const newLogPath = path.join(process.cwd(), '.cache', 'newLastData.log');\nconst parsedNewLogs = getLogData(newLogPath);\nconst parsedLogs = getLogData();\n// Build a Set of nik values from parsedNewLogs\nconst newNikSet = new Set(parsedNewLogs.map((item) => item.data && item.data.nik));\n// Filter parsedLogs to exclude items already in parsedNewLogs by nik\nconst filteredLogs = parsedLogs.filter((item) => item.data && !newNikSet.has(item.data.nik));\n\nif (process.argv.some((arg) => arg.includes('log-restart'))) {\n  (async function () {\n    let { browser } = await createSession();\n\n    // Optional: Listen for disconnects\n    browser.on('disconnected', () => {\n      console.error('Puppeteer browser disconnected!');\n    });\n\n    try {\n      for (let i = 0; i < filteredLogs.length; i++) {\n        // Every 25 iterations, close and recreate browser, then re-login\n        if (i > 0 && i % 25 === 0) {\n          console.log(`Closing browser at iteration ${i}...`);\n          await browser.close();\n          console.log(`Recreating browser at iteration ${i}...`);\n          const session = await createSession();\n          browser = session.browser;\n          browser.on('disconnected', () => {\n            console.error('Puppeteer browser disconnected!');\n          });\n        }\n\n        const { timestamp, status, data, raw } = filteredLogs[i];\n        if (status === 'skipped') {\n          const modifiedData = await processSkippedData(data, browser);\n          if (!modifiedData) {\n            throw new Error(`No modified data returned for skipped item: ${JSON.stringify(filteredLogs[i])}`);\n          }\n          const mergeData = deepmerge(data, modifiedData);\n          if (modifiedData.status === 'error') {\n            console.error('Error processing skipped data:', modifiedData.error || modifiedData.message);\n            appendLog(mergeData, 'Error Processing Skipped Data', newLogPath);\n          } else if (modifiedData.status === 'success') {\n            appendLog(mergeData, 'Processed Skipped Data', newLogPath);\n          } else {\n            throw new Error(`Unexpected status from processData: ${modifiedData.status}`);\n          }\n        } else if (status === 'invalid') {\n          console.warn('Invalid data found in log:', { timestamp, data, raw });\n          appendLog(data, 'Invalid Data', newLogPath);\n        } else {\n          console.log('Skipping processed data:', { timestamp, data, raw });\n          appendLog(data, 'Processed Data', newLogPath);\n        }\n      }\n    } catch (err) {\n      console.error('Fatal error in processing loop:', err);\n    } finally {\n      if (browser && browser.connected) {\n        console.log('Closing browser at end of script...');\n        await browser.close();\n      }\n    }\n  })();\n}\n"]}