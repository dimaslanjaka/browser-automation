{"version":3,"sources":["../../src/database/MySQLHelper.ts"],"names":[],"mappings":"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","file":"MySQLHelper.js","sourcesContent":["import mariadb, { Pool, PoolConnection } from 'mariadb';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport interface MySQLConfig {\n  host: string;\n  user: string;\n  password: string;\n  database: string;\n  port?: number | string;\n  connectionLimit?: number;\n  connectTimeout?: number;\n}\n\nexport class MySQLHelper {\n  private pool: Pool;\n  private config: MySQLConfig;\n  public ready = false;\n\n  constructor(config: MySQLConfig) {\n    this.config = config;\n  }\n\n  async initialize() {\n    if (this.ready) return;\n\n    // Ensure database exists\n    const _schemaIndicatorFile = path.join(process.cwd(), 'tmp/database/', `${this.config.database}.schema`);\n    if (!fs.existsSync(_schemaIndicatorFile)) {\n      await this._ensureDatabase();\n      await fs.ensureDir(path.dirname(_schemaIndicatorFile));\n      await fs.writeFile(_schemaIndicatorFile, `Initialized at ${new Date().toISOString()}\\n`, 'utf-8');\n    }\n\n    // Create connection pool\n    this.pool = mariadb.createPool({\n      host: this.config.host,\n      user: this.config.user,\n      password: this.config.password,\n      database: this.config.database,\n      port: parseInt(String(this.config.port || 3306), 10),\n      connectionLimit: this.config.connectionLimit || 5,\n      connectTimeout: this.config.connectTimeout || 60000,\n      allowPublicKeyRetrieval: true\n    });\n\n    this.ready = true;\n  }\n\n  private async _ensureDatabase() {\n    const adminConn = await mariadb.createConnection({\n      host: this.config.host,\n      user: this.config.user,\n      password: this.config.password,\n      port: parseInt(String(this.config.port ?? '3306'), 10),\n      connectTimeout: this.config.connectTimeout || 60000,\n      allowPublicKeyRetrieval: true\n    });\n    await adminConn.query(`CREATE DATABASE IF NOT EXISTS \\`${this.config.database}\\``);\n    await adminConn.end();\n  }\n\n  /**\n   * Execute a simple query\n   */\n  async query<T = any>(sql: string, params: any[] = []): Promise<T[]> {\n    let conn: PoolConnection | undefined;\n    try {\n      conn = await this.pool.getConnection();\n      const rows = await conn.query<T>(sql, params);\n      // Remove metadata property if present\n      return Array.isArray(rows) ? (rows as T[]) : [];\n    } finally {\n      if (conn) conn.release();\n    }\n  }\n\n  /**\n   * Execute insert/update/delete\n   */\n  async execute(sql: string, params: any[] = []): Promise<{ affectedRows: number; insertId?: number }> {\n    let conn: PoolConnection | undefined;\n    try {\n      conn = await this.pool.getConnection();\n      const result = await conn.query(sql, params);\n      return {\n        affectedRows: result.affectedRows || 0,\n        insertId: result.insertId || undefined\n      };\n    } finally {\n      if (conn) conn.release();\n    }\n  }\n\n  /**\n   * Transaction wrapper\n   */\n  async transaction<T>(fn: (conn: PoolConnection) => Promise<T>): Promise<T> {\n    let conn: PoolConnection | undefined;\n    try {\n      conn = await this.pool.getConnection();\n      await conn.beginTransaction();\n      const result = await fn(conn);\n      await conn.commit();\n      return result;\n    } catch (err) {\n      if (conn) await conn.rollback();\n      throw err;\n    } finally {\n      if (conn) conn.release();\n    }\n  }\n\n  /**\n   * Close the pool\n   */\n  async close(): Promise<void> {\n    if (!this.ready) return;\n    await this.pool.end();\n    this.ready = false;\n  }\n}\n\nexport default MySQLHelper;\n"]}