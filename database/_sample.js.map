{"version":3,"sources":["../../src/database/_sample.ts"],"names":[],"mappings":";;;AAGA,MAAM,EAAE,UAAA,EAAY,UAAA,EAAY,YAAY,YAAA,EAAc,UAAA,KAAe,OAAA,CAAQ,GAAA;AAEjF,eAAe,IAAA,GAAO;AACpB,EAAA,MAAM,IAAA,GAAO,IAAI,WAAA,CAAY;AAAA,IAC3B,IAAA,EAAM,UAAA;AAAA,IACN,IAAA,EAAM,UAAA;AAAA,IACN,QAAA,EAAU,UAAA;AAAA,IACV,QAAA,EAAU,YAAA;AAAA,IACV,IAAA,EAAM,UAAA,GAAa,QAAA,CAAS,UAAA,EAAY,EAAE,CAAA,GAAI;AAAA,GAC/C,CAAA;AAED,EAAA,IAAI;AACF,IAAA,MAAM,KAAK,UAAA,EAAW;AAEtB,IAAA,MAAM,IAAA,GAAO,MAAM,IAAA,CAAK,KAAA,CAAuB,qBAAqB,CAAA;AACpE,IAAA,OAAA,CAAQ,GAAA,CAAI,kBAAA,EAAoB,IAAA,CAAK,CAAC,EAAE,GAAG,CAAA;AAE3C,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,KAAA,CAAM,0CAA0C,CAAA;AACpF,IAAA,MAAM,cAAA,GAAiB,MAAM,IAAA,CAAK,KAAA,CAAM,wCAAwC,CAAA;AAChF,IAAA,MAAM,eAAA,GAAkB,MAAM,IAAA,CAAK,KAAA,CAAM,yCAAyC,CAAA;AAClF,IAAA,OAAA,CAAQ,GAAA,CAAI,qBAAA,EAAuB,gBAAA,CAAiB,CAAC,CAAC,CAAA;AACtD,IAAA,OAAA,CAAQ,GAAA,CAAI,mBAAA,EAAqB,cAAA,CAAe,CAAC,CAAC,CAAA;AAClD,IAAA,OAAA,CAAQ,GAAA,CAAI,oBAAA,EAAsB,eAAA,CAAgB,CAAC,CAAC,CAAA;AAEpD,IAAA,MAAM,WAAA,GAAc,MAAM,IAAA,CAAK,KAAA,CAAM,kBAAkB,CAAA;AACvD,IAAA,OAAA,CAAQ,GAAA,CAAI,qBAAA,EAAuB,WAAA,CAAY,MAAM,CAAA;AAErD,IAAA,MAAM,cAAA,GAAiB,MAAM,IAAA,CAAK,KAAA,CAAM,uCAAuC,CAAA;AAC/E,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,KAAA,CAAM,sCAAsC,CAAA;AAChF,IAAA,MAAM,cAAA,GAAiB,MAAM,IAAA,CAAK,KAAA,CAAM,oCAAoC,CAAA;AAC5E,IAAA,OAAA,CAAQ,GAAA,CAAI,kBAAA,EAAoB,cAAA,CAAe,CAAC,CAAC,CAAA;AACjD,IAAA,OAAA,CAAQ,GAAA,CAAI,oBAAA,EAAsB,gBAAA,CAAiB,CAAC,CAAC,CAAA;AACrD,IAAA,OAAA,CAAQ,GAAA,CAAI,kBAAA,EAAoB,cAAA,CAAe,CAAC,CAAC,CAAA;AAAA,EACnD,SAAS,GAAA,EAAK;AACZ,IAAA,OAAA,CAAQ,KAAA,CAAM,mBAAmB,GAAG,CAAA;AAAA,EACtC,CAAA,SAAE;AACA,IAAA,MAAM,KAAK,KAAA,EAAM;AAAA,EACnB;AACF;AAEA,IAAA,EAAK","file":"_sample.js","sourcesContent":["import 'dotenv/config';\nimport { MySQLHelper } from './MySQLHelper.js';\n\nconst { MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DBNAME, MYSQL_PORT } = process.env;\n\nasync function main() {\n  const pool = new MySQLHelper({\n    host: MYSQL_HOST,\n    user: MYSQL_USER,\n    password: MYSQL_PASS,\n    database: MYSQL_DBNAME,\n    port: MYSQL_PORT ? parseInt(MYSQL_PORT, 10) : undefined\n  });\n\n  try {\n    await pool.initialize(); // ðŸ‘ˆ make sure pool is initialized!\n\n    const rows = await pool.query<{ now: string }>('SELECT NOW() AS now');\n    console.log('Current DB time:', rows[0].now);\n\n    const maxAllowedPacket = await pool.query(\"SHOW VARIABLES LIKE 'max_allowed_packet'\");\n    const netReadTimeout = await pool.query(\"SHOW VARIABLES LIKE 'net_read_timeout'\");\n    const netWriteTimeout = await pool.query(\"SHOW VARIABLES LIKE 'net_write_timeout'\");\n    console.log('max_allowed_packet:', maxAllowedPacket[0]);\n    console.log('net_read_timeout:', netReadTimeout[0]);\n    console.log('net_write_timeout:', netWriteTimeout[0]);\n\n    const processList = await pool.query('SHOW PROCESSLIST');\n    console.log('Process List count:', processList.length);\n\n    const maxConnections = await pool.query(\"SHOW VARIABLES LIKE 'max_connections'\");\n    const threadsConnected = await pool.query(\"SHOW STATUS LIKE 'Threads_connected'\");\n    const threadsRunning = await pool.query(\"SHOW STATUS LIKE 'Threads_running'\");\n    console.log('max_connections:', maxConnections[0]);\n    console.log('Threads_connected:', threadsConnected[0]);\n    console.log('Threads_running:', threadsRunning[0]);\n  } catch (err) {\n    console.error('Database error:', err);\n  } finally {\n    await pool.close();\n  }\n}\n\nmain();\n"]}