{"version":3,"sources":["../../src/database/LogDatabase.ts"],"names":[],"mappings":"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","file":"LogDatabase.js","sourcesContent":["import { getChecksum, SharedPreferences } from 'sbg-utility';\nimport fs from 'fs-extra';\nimport path from 'upath';\nimport { MysqlLogDatabase } from './MysqlLogDatabase.js';\nimport { getDatabaseFilePath, SQLiteLogDatabase } from './SQLiteLogDatabase.js';\nimport { BaseLogDatabase, LogEntry } from './BaseLogDatabase.js';\nimport { MySQLConfig } from './MySQLHelper.js';\n\ntype MySQL2Options = Partial<MySQLConfig>;\nexport interface LogDatabaseOptions extends MySQL2Options {\n  [key: string]: any;\n  type?: 'sqlite' | 'mysql';\n}\n\nexport class LogDatabase implements BaseLogDatabase {\n  options: LogDatabaseOptions;\n  dbName: string;\n  store: MysqlLogDatabase | SQLiteLogDatabase;\n  pref: SharedPreferences;\n  sqliteDbPath: string;\n\n  constructor(dbName?: string, options?: LogDatabaseOptions) {\n    this.options = options;\n    this.dbName = dbName || 'default';\n    this.pref = new SharedPreferences({ namespace: this.constructor.name });\n    this.sqliteDbPath = getDatabaseFilePath(this.dbName);\n  }\n\n  async getType() {\n    if (!this.store) await this.initialize();\n    const optionsType = this.options.type || 'sqlite';\n    return { optionsType, classType: this.store instanceof MysqlLogDatabase ? 'mysql' : 'sqlite' };\n  }\n\n  async addLog<T = any>(log: LogEntry<T>, options?: { timeout?: number }) {\n    if (!this.store) await this.initialize();\n    return await this.store.addLog(log, options);\n  }\n\n  async removeLog(id: LogEntry<any>['id']) {\n    if (!this.store) await this.initialize();\n    return await this.store.removeLog(id);\n  }\n\n  async getLogById<T = any>(id: LogEntry<T>['id']): Promise<LogEntry<T> | undefined> {\n    if (!this.store) await this.initialize();\n    return await this.store.getLogById<T>(id);\n  }\n\n  async getLogs<T>(\n    filterFn?: (log: LogEntry<T>) => boolean | Promise<boolean>,\n    options?: { limit?: number; offset?: number }\n  ) {\n    if (!this.store) await this.initialize();\n    return (await this.store.getLogs<T>(filterFn, options)) as LogEntry<T>[];\n  }\n\n  async waitReady() {\n    if (!this.store) await this.initialize();\n    if (this.store instanceof MysqlLogDatabase) {\n      return await this.store.waitReady();\n    }\n    // For SQLite or other stores without waitReady, just resolve\n    return;\n  }\n\n  async query<T>(sql: string, params?: any[]): Promise<T[]> {\n    if (!this.store) await this.initialize();\n    return await this.store.query<T>(sql, params);\n  }\n\n  async close() {\n    if (!this.store) return;\n    // Run migration when closing SQLite database\n    if (this.store instanceof SQLiteLogDatabase || this.pref.getBoolean('needsMigration', false)) {\n      try {\n        await this.migrate();\n      } catch (e) {\n        console.error('Migration error:', e);\n        this.pref.putBoolean('needsMigration', true);\n      }\n    }\n    await this.store.close();\n    this.store = undefined as any;\n  }\n\n  /**\n   * Returns true if the underlying database connection (MySQL/SQLite) is closed.\n   */\n  isClosed(): boolean {\n    if (!this.store) return true;\n    if (typeof (this.store as any).isClosed === 'function') {\n      return (this.store as any).isClosed();\n    }\n    // Fallback: if no isClosed method, assume not closed\n    return false;\n  }\n\n  async initialize() {\n    // Avoid re-initializing if already done\n    if (this.store) return;\n    // Anonymize sensitive fields in options for logging\n    const safeOptions = { ...this.options };\n    if (safeOptions.password) safeOptions.password = '***';\n    if (safeOptions.user) safeOptions.user = '***';\n    console.log(`[LogDatabase] Initializing LogDatabase with dbName='${this.dbName}' and options:`, safeOptions);\n    // Decide which database to use based on options.type\n    if (this.options?.type === 'sqlite') {\n      this.store = new SQLiteLogDatabase(this.dbName);\n    } else if (this.options?.type === 'mysql') {\n      this.store = new MysqlLogDatabase(this.dbName, this.options);\n    } else {\n      // auto\n      try {\n        this.store = new MysqlLogDatabase(this.dbName, this.options);\n      } catch (error) {\n        console.error('Error initializing database:', (error as Error).message);\n        console.error('Falling back to SQLite database.');\n        this.store = new SQLiteLogDatabase(this.dbName);\n      }\n    }\n  }\n\n  async showProcessList(print = false) {\n    if (!this.store) await this.initialize();\n    if (this.store instanceof MysqlLogDatabase) {\n      const [rows] = await this.store.query('SHOW PROCESSLIST');\n      if (print) {\n        const e = new Error();\n        console.log('Called from:', e.stack?.split('\\n')[3].trim());\n        console.log('Process List:', rows);\n      }\n      return rows;\n    }\n    if (print) console.log('showProcessList is only available for MySQL databases');\n  }\n\n  /**\n   * Check if the checksum of the SQLite database file has changed since the last recorded value.\n   *\n   * Compares the current checksum of the SQLite database file with the last stored checksum\n   * in the `.cache/migrations/` directory. If `save` is true and the checksum has changed,\n   * updates the stored checksum file.\n   *\n   * @param save Whether to update the stored checksum file if the checksum has changed.\n   * @returns True if the checksum has changed, false otherwise.\n   */\n  private isChecksumChanged(save = false) {\n    const sqliteFile = getDatabaseFilePath(this.dbName);\n    const sqliteChecksum = getChecksum(sqliteFile);\n    const checksumFile = path.join(process.cwd(), `.cache/migrations/${this.dbName || 'logs'}.checksum`);\n    const lastChecksum = fs.existsSync(checksumFile) ? fs.readFileSync(checksumFile, 'utf-8') : null;\n    if (save && lastChecksum !== sqliteChecksum) {\n      fs.ensureDirSync(path.dirname(checksumFile));\n      fs.writeFileSync(checksumFile, sqliteChecksum);\n    }\n    return lastChecksum !== sqliteChecksum;\n  }\n\n  /**\n   * Migrates logs from the SQLite database to the MySQL database for the current database name.\n   *\n   * Skips logs that already exist in the MySQL database.\n   * Uses a lock file in the `.cache/migrations/` directory, named by the checksum of the SQLite file,\n   * to prevent duplicate migrations. If the lock file exists, migration is skipped.\n   *\n   * Only performs migration if the checksum of the SQLite database file has changed since the last migration.\n   * After a successful migration, updates the stored checksum file.\n   *\n   * @returns Promise that resolves when migration is complete or skipped.\n   */\n  async migrate() {\n    // Only migrate if checksum has changed\n    if (!this.isChecksumChanged()) {\n      // Skipping migration as it has already been completed\n      return;\n    }\n    // Perform migration\n    const sqlite = new SQLiteLogDatabase(this.dbName);\n    const mysql = new MysqlLogDatabase(this.dbName);\n\n    const logs = sqlite.getLogs();\n    for await (const log of logs) {\n      if (await mysql.getLogById(log.id)) {\n        console.log(`Skipping existing log id=${log.id}`);\n        continue;\n      }\n      await mysql.addLog(log);\n      console.log(`Migrated log id=${log.id}`);\n    }\n\n    sqlite.close();\n    await mysql.close();\n    // Save new checksum after migration\n    this.isChecksumChanged(true);\n  }\n}\n"]}