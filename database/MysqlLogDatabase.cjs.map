{"version":3,"sources":["../../src/database/MysqlLogDatabase.ts"],"names":["MySQLHelper","defaultOptions"],"mappings":";;;;;AAMA,SAAS,mBAAA,GAAsB;AAE7B,EAAA,MAAM,IAAA,uBAAW,IAAA,EAAK;AACtB,EAAA,MAAM,MAAM,IAAA,CAAK,OAAA,EAAQ,GAAI,IAAA,CAAK,mBAAkB,GAAI,GAAA;AACxD,EAAA,MAAM,UAAU,IAAI,IAAA,CAAK,GAAA,GAAM,CAAA,GAAI,KAAK,GAAK,CAAA;AAC7C,EAAA,OAAO,OAAA,CAAQ,WAAA,EAAY,CAAE,OAAA,CAAQ,KAAK,QAAQ,CAAA;AACpD;AAEO,MAAM,cAAA,GAAuC;AAAA,EAClD,cAAA,EAAgB;AAAA;AAClB;AAsBO,MAAM,gBAAA,CAA4C;AAAA,EAC/C,MAAA;AAAA,EACA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQR,WAAA,CAAY,MAAA,EAAiB,OAAA,GAAgC,EAAC,EAAG;AAC/D,IAAA,MAAM,WAAA,GAAc,MAAA,GAAS,EAAE,QAAA,EAAU,MAAA,EAAQ,GAAG,OAAA,EAAQ,GAAI,EAAE,GAAG,OAAA,EAAQ;AAE7E,IAAA,IAAI,UAAU,WAAA,EAAa;AACzB,MAAA,OAAQ,WAAA,CAAoB,IAAA;AAAA,IAC9B;AACA,IAAA,MAAM,gBAAgB,MAAA,CAAO,MAAA,CAAO,EAAC,EAAG,gBAAgB,WAAW,CAAA;AACnE,IAAA,IAAA,CAAK,MAAA,GAAS,aAAA;AACd,IAAA,IAAA,CAAK,MAAA,GAAS,IAAIA,0BAAA,CAAY,aAA4B,CAAA;AAAA,EAC5D;AAAA,EAEA,MAAM,SAAA,GAAY;AAEhB,IAAA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO;AACtB,MAAA,MAAM,IAAA,CAAK,OAAO,UAAA,EAAW;AAAA,IAC/B;AAEA,IAAA,MAAM,IAAA,CAAK,OAAO,KAAA,CAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,CAKtB,CAAA;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,KAAA,CAAS,GAAA,EAAa,MAAA,EAA8B;AAC/D,IAAA,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA,CAAS,GAAA,EAAK,MAAM,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,MAAA,CAAgB,EAAE,EAAA,EAAI,IAAA,EAAM,OAAA,EAAS,SAAA,GAAY,MAAA,EAAU,EAAgB,OAAA,GAAyB,EAAC,EAAG;AAC5G,IAAA,IAAI,CAAC,SAAA,EAAW,SAAA,GAAY,mBAAA,EAAoB;AAChD,IAAA,MAAMC,eAAAA,GAAiB;AAAA,MACrB,OAAA,EAAS,GAAA;AAAA;AAAA,MACT,MAAA,EAAQ;AAAA;AAAA,KACV;AACA,IAAA,OAAA,GAAU,EAAE,GAAGA,eAAAA,EAAgB,GAAG,OAAA,EAAQ;AAC1C,IAAA,IAAI,QAAQ,MAAA,EAAQ;AAElB,MAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,UAAA,CAAW,EAAE,CAAA;AACzC,MAAA,IAAI,QAAA,EAAU;AAEZ,QAAA,IAAI,OAAO,IAAA,KAAS,QAAA,IAAY,OAAO,QAAA,CAAS,SAAS,QAAA,EAAU;AACjE,UAAA,IAAA,GAAO,EAAE,GAAG,QAAA,CAAS,IAAA,EAAM,GAAG,IAAA,EAAK;AAAA,QACrC;AAAA,MACF;AAAA,IACF;AAEA,IAAA,MAAM,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,CAAA,oEAAA,CAAA,EAAwE;AAAA,MAC9F,EAAA;AAAA,MACA,IAAA,CAAK,UAAU,IAAI,CAAA;AAAA,MACnB,OAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,UAAU,EAAA,EAA2C;AACzD,IAAA,MAAM,MAAA,GAAS,MAAM,IAAA,CAAK,MAAA,CAAO,QAAQ,+BAAA,EAAiC,CAAC,EAAE,CAAC,CAAA;AAC9E,IAAA,OAAO,OAAO,YAAA,GAAe,CAAA;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,WAAoB,EAAA,EAAyD;AACjF,IAAA,MAAM,IAAA,GAAY,MAAM,IAAA,CAAK,MAAA,CAAO,MAAM,iCAAA,EAAmC,CAAC,EAAE,CAAC,CAAA;AACjF,IAAA,IAAI,CAAC,IAAA,CAAK,CAAC,CAAA,EAAG,OAAO,MAAA;AACrB,IAAA,OAAO;AAAA,MACL,EAAA,EAAI,IAAA,CAAK,CAAC,CAAA,CAAE,EAAA;AAAA,MACZ,MAAM,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,CAAC,EAAE,IAAI,CAAA;AAAA,MAC7B,OAAA,EAAS,IAAA,CAAK,CAAC,CAAA,CAAE,OAAA;AAAA,MACjB,SAAA,EAAW,IAAA,CAAK,CAAC,CAAA,CAAE;AAAA,KACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,OAAA,CACJ,QAAA,EACA,OAAA,EACA;AACA,IAAA,IAAI,KAAA,GAAQ,oBAAA;AACZ,IAAA,MAAM,SAAgB,EAAC;AACvB,IAAA,IAAI,mCAAS,KAAA,EAAO;AAClB,MAAA,KAAA,IAAS,UAAA;AACT,MAAA,MAAA,CAAO,IAAA,CAAK,QAAQ,KAAK,CAAA;AACzB,MAAA,IAAI,QAAQ,MAAA,EAAQ;AAClB,QAAA,KAAA,IAAS,WAAA;AACT,QAAA,MAAA,CAAO,IAAA,CAAK,QAAQ,MAAM,CAAA;AAAA,MAC5B;AAAA,IACF;AACA,IAAA,MAAM,OAAY,MAAM,IAAA,CAAK,MAAA,CAAO,KAAA,CAAM,OAAO,MAAM,CAAA;AACvD,IAAA,MAAM,OAAA,GAAyB,IAAA,CAAK,GAAA,CAAI,CAAC,GAAA,MAAc;AAAA,MACrD,IAAI,GAAA,CAAI,EAAA;AAAA,MACR,IAAA,EAAM,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,IAAI,CAAA;AAAA,MACzB,SAAS,GAAA,CAAI,OAAA;AAAA,MACb,WAAW,GAAA,CAAI;AAAA,KACjB,CAAE,CAAA;AACF,IAAA,IAAI,CAAC,UAAU,OAAO,OAAA;AAEtB,IAAA,MAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,GAAA,CAAI,QAAQ,GAAA,CAAI,OAAO,GAAA,KAAU,MAAM,QAAA,CAAS,GAAG,CAAA,GAAK,GAAA,GAAM,MAAU,CAAC,CAAA;AACvG,IAAA,OAAO,OAAA,CAAQ,OAAO,OAAO,CAAA;AAAA,EAC/B;AAAA,EAEO,MAAA,GAAS,KAAA;AAAA,EAET,QAAA,GAAoB;AACzB,IAAA,OAAO,IAAA,CAAK,MAAA;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAA,GAAQ;AACZ,IAAA,IAAI,KAAK,MAAA,EAAQ;AACjB,IAAA,MAAM,IAAA,CAAK,OAAO,KAAA,EAAM;AACxB,IAAA,IAAA,CAAK,MAAA,GAAS,IAAA;AAAA,EAChB;AACF","file":"MysqlLogDatabase.cjs","sourcesContent":["import { BaseLogDatabase, LogEntry } from './BaseLogDatabase.js';\nimport { MySQLConfig, MySQLHelper } from './MySQLHelper.js';\n\n/**\n * Utility to get current timestamp in Asia/Jakarta in ISO8601 format.\n */\nfunction getJakartaTimestamp() {\n  // Asia/Jakarta is UTC+7\n  const date = new Date();\n  const utc = date.getTime() + date.getTimezoneOffset() * 60000;\n  const jakarta = new Date(utc + 7 * 60 * 60000);\n  return jakarta.toISOString().replace('Z', '+07:00');\n}\n\nexport const defaultOptions: Partial<MySQLConfig> = {\n  connectTimeout: 60000 // default 60s\n};\n\n/**\n * Options for adding a log entry.\n *\n * @property timeout Optional timeout in milliseconds for the database operation.\n * @property update Optional flag to update an existing log entry if it exists.\n */\nexport interface AddLogOptions {\n  /**\n   * Timeout in milliseconds for the database operation. (default: 60000)\n   */\n  timeout?: number;\n  /**\n   * Whether to update an existing log entry if it exists. (default: true)\n   */\n  update?: boolean;\n}\n\n/**\n * Class representing a log database using MySQL.\n */\nexport class MysqlLogDatabase implements BaseLogDatabase {\n  private helper: MySQLHelper;\n  private config: MySQLConfig;\n\n  /**\n   * Create a new MysqlLogDatabase instance.\n   *\n   * @param dbName Optional database name (not used, for compatibility)\n   * @param options Optional pool options (e.g., connectTimeout)\n   */\n  constructor(dbName?: string, options: Partial<MySQLConfig> = {}) {\n    const poolOptions = dbName ? { database: dbName, ...options } : { ...options };\n    // filter out 'type' property if present\n    if ('type' in poolOptions) {\n      delete (poolOptions as any).type;\n    }\n    const mergedOptions = Object.assign({}, defaultOptions, poolOptions);\n    this.config = mergedOptions as MySQLConfig;\n    this.helper = new MySQLHelper(mergedOptions as MySQLConfig);\n  }\n\n  async waitReady() {\n    // Avoid re-initializing if already ready\n    if (!this.helper.ready) {\n      await this.helper.initialize();\n    }\n    // Ensure logs table exists\n    await this.helper.query(`CREATE TABLE IF NOT EXISTS logs (\n      id VARCHAR(255) PRIMARY KEY,\n      data TEXT,\n      message TEXT,\n      timestamp VARCHAR(40)\n    )`);\n  }\n\n  /**\n   * Execute a raw SQL query on the underlying MySQL pool.\n   *\n   * @param sql The SQL query string.\n   * @param params Optional parameters for the query.\n   * @returns Promise resolving to the query result.\n   */\n  public async query<T>(sql: string, params?: any[]): Promise<T[]> {\n    return this.helper.query<T>(sql, params);\n  }\n\n  /**\n   * Add or update a log entry in the database.\n   *\n   * @param log Log entry object.\n   * @param options Optional query options (e.g., timeout in ms)\n   * @returns Promise that resolves when the log is added or updated.\n   */\n  async addLog<T = any>({ id, data, message, timestamp = undefined }: LogEntry<T>, options: AddLogOptions = {}) {\n    if (!timestamp) timestamp = getJakartaTimestamp();\n    const defaultOptions = {\n      timeout: 60000, // default 60s if not provided\n      update: true // always update by default\n    };\n    options = { ...defaultOptions, ...options };\n    if (options.update) {\n      // If updating, first get the existing log\n      const existing = await this.getLogById(id);\n      if (existing) {\n        // If existing log is found, merge data\n        if (typeof data === 'object' && typeof existing.data === 'object') {\n          data = { ...existing.data, ...data };\n        }\n      }\n    }\n    // mariadb does not support object with sql/timeout, so use query options directly\n    await this.helper.query(`REPLACE INTO logs (id, data, message, timestamp) VALUES (?, ?, ?, ?)`, [\n      id,\n      JSON.stringify(data),\n      message,\n      timestamp\n    ]);\n  }\n\n  /**\n   * Remove a log entry by its id.\n   *\n   * @param id Unique log identifier.\n   * @returns Promise that resolves to true if a log was removed, false otherwise.\n   */\n  async removeLog(id: LogEntry<any>['id']): Promise<boolean> {\n    const result = await this.helper.execute('DELETE FROM logs WHERE id = ?', [id]);\n    return result.affectedRows > 0;\n  }\n\n  /**\n   * Get a log entry by its id.\n   *\n   * @param id Unique log identifier.\n   * @returns Promise that resolves to the log object or undefined if not found.\n   */\n  async getLogById<T = any>(id: LogEntry<T>['id']): Promise<LogEntry<T> | undefined> {\n    const rows: any = await this.helper.query('SELECT * FROM logs WHERE id = ?', [id]);\n    if (!rows[0]) return undefined;\n    return {\n      id: rows[0].id,\n      data: JSON.parse(rows[0].data) as T,\n      message: rows[0].message,\n      timestamp: rows[0].timestamp\n    };\n  }\n\n  /**\n   * Get all logs or filtered logs from the database.\n   *\n   * @param filterFn Optional filter function to apply to each log entry after fetching from the database. Can be async.\n   * @param options Optional object with limit and offset for pagination.\n   * @returns Promise that resolves to an array of log objects.\n   */\n  async getLogs<T = any>(\n    filterFn?: (log: LogEntry<T>) => boolean | Promise<boolean>,\n    options?: { limit?: number; offset?: number }\n  ) {\n    let query = 'SELECT * FROM logs';\n    const params: any[] = [];\n    if (options?.limit) {\n      query += ' LIMIT ?';\n      params.push(options.limit);\n      if (options.offset) {\n        query += ' OFFSET ?';\n        params.push(options.offset);\n      }\n    }\n    const rows: any = await this.helper.query(query, params);\n    const logsArr: LogEntry<T>[] = rows.map((row: any) => ({\n      id: row.id,\n      data: JSON.parse(row.data),\n      message: row.message,\n      timestamp: row.timestamp\n    }));\n    if (!filterFn) return logsArr;\n    // Support async filterFn\n    const results = await Promise.all(logsArr.map(async (log) => ((await filterFn(log)) ? log : undefined)));\n    return results.filter(Boolean);\n  }\n\n  public closed = false;\n\n  public isClosed(): boolean {\n    return this.closed;\n  }\n\n  /**\n   * Close the database connection pool.\n   *\n   * @returns Promise that resolves when the pool is closed.\n   */\n  async close() {\n    if (this.closed) return;\n    await this.helper.close();\n    this.closed = true;\n  }\n}\n"]}