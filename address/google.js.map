{"version":3,"sources":["../../src/address/google.js"],"names":[],"mappings":";;;;;;AAMA,MAAM,UAAA,GAAa,aAAA,CAAc,MAAA,CAAA,IAAA,CAAY,GAAG,CAAA;AAC9B,IAAA,CAAK,OAAA,CAAQ,UAAU;AAazC,eAAsB,iBAAA,CAAkB,SAAS,MAAA,EAAQ;AACvD,EAAA,MAAM,KAAA,GAAQ,mBAAmB,OAAO,CAAA;AACxC,EAAA,MAAM,GAAA,GAAM,CAAA,0DAAA,EAA6D,KAAK,CAAA,KAAA,EAAQ,MAAM,CAAA,CAAA;AAE5F,EAAA,IAAI;AACF,IAAA,MAAM,EAAE,IAAA,EAAK,GAAI,MAAM,KAAA,CAAM,IAAI,GAAA,EAAK;AAAA,MACpC,OAAA,EAAS,EAAE,YAAA,EAAc,CAAA,EAAG,IAAI,IAAI,CAAA,CAAA,EAAI,GAAA,CAAI,OAAO,CAAA,CAAA;AAAG,KACvD,CAAA;AACD,IAAA,IAAI,IAAA,CAAK,WAAW,IAAA,EAAM;AACxB,MAAA,OAAA,CAAQ,KAAA,CAAM,yBAAA,EAA2B,IAAA,CAAK,MAAM,CAAA;AACpD,MAAA,OAAO,IAAA;AAAA,IACT;AACA,IAAA,IAAI,CAAC,IAAA,CAAK,OAAA,IAAW,IAAA,CAAK,OAAA,CAAQ,WAAW,CAAA,EAAG;AAC9C,MAAA,OAAA,CAAQ,KAAA,CAAM,yBAAyB,OAAO,CAAA;AAC9C,MAAA,OAAO,IAAA;AAAA,IACT;AACA,IAAA,MAAM,MAAA,GAAS,IAAA,CAAK,OAAA,CAAQ,CAAC,CAAA;AAC7B,IAAA,IAAI,CAAC,QAAQ,OAAO,IAAA;AAEpB,IAAA,OAAO;AAAA,MACL,aAAa,MAAA,CAAO,iBAAA;AAAA,MACpB,QAAA,EAAU,MAAA,CAAO,QAAA,CAAS,QAAA,CAAS,GAAA;AAAA,MACnC,SAAA,EAAW,MAAA,CAAO,QAAA,CAAS,QAAA,CAAS;AAAA,KACtC;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,OAAA,CAAQ,KAAA,CAAM,yBAAA,EAA2B,KAAA,CAAM,OAAO,CAAA;AACtD,IAAA,OAAO,IAAA;AAAA,EACT;AACF;AAEA,IAAI,QAAQ,IAAA,CAAK,CAAC,CAAA,CAAE,QAAA,CAAS,gBAAgB,CAAA,EAAG;AAC9C,EAAA,CAAC,YAAY;AAEX,IAAA,MAAM,OAAA,GAAU,8CAAA;AAChB,IAAA,MAAM,MAAA,GAAS,mBAAA;AACf,IAAA,MAAM,MAAA,GAAS,MAAM,iBAAA,CAAkB,OAAA,EAAS,MAAM,CAAA;AACtD,IAAA,OAAA,CAAQ,IAAI,MAAM,CAAA;AAAA,EACpB,CAAA,GAAG;AACL","file":"google.js","sourcesContent":["import axios from 'axios';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport pkg from '../../package.json' with { type: 'json' };\n\n// Get the absolute path of the current script\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Geocodes an address using the Google Maps Geocoding API.\n *\n * @param {string} keyword - The address or place name to search for.\n * @param {string} apiKey - Your Google Maps Geocoding API key.\n * @returns {Promise<{\n *   fullAddress: string,\n *   latitude: number,\n *   longitude: number\n * } | null>} - A promise that resolves to a geocoded object or null if not found.\n */\nexport async function geocodeWithGoogle(keyword, apiKey) {\n  const query = encodeURIComponent(keyword);\n  const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${query}&key=${apiKey}`;\n\n  try {\n    const { data } = await axios.get(url, {\n      headers: { 'User-Agent': `${pkg.name}/${pkg.version}` }\n    });\n    if (data.status !== 'OK') {\n      console.error('Google Geocoding Error:', data.status);\n      return null;\n    }\n    if (!data.results || data.results.length === 0) {\n      console.error('No results found for:', keyword);\n      return null;\n    }\n    const result = data.results[0];\n    if (!result) return null;\n\n    return {\n      fullAddress: result.formatted_address,\n      latitude: result.geometry.location.lat,\n      longitude: result.geometry.location.lng\n    };\n  } catch (error) {\n    console.error('Google Geocoding Error:', error.message);\n    return null;\n  }\n}\n\nif (process.argv[1].includes('address/google')) {\n  (async () => {\n    // Example usage for testing\n    const keyword = '1600 Amphitheatre Parkway, Mountain View, CA';\n    const apiKey = 'YOUR_API_KEY_HERE';\n    const result = await geocodeWithGoogle(keyword, apiKey);\n    console.log(result);\n  })();\n}\n"]}