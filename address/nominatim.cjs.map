{"version":3,"sources":["../../src/address/nominatim.js"],"names":["__filename","fileURLToPath","path","crypto","fs","pkg","axios"],"mappings":"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","file":"nominatim.cjs","sourcesContent":["import axios from 'axios';\nimport crypto from 'crypto';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport pkg from '../../package.json' with { type: 'json' };\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst CACHE_DIR = path.join(process.cwd(), '.cache', 'address');\n\n/**\n * Hash a keyword using MD5\n * @param {string} keyword\n * @returns {string}\n */\nfunction hashKeyword(keyword) {\n  return crypto.createHash('md5').update(keyword).digest('hex');\n}\n\n/**\n * Get cache file path for a keyword\n * @param {string} keyword\n * @returns {string}\n */\nfunction getCacheFilePath(keyword) {\n  return path.join(CACHE_DIR, `${hashKeyword(keyword)}.json`);\n}\n\n/**\n * Geocodes an address using the Nominatim (OpenStreetMap) API with caching and proxy support.\n *\n * @param {string} keyword - The address or place name to search for.\n * @param {'GET'|'POST'} [method='GET'] - HTTP method to use (GET or POST).\n * @param {object} [options] - Optional settings.\n * @param {string} [options.proxy] - Proxy URL. Supported formats:\n *   - socks5://host:port\n *   - socks4://host:port\n *   - http://host:port\n *   - https://host:port\n * @returns {Promise<import('./type').GeocodeResult|null>} - A geocoded result or null if not found.\n */\nexport async function geocodeWithNominatim(keyword, method = 'GET', options = {}) {\n  if (!keyword || typeof keyword !== 'string') {\n    throw new TypeError('Keyword must be a non-empty string');\n  }\n  const cacheFile = getCacheFilePath(keyword);\n\n  try {\n    // Use cache if exists\n    const cached = await fs.readFile(cacheFile, 'utf-8').catch(() => null);\n    if (cached) return JSON.parse(cached);\n  } catch {\n    // fall through on cache read error\n  }\n\n  const baseURL = 'https://nominatim.openstreetmap.org/search';\n  const headers = { 'User-Agent': `${pkg.name}/${pkg.version}` };\n\n  const params = {\n    q: keyword,\n    format: 'json',\n    addressdetails: 1,\n    limit: 1\n  };\n\n  // Proxy support\n  let axiosConfig = { headers };\n  if (options.proxy) {\n    // Dynamically require proxy agent packages only if needed\n    let proxyUrl = options.proxy;\n    let agent;\n    if (/^socks5:/i.test(proxyUrl) || /^socks4:/i.test(proxyUrl)) {\n      // socks-proxy-agent supports both socks4 and socks5\n      const { SocksProxyAgent } = await import('socks-proxy-agent');\n      agent = new SocksProxyAgent(proxyUrl);\n    } else if (/^http:/i.test(proxyUrl) || /^https:/i.test(proxyUrl)) {\n      const { HttpsProxyAgent } = await import('https-proxy-agent');\n      agent = new HttpsProxyAgent(proxyUrl);\n    }\n    if (agent) {\n      axiosConfig = {\n        ...axiosConfig,\n        httpAgent: agent,\n        httpsAgent: agent,\n        proxy: false // disable axios's default proxy handling\n      };\n    }\n  }\n\n  try {\n    const response =\n      method === 'POST'\n        ? await axios.post(baseURL, new URLSearchParams(params), axiosConfig)\n        : await axios.get(baseURL, { ...axiosConfig, params });\n\n    const data = response.data?.[0];\n    if (!data) return null;\n\n    const result = {\n      keyword,\n      fullAddress: data.display_name,\n      latitude: data.lat,\n      longitude: data.lon,\n      googleMapsUrl: `https://www.google.com/maps?q=${data.lat},${data.lon}`,\n      address: data.address\n    };\n\n    // Write to cache\n    await fs.mkdir(CACHE_DIR, { recursive: true });\n    await fs.writeFile(cacheFile, JSON.stringify(result, null, 2), 'utf-8');\n\n    return result;\n  } catch (error) {\n    console.error('Nominatim Error:', error.message);\n    return null;\n  }\n}\n\n// CLI test\nif (process.argv[1].includes('nominatim')) {\n  (async () => {\n    const addresses = [\n      { keyword: 'TEMBOK GEDE I/51-H SURABAYA', method: 'GET' },\n      { keyword: 'LEBAK REJO UTARA 1/8 SURABAYA', method: 'GET' },\n      { keyword: 'KAPAS GADING MADYA 3D/2' }\n    ];\n\n    for (const { keyword, method = 'GET' } of addresses) {\n      try {\n        const result = await geocodeWithNominatim(keyword, method);\n        console.log(result);\n      } catch (error) {\n        console.error(`Error geocoding \"${keyword}\":`, error);\n      }\n    }\n  })();\n}\n"]}