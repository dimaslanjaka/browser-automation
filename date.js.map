{"version":3,"sources":["../src/date.js"],"names":[],"mappings":";;;AAUO,SAAS,MAAA,CAAO,UAAA,EAAY,UAAA,GAAa,YAAA,EAAc;AAC5D,EAAA,IAAI,SAAA,GAAY,MAAA,CAAO,UAAA,EAAY,UAAA,EAAY,IAAI,CAAA;AAEnD,EAAA,IAAI,CAAC,SAAA,CAAU,OAAA,EAAQ,EAAG;AACxB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,sBAAA,EAAyB,UAAU,CAAA,oBAAA,EAAuB,UAAU,CAAA,CAAE,CAAA;AAAA,EACxF;AAEA,EAAA,IAAI,GAAA,GAAM,MAAA,EAAO,CAAE,IAAA,CAAK,WAAW,OAAO,CAAA;AAG1C,EAAA,OAAO,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,GAAG,CAAA;AACxB;AAYO,SAAS,sBAAA,CACd,SAAA,EACA,IAAA,GAAA,iBAAO,IAAI,IAAA,EAAK,EAAE,WAAA,EAAY,EAC9B,MAAA,GAAS,YAAA,EACT,YAAA,GAAe,KAAA,EACf;AACA,EAAA,MAAM,QAAA,GAAW;AAAA,IACf,OAAA,EAAS,CAAA;AAAA,IACT,QAAA,EAAU,CAAA;AAAA,IACV,QAAA,EAAU,CAAA;AAAA,IACV,KAAA,EAAO,CAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,KAAA,EAAO,CAAA;AAAA,IACP,GAAA,EAAK,CAAA;AAAA,IACL,GAAA,EAAK,CAAA;AAAA,IACL,IAAA,EAAM,CAAA;AAAA,IACN,IAAA,EAAM,CAAA;AAAA,IACN,IAAA,EAAM,CAAA;AAAA,IACN,IAAA,EAAM,CAAA;AAAA,IACN,OAAA,EAAS,CAAA;AAAA,IACT,MAAA,EAAQ,CAAA;AAAA,IACR,SAAA,EAAW,CAAA;AAAA,IACX,OAAA,EAAS,CAAA;AAAA,IACT,OAAA,EAAS,CAAA;AAAA,IACT,QAAA,EAAU,EAAA;AAAA,IACV,QAAA,EAAU,EAAA;AAAA,IACV,QAAA,EAAU;AAAA,GACZ;AAEA,EAAA,MAAM,GAAA,GAAM,UAAU,WAAA,EAAY;AAClC,EAAA,IAAI,EAAE,OAAO,QAAA,CAAA,EAAW;AACtB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6B,SAAS,CAAA,CAAA,CAAG,CAAA;AAAA,EAC3D;AAEA,EAAA,MAAM,UAAA,GAAa,CAAC,IAAA,KAAS;AAC3B,IAAA,MAAM,GAAA,GAAM,CAAC,CAAA,KAAM,CAAA,CAAE,UAAS,CAAE,QAAA,CAAS,GAAG,GAAG,CAAA;AAC/C,IAAA,MAAM,IAAA,GAAO,KAAK,WAAA,EAAY;AAC9B,IAAA,MAAM,EAAA,GAAK,GAAA,CAAI,IAAA,CAAK,QAAA,KAAa,CAAC,CAAA;AAClC,IAAA,MAAM,EAAA,GAAK,GAAA,CAAI,IAAA,CAAK,OAAA,EAAS,CAAA;AAE7B,IAAA,QAAQ,MAAA;AAAQ,MACd,KAAK,YAAA;AACH,QAAA,OAAO,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,EAAE,IAAI,EAAE,CAAA,CAAA;AAAA,MAC5B,KAAK,YAAA;AACH,QAAA,OAAO,CAAA,EAAG,EAAE,CAAA,CAAA,EAAI,EAAE,IAAI,IAAI,CAAA,CAAA;AAAA,MAC5B,KAAK,YAAA;AACH,QAAA,OAAO,CAAA,EAAG,EAAE,CAAA,CAAA,EAAI,EAAE,IAAI,IAAI,CAAA,CAAA;AAAA,MAC5B;AACE,QAAA,MAAM,IAAI,KAAA,CAAM,CAAA,0BAAA,EAA6B,MAAM,CAAA,CAAA,CAAG,CAAA;AAAA;AAC1D,EACF,CAAA;AAEA,EAAA,MAAM,KAAA,uBAAY,IAAA,EAAK;AACvB,EAAA,MAAM,KAAA,GAAQ,SAAS,GAAG,CAAA;AAC1B,EAAA,MAAM,WAAA,GAAc,IAAI,IAAA,CAAK,IAAA,EAAM,QAAQ,CAAA,EAAG,CAAC,EAAE,OAAA,EAAQ;AACzD,EAAA,MAAM,WAAW,EAAC;AAElB,EAAA,KAAA,IAAS,GAAA,GAAM,CAAA,EAAG,GAAA,IAAO,WAAA,EAAa,GAAA,EAAA,EAAO;AAC3C,IAAA,MAAM,IAAA,GAAO,IAAI,IAAA,CAAK,IAAA,EAAM,OAAO,GAAG,CAAA;AAEtC,IAAA,IAAI,IAAA,CAAK,MAAA,EAAO,KAAM,CAAA,EAAG;AACzB,IAAA,IAAI,YAAA,IAAgB,OAAO,KAAA,EAAO;AAElC,IAAA,QAAA,CAAS,IAAA,CAAK,UAAA,CAAW,IAAI,CAAC,CAAA;AAAA,EAChC;AAEA,EAAA,OAAO,QAAA;AACT;AAQO,SAAS,cAAc,GAAA,EAAK;AACjC,EAAA,MAAM,UAAA,GACJ,qLAAA;AACF,EAAA,OAAO,UAAA,CAAW,KAAK,GAAG,CAAA;AAC5B;AAUO,SAAS,iBAAiB,GAAA,EAAK;AACpC,EAAA,MAAM,UAAA,GACJ,qLAAA;AACF,EAAA,MAAM,KAAA,GAAQ,GAAA,CAAI,KAAA,CAAM,UAAU,CAAA;AAClC,EAAA,OAAO,KAAA,GAAQ,KAAA,CAAM,CAAC,CAAA,GAAI,IAAA;AAC5B","file":"date.js","sourcesContent":["import moment from 'moment-timezone';\n\n/**\n * Calculates the age in years from a given birth date string using a specified format.\n *\n * @param {string} dateString - The birth date as a string.\n * @param {import('moment').MomentFormatSpecification} [dateFormat='DD/MM/YYYY'] - The expected format of the input date string (default is 'DD/MM/YYYY').\n * @returns {number} The age in years. Returns 0 if the date is in the future.\n * @throws {Error} If the input date string is not valid according to the given format.\n */\nexport function getAge(dateString, dateFormat = 'DD/MM/YYYY') {\n  let birthDate = moment(dateString, dateFormat, true); // Strict parsing\n\n  if (!birthDate.isValid()) {\n    throw new Error(`Invalid date format: \"${dateString}\". Expected format: ${dateFormat}`);\n  }\n\n  let age = moment().diff(birthDate, 'years');\n\n  // Ensure age is never negative (handles future dates)\n  return Math.max(0, age);\n}\n/**\n * Generate all dates in a given month (by name) excluding Sundays.\n * Supports both English and Indonesian month names.\n *\n * @param {string} monthName - Month name (e.g., \"May\", \"Mei\", \"August\", \"Agustus\").\n * @param {number} [year=new Date().getFullYear()] - The target year.\n * @param {string} [format=\"YYYY-MM-DD\"] - Desired date format. Supported: \"YYYY-MM-DD\", \"DD/MM/YYYY\", \"MM-DD-YYYY\".\n * @param {boolean} [limitToToday=false] - If true, exclude future dates beyond today.\n * @returns {string[]} An array of formatted dates, excluding Sundays and optionally future dates.\n * @throws {Error} If the month name or format is invalid.\n */\nexport function getDatesWithoutSundays(\n  monthName,\n  year = new Date().getFullYear(),\n  format = 'YYYY-MM-DD',\n  limitToToday = false\n) {\n  const monthMap = {\n    january: 0,\n    februari: 1,\n    february: 1,\n    maret: 2,\n    march: 2,\n    april: 3,\n    mei: 4,\n    may: 4,\n    juni: 5,\n    june: 5,\n    juli: 6,\n    july: 6,\n    agustus: 7,\n    august: 7,\n    september: 8,\n    oktober: 9,\n    october: 9,\n    november: 10,\n    desember: 11,\n    december: 11\n  };\n\n  const key = monthName.toLowerCase();\n  if (!(key in monthMap)) {\n    throw new Error(`Unrecognized month name: \"${monthName}\"`);\n  }\n\n  const formatDate = (date) => {\n    const pad = (n) => n.toString().padStart(2, '0');\n    const YYYY = date.getFullYear();\n    const MM = pad(date.getMonth() + 1);\n    const DD = pad(date.getDate());\n\n    switch (format) {\n      case 'YYYY-MM-DD':\n        return `${YYYY}-${MM}-${DD}`;\n      case 'DD/MM/YYYY':\n        return `${DD}/${MM}/${YYYY}`;\n      case 'MM-DD-YYYY':\n        return `${MM}-${DD}-${YYYY}`;\n      default:\n        throw new Error(`Unsupported date format: \"${format}\"`);\n    }\n  };\n\n  const today = new Date();\n  const month = monthMap[key];\n  const daysInMonth = new Date(year, month + 1, 0).getDate();\n  const dateList = [];\n\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month, day);\n\n    if (date.getDay() === 0) continue; // Skip Sundays\n    if (limitToToday && date > today) break; // Stop at today if limit enabled\n\n    dateList.push(formatDate(date));\n  }\n\n  return dateList;\n}\n\n/**\n * Checks if a string contains a month name in either English or Indonesian.\n *\n * @param {string} str - The input string to check.\n * @returns {boolean} Returns true if the string contains a month name, false otherwise.\n */\nexport function containsMonth(str) {\n  const monthRegex =\n    /\\b(january|february|march|april|may|june|july|august|september|october|november|december|januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)\\b/i;\n  return monthRegex.test(str);\n}\n\n/**\n * Extracts the month name from a string if present.\n *\n * Supports full month names in English and Indonesian.\n *\n * @param {string} str - The input string to search.\n * @returns {string|null} The matched month name, or null if not found.\n */\nexport function extractMonthName(str) {\n  const monthRegex =\n    /\\b(january|february|march|april|may|june|july|august|september|october|november|december|januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)\\b/i;\n  const match = str.match(monthRegex);\n  return match ? match[0] : null;\n}\n"]}