{"version":3,"sources":["../src/fetchXlsxData3.js"],"names":["__filename","fileURLToPath","path","SharedPrefs","glob","getFileHash","getCacheKey","getCachedData","XLSX","fs","nikParse","containsMonth","moment","array_random","getDatesWithoutSundays","extractMonthName","saveCachedData"],"mappings":"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","file":"fetchXlsxData3.cjs","sourcesContent":["import * as glob from 'glob';\nimport moment from 'moment-timezone';\nimport nikParse from 'nik-parser-jurusid';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { array_random } from 'sbg-utility';\nimport { fileURLToPath } from 'url';\nimport * as XLSX from 'xlsx';\nimport { SharedPrefs } from './SharedPrefs.js';\nimport { containsMonth, extractMonthName, getDatesWithoutSundays } from './date.js';\nimport { getCacheKey, getCachedData, getFileHash, saveCachedData } from './xlsx-helper.js';\n\n// Get the absolute path of the current script for ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst shared_prefs = new SharedPrefs('sheets', '.cache/shared_prefs');\nconst outputSheetJsonFile = path.join(process.cwd(), '.cache/sheets/debug_output.json');\n\n/**\n * Reads Excel (.xlsx) files in the current directory and extracts data.\n *\n * @param {number|string} [startIndex=0] - The starting row index to extract data from.\n * @param {number|string} [lastIndex=Number.MAX_SAFE_INTEGER] - The ending row index to extract data until.\n * @param {Object} [options] - Optional settings.\n * @param {boolean} [options.noCache=false] - If true, disables cache and always reads from file.\n * @returns {Promise<import('../globals').ExcelRowData[]>} - A promise that resolves to an array of extracted data objects.\n */\nexport async function fetchXlsxData3(startIndex = 0, lastIndex = Number.MAX_SAFE_INTEGER, options = {}) {\n  // Handle null/undefined for startIndex and lastIndex\n  const parsedStartIndex =\n    startIndex === null || startIndex === undefined\n      ? 0\n      : typeof startIndex === 'string'\n        ? parseInt(startIndex, 10)\n        : startIndex;\n  const parsedLastIndex =\n    lastIndex === null || lastIndex === undefined\n      ? Number.MAX_SAFE_INTEGER\n      : typeof lastIndex === 'string'\n        ? parseInt(lastIndex, 10)\n        : lastIndex;\n\n  // Validate parsed parameters\n  const finalStartIndex = isNaN(parsedStartIndex) ? 0 : parsedStartIndex;\n  const finalLastIndex = isNaN(parsedLastIndex) ? Number.MAX_SAFE_INTEGER : parsedLastIndex;\n\n  const files = await glob.glob('.cache/sheets/*.xlsx', {\n    cwd: process.cwd(),\n    absolute: true\n  });\n\n  if (files.length === 0) {\n    throw new Error('No Excel files found.');\n  }\n\n  // Generate file hash and cache key\n  const fileHash = getFileHash(files[0]);\n  const cacheKey = getCacheKey('fetchXlsxData3', fileHash, finalStartIndex, finalLastIndex);\n\n  // Check cache first\n  if (!options.noCache) {\n    const cachedData = getCachedData(cacheKey);\n    if (cachedData) {\n      return cachedData;\n    }\n  }\n\n  // show cache miss message when options.noCache is false\n  if (!options.noCache) console.log(`Cache miss: ${cacheKey} - Processing Excel file...`);\n  const workbook = XLSX.read(fs.readFileSync(files[0]), { cellDates: true });\n  /** @type {Record<string, { [key: string], parsed_nik?: import('./nik-parser/type').NikData }[]>} */\n  const allSheetsData = {};\n  let customRangeData = {};\n\n  const keyMap = {\n    TANGGAL: 'tanggal',\n    'TANGGAL ENTRY': 'tanggal',\n    NAMA: 'nama',\n    'NAMA PASIEN': 'nama',\n    NIK: 'nik',\n    'NIK PASIEN': 'nik',\n    PEKERJAAN: 'pekerjaan',\n    'BERAT BADAN': 'bb',\n    BB: 'bb',\n    'TINGGI BADAN': 'tb',\n    TB: 'tb',\n    BATUK: 'batuk',\n    DM: 'diabetes',\n    'TGL LAHIR': 'tgl_lahir',\n    'TANGGAL LAHIR': 'tgl_lahir',\n    'TANGGAL LAHIR PASIEN': 'tgl_lahir',\n    ALAMAT: 'alamat',\n    'ALAMAT PASIEN': 'alamat',\n    'JENIS KELAMIN': 'jenis_kelamin',\n    'PETUGAS YG MENG ENTRY': 'petugas',\n    'PETUGAS ENTRY': 'petugas'\n  };\n\n  workbook.SheetNames.forEach((sheetName) => {\n    const sheet = workbook.Sheets[sheetName];\n    const raw = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // raw array of arrays\n\n    const headerRowIndex = 7487;\n    const dataStartIndex = headerRowIndex + 1;\n    const headers = raw[headerRowIndex];\n\n    const jsonData = XLSX.utils.sheet_to_json(sheet, {\n      raw: false,\n      cellDates: true,\n      dateNF: 'DD/MM/YYYY',\n      range: dataStartIndex,\n      header: headers\n    });\n\n    const rawJsonData = XLSX.utils.sheet_to_json(sheet, {\n      raw: true,\n      cellDates: true,\n      dateNF: 'DD/MM/YYYY',\n      range: dataStartIndex,\n      header: headers\n    });\n\n    allSheetsData[sheetName] = jsonData.map((row, index) => {\n      const rawRow = rawJsonData[index];\n      let transformedRow = { rowIndex: dataStartIndex + index }; // absolute row index\n\n      Object.values(keyMap).forEach((mappedKey) => {\n        transformedRow[mappedKey] = undefined;\n      });\n\n      let sharedPrefsKey = '';\n      let shared_prefs_data = {};\n\n      for (const key of Object.keys(row)) {\n        const newKey = keyMap[key] || key;\n        let value = row[key];\n\n        if (newKey === 'nik') {\n          sharedPrefsKey = `nik_${value}`;\n          shared_prefs_data = shared_prefs.get(sharedPrefsKey, {});\n          const nik_parser_result = nikParse(value);\n          transformedRow.parsed_nik = nik_parser_result.data || {};\n        }\n\n        if (newKey === 'tanggal') {\n          if (value instanceof Date) {\n            value = value.toLocaleDateString('en-GB'); // DD/MM/YYYY\n          } else if (typeof value === 'string') {\n            const matchHypens = value.match(/^\\d{2}-\\d{2}-\\d{4}$/);\n            if (matchHypens) value = value.replace(/-/g, '/');\n          }\n\n          if (containsMonth(value)) {\n            if (moment(shared_prefs_data.saved_generated_date, 'DD/MM/YYYY', true).isValid()) {\n              value = shared_prefs_data.saved_generated_date;\n            } else {\n              const newValue = array_random(\n                getDatesWithoutSundays(extractMonthName(value), new Date().getFullYear(), 'DD/MM/YYYY', true)\n              );\n              if (moment(newValue, 'DD/MM/YYYY', true).isValid()) {\n                value = newValue;\n                shared_prefs_data.saved_generated_date = newValue;\n              }\n            }\n          }\n\n          if (!['tanggal entry'].includes(value.trim().toLowerCase()) && !value.includes('/')) {\n            throw new Error(`Invalid string date: ${value}`);\n          }\n        }\n\n        if (newKey === 'bb' || newKey === 'tb') {\n          value = parseFloat(`${value}`.replace(',', '.')) || null;\n        }\n\n        transformedRow[newKey] = value;\n      }\n\n      const rawNikKey = Object.keys(rawRow).find((k) => (keyMap[k] || k) === 'nik');\n      if (rawNikKey && rawRow[rawNikKey] !== undefined) {\n        transformedRow.nik = String(rawRow[rawNikKey]).replace(/\\.0+$/, '');\n      }\n\n      if (transformedRow.nik) {\n        shared_prefs_data.nik = transformedRow.nik;\n        shared_prefs.set(sharedPrefsKey, shared_prefs_data);\n      }\n\n      return transformedRow;\n    });\n\n    allSheetsData[sheetName] = allSheetsData[sheetName].map((row, _index) => {\n      if (row.tgl_lahir && row.parsed_nik && row.parsed_nik.lahir) {\n        // Enforce row.parsed_nik.lahir from row.tgl_lahir\n        row.parsed_nik.original_lahir = row.parsed_nik.lahir; // backup original value\n        row.parsed_nik.lahir = row.tgl_lahir;\n      }\n      // Enforce tgl_lahir to be in DD/MM/YYYY format\n      if (!moment(row.tgl_lahir, 'DD/MM/YYYY', true).isValid()) {\n        if (row.tgl_lahir.includes('-')) {\n          const transform = moment(row.tgl_lahir, 'YYYY-MM-DD', true);\n          if (transform.isValid()) {\n            row.tgl_lahir = transform.format('DD/MM/YYYY');\n          }\n        } else {\n          throw new Error(\n            `Invalid tgl_lahir date format in row ${row.rowIndex} of sheet '${sheetName}': ${row.tgl_lahir}`\n          );\n        }\n      }\n\n      return row;\n    });\n\n    customRangeData = allSheetsData[sheetName].filter(\n      (row) => row.rowIndex >= finalStartIndex && row.rowIndex <= finalLastIndex\n    );\n  });\n\n  fs.writeFileSync(outputSheetJsonFile, JSON.stringify(allSheetsData, null, 2), 'utf8');\n\n  // Save to cache\n  saveCachedData(cacheKey, customRangeData);\n\n  return customRangeData;\n}\n\nif (process.argv[1] === __filename) {\n  (async () => {\n    console.log(\n      `Fetching data from Excel files... (start index: ${process.env.index_start}, end index: ${process.env.index_end})`\n    );\n    const datas = await fetchXlsxData3(0, 90000);\n    // console.log(`Fetched ${datas.length} rows of data from Excel files.`);\n    // console.log('First row:', datas[0]);\n    // console.log('Last row:', datas[datas.length - 1]);\n    // MUHAMMAD NATHAN ALFATIR 3578101502250001\n    // 3578106311200003 NI NYOMAN ANINDYA MAHESWARI\n    // const findFirst = findByNik(datas, '3578106311200003');\n    // console.log('Find first:', findFirst);\n    // const findLast = findByNik(datas, '3578101502250001');\n    // console.log('Find last:', findLast);\n    for (const data of datas) {\n      if (data.nik && !/^\\d+$/.test(data.nik)) {\n        throw new Error(`data.nik is not numeric at rowIndex ${data.rowIndex}: ${data.nik}`);\n      }\n      if (data.nik.trim() == '3578106311200003') {\n        console.log('Found special NIK:', data.nik, 'at rowIndex:', data.rowIndex);\n        console.log('Data:', data);\n      }\n    }\n  })();\n}\n"]}