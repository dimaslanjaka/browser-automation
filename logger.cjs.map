{"version":3,"sources":["../src/logger.js"],"names":["__filename","fileURLToPath","path","fs","colors"],"mappings":"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","file":"logger.cjs","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport colors from 'ansi-colors';\n\n// Resolve __dirname di ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst LOG_FILE_PATH = path.resolve(process.cwd(), '.cache/logs/log.txt');\nconst logDir = path.dirname(LOG_FILE_PATH);\nif (!fs.existsSync(logDir)) {\n  fs.mkdirSync(logDir, { recursive: true });\n}\n\nfunction getTimestamp() {\n  return new Date().toISOString();\n}\n\nfunction stripAnsi(str) {\n  // eslint-disable-next-line no-control-regex\n  return str.replace(/\\x1b\\[[0-9;]*m/g, '');\n}\n\nfunction colorize(value) {\n  if (value === null) return colors.magenta('null');\n  if (value === undefined) return colors.gray('undefined');\n\n  const type = typeof value;\n\n  switch (type) {\n    case 'string':\n      return colors.white(`\"${value}\"`);\n    case 'number':\n      return colors.blue(value);\n    case 'boolean':\n      return colors.green(value);\n    case 'object':\n      if (Array.isArray(value)) {\n        const items = value.map((item) => colorize(item)).join(', ');\n        return colors.yellow(`[${items}]`);\n      } else {\n        const entries = Object.entries(value)\n          .map(([k, v]) => `${colors.cyan(k)}: ${colorize(v)}`)\n          .join(', ');\n        return `{ ${entries} }`;\n      }\n    default:\n      return colors.red(`[Unsupported: ${type}]`);\n  }\n}\n\nfunction logToFile(message) {\n  const clean = stripAnsi(message);\n  fs.appendFileSync(LOG_FILE_PATH, `[${getTimestamp()}] ${clean}\\n`, 'utf8');\n}\n\nfunction log(...args) {\n  const timestamp = colors.gray(`[${getTimestamp()}]`);\n  const colorizedArgs = args.map(colorize).join(' ');\n  const rawArgs = args\n    .map((arg) => {\n      try {\n        return typeof arg === 'string' ? arg : JSON.stringify(arg);\n      } catch {\n        return '[Unserializable]';\n      }\n    })\n    .join(' ');\n\n  const fullMessage = `${timestamp} ${colorizedArgs}`;\n  console.log(fullMessage);\n  logToFile(rawArgs);\n}\n\nfunction info(...args) {\n  log(colors.cyan('[INFO]'), ...args);\n}\n\nfunction warn(...args) {\n  log(colors.yellow('[WARN]'), ...args);\n}\n\nfunction error(...args) {\n  log(colors.red('[ERROR]'), ...args);\n}\n\nexport { log, info, warn, error };\nexport default {\n  log,\n  info,\n  warn,\n  error\n};\n"]}